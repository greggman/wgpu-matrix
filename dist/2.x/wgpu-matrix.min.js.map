{"version":3,"file":"wgpu-matrix.min.js","sources":["../../../src/utils.ts","../../../src/vec2.ts","../../../src/vec3.ts","../../../src/vec2-impl.ts","../../../src/mat3-impl.ts","../../../src/vec3-impl.ts","../../../src/mat4-impl.ts","../../../src/quat.ts","../../../src/quat-impl.ts","../../../src/vec4.ts","../../../src/vec4-impl.ts","../../../src/wgpu-matrix.ts"],"sourcesContent":["/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nexport let EPSILON = 0.000001;\n\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nexport function setEpsilon(v: number): number {\n  const old = EPSILON;\n  EPSILON = v;\n  return old;\n}\n\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nexport function degToRad(degrees: number): number {\n  return degrees * Math.PI / 180;\n}\n\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nexport function radToDeg(radians: number): number {\n  return radians * 180 / Math.PI;\n}\n\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nexport function lerp(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nexport function inverseLerp(a: number, b: number, v: number): number {\n  const d = b - a;\n  return (Math.abs(b - a) < EPSILON)\n     ? a\n     : (v - a) / d;\n}\n\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nexport function euclideanModulo(n: number, m: number) {\n  return ((n % m) + m) % m;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 2 values, Float32Array with 2 values, or a Float64Array with 2 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link vec2.setDefaultType}.\n */\nexport type Vec2 = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Vec2 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec2. In other words you can do this\n *\n *     const v = vec2.cross(v1, v2);  // Creates a new Vec2 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec2.create();\n *     vec2.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec2.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let VecType: new (n: number) => Vec2 = Float32Array;\n\n/**\n * Sets the type this library creates for a Vec2\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec2\n */\nexport function setDefaultType(ctor: new (n: number) => Vec2) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Vec2Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `vec2.create` is usually used\n * to create a Vec2 to be filled out as in\n *\n * ```\n * const sum = vec2.create();\n * vec2.add(v1, v2, sum);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nexport function create(x = 0, y = 0): Vec2 {\n  const dst = new VecType(2);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n    }\n  }\n  return dst;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 3 values, Float32Array with 3 values, or a Float64Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link vec3.setDefaultType}.\n */\nexport type Vec3 = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Vec3 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec3`. In other words you can do this\n *\n *     const v = vec3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec3.create();\n *     vec3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let VecType: new (n: number) => Vec3 = Float32Array;\n\n/**\n * Sets the type this library creates for a Vec3\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec3\n */\nexport function setDefaultType(ctor: new (n: number) => Vec3) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nexport function create(x?: number, y?: number, z?: number): Vec3 {\n  const dst = new VecType(3);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n      if (z !== undefined) {\n        dst[2] = z;\n      }\n    }\n  }\n  return dst;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport { Vec2, create, setDefaultType, VecType } from './vec2';\nimport { Vec3, VecType as Vec3Type } from './vec3';\n\nexport default Vec2;\nexport { create, setDefaultType };\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Vec2\n * Also see {@link vec2.create} and {@link vec2.copy}\n *\n * @param x first value\n * @param y second value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  dst[0] = x;\n  dst[1] = y;\n\n  return dst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nexport function ceil(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.ceil(v[0]);\n  dst[1] = Math.ceil(v[1]);\n\n  return dst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nexport function floor(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.floor(v[0]);\n  dst[1] = Math.floor(v[1]);\n\n  return dst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nexport function round(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.round(v[0]);\n  dst[1] = Math.round(v[1]);\n\n  return dst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nexport function clamp(v: Vec2, min = 0, max = 1, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.min(max, Math.max(min, v[0]));\n  dst[1] = Math.min(max, Math.max(min, v[1]));\n\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nexport function add(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n\n  return dst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nexport function addScaled(a: Vec2, b: Vec2, scale: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + b[0] * scale;\n  dst[1] = a[1] + b[1] * scale;\n\n  return dst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nexport function angle(a: Vec2, b: Vec2): number {\n  const ax = a[0];\n  const ay = a[1];\n  const bx = b[0];\n  const by = b[1];\n  const mag1 = Math.sqrt(ax * ax + ay * ay);\n  const mag2 = Math.sqrt(bx * bx + by * by);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport function subtract(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nexport function equalsApproximately(a: Vec2, b: Vec2): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nexport function equals(a: Vec2, b: Vec2): boolean {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Vec2, b: Vec2, t: number, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nexport function lerpV(a: Vec2, b: Vec2, t: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nexport function max(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nexport function min(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function mulScalar(v: Vec2, k: number, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function divScalar(v: Vec2, k: number, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n\n  return dst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport function inverse(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = 1 / v[0];\n  dst[1] = 1 / v[1];\n\n  return dst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport const invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nexport function cross(a: Vec2, b: Vec2, dst?: Vec3): Vec3 {\n  dst = dst || new Vec3Type(3);\n  const z = a[0] * b[1] - a[1] * b[0];\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = z;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nexport function dot(a: Vec2, b: Vec2): number {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nexport function length(v: Vec2): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return Math.sqrt(v0 * v0 + v1 * v1);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport function lengthSq(v: Vec2): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return v0 * v0 + v1 * v1;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport function distance(a: Vec2, b: Vec2): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport const dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport function distanceSq(a: Vec2, b: Vec2): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport const distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nexport function normalize(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const len = Math.sqrt(v0 * v0 + v1 * v1);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nexport function negate(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n\n  return dst;\n}\n\n/**\n * Copies a vector. (same as {@link vec2.clone})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport function copy(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n\n  return dst;\n}\n\n/**\n * Clones a vector. (same as {@link vec2.copy})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport const clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport function multiply(a: Vec2, b: Vec2, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport function divide(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport const div = divide;\n\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nexport function random(scale = 1, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const angle = Math.random() * 2 * Math.PI;\n  dst[0] = Math.cos(angle) * scale;\n  dst[1] = Math.sin(angle) * scale;\n\n  return dst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nexport function zero(dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = 0;\n  dst[1] = 0;\n\n  return dst;\n}\n\n\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat4(v: Vec2, m: Mat4, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const x = v[0];\n  const y = v[1];\n\n  dst[0] = x * m[0] + y * m[4] + m[12];\n  dst[1] = x * m[1] + y * m[5] + m[13];\n\n  return dst;\n}\n\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat3(v: Vec2, m: Mat3, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const x = v[0];\n  const y = v[1];\n\n  dst[0] = m[0] * x + m[4] * y + m[8];\n  dst[1] = m[1] * x + m[5] * y + m[9];\n\n  return dst;\n}\n\n/**\n * Rotate a 2D vector\n *\n * @param a The vec2 point to rotate\n * @param b The origin of the rotation\n * @param rad The angle of rotation in radians\n * @returns the rotated vector\n */\nexport function rotate(a: Vec2, b: Vec2, rad: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  //perform rotation and translate to correct position\n  dst[0] = p0 * cosC - p1 * sinC + b[0];\n  dst[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return dst;\n}\n\n/**\n * Treat a 2D vector as a direction and set it's length\n *\n * @param a The vec2 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nexport function setLength(a: Vec2, len: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n  normalize(a, dst);\n  return mulScalar(dst, len, dst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec2 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nexport function truncate(a: Vec2, maxLen: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, dst);\n  }\n\n  return copy(a, dst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nexport function midpoint(a: Vec2, b: Vec2, dst?: Vec2) {\n  dst = dst || new VecType(2);\n  return lerp(a, b, 0.5, dst);\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport { Quat } from './quat';\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport Vec2, * as vec2 from './vec2-impl';\n\nexport default Mat3;\n\nexport type Mat3LikeCtor = new (n: number) => Mat3;\n\n/**\n * 3x3 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat3.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat3.create();\n *     mat3.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat3.identity();\n *     const trans = mat3.translation([1, 2, 3]);\n *     mat3.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType: Mat3LikeCtor = Float32Array;\n\n// This mess is because with Mat3 we have 3 unused elements.\n// For Float32Array and Float64Array that's not an issue\n// but for Array it's troublesome\nconst ctorMap = new Map<Mat3LikeCtor,() => Mat3>([\n  [Float32Array, () => new Float32Array(12)],\n  [Float64Array, () => new Float64Array(12)],\n  [Array, () => new Array(12).fill(0)],\n]);\nlet newMat3: () => Mat3 = ctorMap.get(Float32Array)!;\n\n/**\n * Sets the type this library creates for a Mat3\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Mat3\n */\nexport function setDefaultType(ctor: new (n: number) => Mat3) {\n  const oldType = MatType;\n  MatType = ctor;\n  newMat3 = ctorMap.get(ctor)!;\n  return oldType;\n}\n\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat3Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat3.create` is usually used\n * to create a Mat3 to be filled out as in\n *\n * ```\n * const m = mat3.create();\n * mat3.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nexport function create(\n    v0?: number, v1?: number, v2?: number,\n    v3?: number, v4?: number, v5?: number,\n    v6?: number, v7?: number, v8?: number): Mat3 {\n  const dst = newMat3();\n  // to make the array homogenous\n  dst[3] = 0;\n  dst[7] = 0;\n  dst[11] = 0;\n\n  if (v0 !== undefined) {\n    dst[0] = v0;\n    if (v1 !== undefined) {\n      dst[1] = v1;\n      if (v2 !== undefined) {\n        dst[2] = v2;\n        if (v3 !== undefined) {\n          dst[4] = v3;\n          if (v4 !== undefined) {\n            dst[5] = v4;\n            if (v5 !== undefined) {\n              dst[6] = v5;\n              if (v6 !== undefined) {\n                dst[8] = v6;\n                if (v7 !== undefined) {\n                  dst[9] = v7;\n                  if (v8 !== undefined) {\n                    dst[10] = v8;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return dst;\n}\n\n/**\n * Sets the values of a Mat3\n * Also see {@link mat3.create} and {@link mat3.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 set from values.\n */\nexport function set(\n    v0: number, v1: number, v2: number,\n    v3: number, v4: number, v5: number,\n    v6: number, v7: number, v8: number, dst?: Mat3) {\n  dst = dst || newMat3();\n\n  dst[0] = v0;  dst[1] = v1;  dst[ 2] = v2;  dst[ 3] = 0;\n  dst[4] = v3;  dst[5] = v4;  dst[ 6] = v5;  dst[ 7] = 0;\n  dst[8] = v6;  dst[9] = v7;  dst[10] = v8;  dst[11] = 0;\n\n  return dst;\n}\n\n/**\n * Creates a Mat3 from the upper left 3x3 part of a Mat4\n * @param m4 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from m4\n */\nexport function fromMat4(m4: Mat4, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n  dst[0] = m4[0];  dst[1] = m4[1];  dst[ 2] = m4[ 2];  dst[ 3] = 0;\n  dst[4] = m4[4];  dst[5] = m4[5];  dst[ 6] = m4[ 6];  dst[ 7] = 0;\n  dst[8] = m4[8];  dst[9] = m4[9];  dst[10] = m4[10];  dst[11] = 0;\n  return dst;\n}\n\n/**\n * Creates a Mat3 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from q\n */\nexport function fromQuat(q: Quat, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  dst[ 0] = 1 - yy - zz;  dst[ 1] = yx + wz;      dst[ 2] = zx - wy;      dst[ 3] = 0;\n  dst[ 4] = yx - wz;      dst[ 5] = 1 - xx - zz;  dst[ 6] = zy + wx;      dst[ 7] = 0;\n  dst[ 8] = zx + wy;      dst[ 9] = zy - wx;      dst[10] = 1 - xx - yy;  dst[11] = 0;\n\n  return dst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nexport function negate(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = -m[ 0];  dst[ 1] = -m[ 1];  dst[ 2] = -m[ 2];\n  dst[ 4] = -m[ 4];  dst[ 5] = -m[ 5];  dst[ 6] = -m[ 6];\n  dst[ 8] = -m[ 8];  dst[ 9] = -m[ 9];  dst[10] = -m[10];\n\n  return dst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat3.clone})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport function copy(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = m[ 0];  dst[ 1] = m[ 1];  dst[ 2] = m[ 2];\n  dst[ 4] = m[ 4];  dst[ 5] = m[ 5];  dst[ 6] = m[ 6];\n  dst[ 8] = m[ 8];  dst[ 9] = m[ 9];  dst[10] = m[10];\n\n  return dst;\n}\n\n/**\n * Copies a matrix (same as {@link mat3.copy})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport const clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nexport function equalsApproximately(a: Mat3, b: Mat3): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nexport function equals(a: Mat3, b: Mat3): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10];\n}\n\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nexport function identity(dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = 1;  dst[ 1] = 0;  dst[ 2] = 0;\n  dst[ 4] = 0;  dst[ 5] = 1;  dst[ 6] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nexport function transpose(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n  if (dst === m) {\n    let t: number;\n\n    // 0 1 2\n    // 4 5 6\n    // 8 9 10\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  dst[ 0] = m00;  dst[ 1] = m10;  dst[ 2] = m20;\n  dst[ 4] = m01;  dst[ 5] = m11;  dst[ 6] = m21;\n  dst[ 8] = m02;  dst[ 9] = m12;  dst[10] = m22;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport function inverse(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  const b01 =  m22 * m11 - m12 * m21;\n  const b11 = -m22 * m10 + m12 * m20;\n  const b21 =  m21 * m10 - m11 * m20;\n\n  const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n\n  dst[ 0] = b01 * invDet;\n  dst[ 1] = (-m22 * m01 + m02 * m21) * invDet;\n  dst[ 2] = ( m12 * m01 - m02 * m11) * invDet;\n  dst[ 4] = b11 * invDet;\n  dst[ 5] = ( m22 * m00 - m02 * m20) * invDet;\n  dst[ 6] = (-m12 * m00 + m02 * m10) * invDet;\n  dst[ 8] = b21 * invDet;\n  dst[ 9] = (-m21 * m00 + m01 * m20) * invDet;\n  dst[10] = ( m11 * m00 - m01 * m10) * invDet;\n\n  return dst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nexport function determinant(m: Mat3): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  return m00 * (m11 * m22 - m21 * m12) -\n         m10 * (m01 * m22 - m21 * m02) +\n         m20 * (m01 * m12 - m11 * m02);\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport const invert = inverse;\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport function multiply(a: Mat3, b: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\n  return dst;\n}\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nexport function setTranslation(a: Mat3, v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n  }\n  dst[ 8] = v[0];\n  dst[ 9] = v[1];\n  dst[10] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nexport function getTranslation(m: Mat3, dst?: Vec2): Vec2 {\n  dst = dst || vec2.create();\n  dst[0] = m[8];\n  dst[1] = m[9];\n  return dst;\n}\n\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nexport function getAxis(m: Mat3, axis: number, dst?: Vec2): Vec2 {\n  dst = dst || vec2.create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  return dst;\n}\n\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nexport function setAxis(m: Mat3, v: Vec2, axis: number, dst?: Mat3): Mat3 {\n  if (dst !== m) {\n    dst = copy(m, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  return dst;\n}\n\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nexport function getScaling(m: Mat3, dst?: Vec2): Vec2 {\n  dst = dst || vec2.create();\n\n  const xx = m[0];\n  const xy = m[1];\n  const yx = m[4];\n  const yy = m[5];\n\n  dst[0] = Math.sqrt(xx * xx + xy * xy);\n  dst[1] = Math.sqrt(yx * yx + yy * yy);\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nexport function translation(v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = 1;     dst[ 1] = 0;     dst[ 2] = 0;\n  dst[ 4] = 0;     dst[ 5] = 1;     dst[ 6] = 0;\n  dst[ 8] = v[0];  dst[ 9] = v[1];  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nexport function translate(m: Mat3, v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n  }\n\n  dst[ 8] = m00 * v0 + m10 * v1 + m20;\n  dst[ 9] = m01 * v0 + m11 * v1 + m21;\n  dst[10] = m02 * v0 + m12 * v1 + m22;\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotation(angleInRadians: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] =  c;  dst[ 1] = s;  dst[ 2] = 0;\n  dst[ 4] = -s;  dst[ 5] = c;  dst[ 6] = 0;\n  dst[ 8] =  0;  dst[ 9] = 0;  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotate(m: Mat3, angleInRadians: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function scaling(v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = v[0];  dst[ 1] = 0;     dst[ 2] = 0;\n  dst[ 4] = 0;     dst[ 5] = v[1];  dst[ 6] = 0;\n  dst[ 8] = 0;     dst[ 9] = 0;     dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function scale(m: Mat3, v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales uniformly in each dimension\n * @param s - Amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function uniformScaling(s: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = s;  dst[ 1] = 0;  dst[ 2] = 0;\n  dst[ 4] = 0;  dst[ 5] = s;  dst[ 6] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given.\n * @param m - The matrix to be modified.\n * @param s - Amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function uniformScale(m: Mat3, s: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = s * m[0 * 4 + 0];\n  dst[ 1] = s * m[0 * 4 + 1];\n  dst[ 2] = s * m[0 * 4 + 2];\n\n  dst[ 4] = s * m[1 * 4 + 0];\n  dst[ 5] = s * m[1 * 4 + 1];\n  dst[ 6] = s * m[1 * 4 + 2];\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n  }\n\n  return dst;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec3, create, setDefaultType, VecType } from './vec3';\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport { Quat } from './quat';\n\nexport default Vec3;\nexport { create, setDefaultType };\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Vec3\n * Also see {@link vec3.create} and {@link vec3.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, z: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  dst[0] = x;\n  dst[1] = y;\n  dst[2] = z;\n\n  return dst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nexport function ceil(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.ceil(v[0]);\n  dst[1] = Math.ceil(v[1]);\n  dst[2] = Math.ceil(v[2]);\n\n  return dst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nexport function floor(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.floor(v[0]);\n  dst[1] = Math.floor(v[1]);\n  dst[2] = Math.floor(v[2]);\n\n  return dst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nexport function round(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.round(v[0]);\n  dst[1] = Math.round(v[1]);\n  dst[2] = Math.round(v[2]);\n\n  return dst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nexport function clamp(v: Vec3, min = 0, max = 1, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(max, Math.max(min, v[0]));\n  dst[1] = Math.min(max, Math.max(min, v[1]));\n  dst[2] = Math.min(max, Math.max(min, v[2]));\n\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nexport function add(a: Vec3, b: Vec3, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nexport function addScaled(a: Vec3, b: Vec3, scale: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0] * scale;\n  dst[1] = a[1] + b[1] * scale;\n  dst[2] = a[2] + b[2] * scale;\n\n  return dst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nexport function angle(a: Vec3, b: Vec3): number {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport function subtract(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nexport function equalsApproximately(a: Vec3, b: Vec3): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nexport function equals(a: Vec3, b: Vec3): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Vec3, b: Vec3, t: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nexport function lerpV(a: Vec3, b: Vec3, t: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nexport function max(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nexport function min(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function mulScalar(v: Vec3, k: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function divScalar(v: Vec3, k: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport function inverse(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = 1 / v[0];\n  dst[1] = 1 / v[1];\n  dst[2] = 1 / v[2];\n\n  return dst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport const invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nexport function cross(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nexport function dot(a: Vec3, b: Vec3): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nexport function length(v: Vec3): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport function lengthSq(v: Vec3): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return v0 * v0 + v1 * v1 + v2 * v2;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport function distance(a: Vec3, b: Vec3): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport const dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport function distanceSq(a: Vec3, b: Vec3): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport const distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nexport function normalize(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n    dst[2] = v2 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nexport function negate(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector. (same as {@link vec3.clone})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport function copy(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Clones a vector. (same as {@link vec3.copy})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport const clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport function multiply(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport function divide(a: Vec3, b: Vec3, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport const div = divide;\n\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nexport function random(scale = 1, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const angle = Math.random() * 2 * Math.PI;\n  const z = Math.random() * 2 - 1;\n  const zScale = Math.sqrt(1 - z * z) * scale;\n  dst[0] = Math.cos(angle) * zScale;\n  dst[1] = Math.sin(angle) * zScale;\n  dst[2] = z * scale;\n\n  return dst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nexport function zero(dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = 0;\n\n  return dst;\n}\n\n\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat4(v: Vec3, m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n\n  dst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  dst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  dst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n  return dst;\n}\n\n/**\n * Transform vec4 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional Vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nexport function transformMat4Upper3x3(v: Vec3, m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Transforms vec3 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat3(v: Vec3, m: Mat3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  dst[0] = x * m[0] + y * m[4] + z * m[8];\n  dst[1] = x * m[1] + y * m[5] + z * m[9];\n  dst[2] = x * m[2] + y * m[6] + z * m[10];\n\n  return dst;\n}\n\n/**\n * Transforms vec3 by Quaternion\n * @param v - the vector to transform\n * @param q - the quaternion to transform by\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed\n */\nexport function transformQuat(v: Vec3, q: Quat, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const w2 = q[3] * 2;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  const uvX = qy * z - qz * y;\n  const uvY = qz * x - qx * z;\n  const uvZ = qx * y - qy * x;\n\n  dst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n  dst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n  dst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nexport function getTranslation(m: Mat3, dst?: Vec3) {\n    dst = dst || new VecType(3);\n    dst[0] = m[12];\n    dst[1] = m[13];\n    dst[2] = m[14];\n    return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nexport function getAxis(m: Mat4, axis: number, dst?: Vec3) {\n    dst = dst || new VecType(3);\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    dst[2] = m[off + 2];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nexport function getScaling(m: Mat4, dst: Vec3) {\n    dst = dst || new VecType(3);\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return dst;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nexport function rotateX(a: Vec3, b: Vec3, rad: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  const p = [];\n  const r = [];\n\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  dst[0] = r[0] + b[0];\n  dst[1] = r[1] + b[1];\n  dst[2] = r[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nexport function rotateY(a: Vec3, b: Vec3, rad: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  dst[0] = r[0] + b[0];\n  dst[1] = r[1] + b[1];\n  dst[2] = r[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns {vec3} out\n */\nexport function rotateZ(a: Vec3, b: Vec3, rad: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  dst[0] = r[0] + b[0];\n  dst[1] = r[1] + b[1];\n  dst[2] = r[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Treat a 3D vector as a direction and set it's length\n *\n * @param a The vec3 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nexport function setLength(a: Vec3, len: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  normalize(a, dst);\n  return mulScalar(dst, len, dst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec3 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nexport function truncate(a: Vec3, maxLen: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, dst);\n  }\n\n  return copy(a, dst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nexport function midpoint(a: Vec3, b: Vec3, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  return lerp(a, b, 0.5, dst);\n}\n","\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport { Quat } from './quat';\nimport Vec3, * as vec3 from './vec3-impl';\nimport * as utils from './utils';\n\nexport default Mat4;\n\nexport type Mat4LikeCtor = new (n: number) => Mat4;\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType: Mat4LikeCtor = Float32Array;\n\n/**\n * Sets the type this library creates for a Mat4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Mat4\n */\nexport function setDefaultType(ctor: new (n: number) => Mat4) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat4Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat4.create` is usually used\n * to create a Mat4 to be filled out as in\n *\n * ```\n * const m = mat4.create();\n * mat4.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nexport function create(\n    v0?: number, v1?: number, v2?: number, v3?: number,\n    v4?: number, v5?: number, v6?: number, v7?: number,\n    v8?: number, v9?: number, v10?: number, v11?: number,\n    v12?: number, v13?: number, v14?: number, v15?: number): Mat4 {\n  const dst = new MatType(16);\n  if (v0 !== undefined) {\n    dst[0] = v0;\n    if (v1 !== undefined) {\n      dst[1] = v1;\n      if (v2 !== undefined) {\n        dst[2] = v2;\n        if (v3 !== undefined) {\n          dst[3] = v3;\n          if (v4 !== undefined) {\n            dst[4] = v4;\n            if (v5 !== undefined) {\n              dst[5] = v5;\n              if (v6 !== undefined) {\n                dst[6] = v6;\n                if (v7 !== undefined) {\n                  dst[7] = v7;\n                  if (v8 !== undefined) {\n                    dst[8] = v8;\n                    if (v9 !== undefined) {\n                      dst[9] = v9;\n                      if (v10 !== undefined) {\n                        dst[10] = v10;\n                        if (v11 !== undefined) {\n                          dst[11] = v11;\n                          if (v12 !== undefined) {\n                            dst[12] = v12;\n                            if (v13 !== undefined) {\n                              dst[13] = v13;\n                              if (v14 !== undefined) {\n                                dst[14] = v14;\n                                if (v15 !== undefined) {\n                                  dst[15] = v15;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return dst;\n}\n\n/**\n * Sets the values of a Mat4\n * Also see {@link mat4.create} and {@link mat4.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 created from values.\n */\nexport function set(\n    v0: number, v1: number, v2: number, v3: number,\n    v4: number, v5: number, v6: number, v7: number,\n    v8: number, v9: number, v10: number, v11: number,\n    v12: number, v13: number, v14: number, v15: number,\n    dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v0;   dst[ 1] = v1;   dst[ 2] = v2;   dst[ 3] = v3;\n  dst[ 4] = v4;   dst[ 5] = v5;   dst[ 6] = v6;   dst[ 7] = v7;\n  dst[ 8] = v8;   dst[ 9] = v9;   dst[10] = v10;  dst[11] = v11;\n  dst[12] = v12;  dst[13] = v13;  dst[14] = v14;  dst[15] = v15;\n\n  return dst;\n}\n\n/**\n * Creates a Mat4 from a Mat3\n * @param m3 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from m3\n */\nexport function fromMat3(m3: Mat3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m3[0];  dst[ 1] = m3[1];  dst[ 2] = m3[ 2];  dst[ 3] = 0;\n  dst[ 4] = m3[4];  dst[ 5] = m3[5];  dst[ 6] = m3[ 6];  dst[ 7] = 0;\n  dst[ 8] = m3[8];  dst[ 9] = m3[9];  dst[10] = m3[10];  dst[11] = 0;\n  dst[12] = 0;      dst[13] = 0;      dst[14] = 0;       dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a Mat4 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from q\n */\nexport function fromQuat(q: Quat, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  dst[ 0] = 1 - yy - zz;  dst[ 1] = yx + wz;      dst[ 2] = zx - wy;      dst[ 3] = 0;\n  dst[ 4] = yx - wz;      dst[ 5] = 1 - xx - zz;  dst[ 6] = zy + wx;      dst[ 7] = 0;\n  dst[ 8] = zx + wy;      dst[ 9] = zy - wx;      dst[10] = 1 - xx - yy;  dst[11] = 0;\n  dst[12] = 0;            dst[13] = 0;            dst[14] = 0;            dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nexport function negate(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];  dst[ 1] = -m[ 1];  dst[ 2] = -m[ 2];  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];  dst[ 5] = -m[ 5];  dst[ 6] = -m[ 6];  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];  dst[ 9] = -m[ 9];  dst[10] = -m[10];  dst[11] = -m[11];\n  dst[12] = -m[12];  dst[13] = -m[13];  dst[14] = -m[14];  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat4.clone})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport function copy(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];  dst[ 1] = m[ 1];  dst[ 2] = m[ 2];  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];  dst[ 5] = m[ 5];  dst[ 6] = m[ 6];  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];  dst[ 9] = m[ 9];  dst[10] = m[10];  dst[11] = m[11];\n  dst[12] = m[12];  dst[13] = m[13];  dst[14] = m[14];  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix (same as {@link mat4.copy})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport const clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nexport function equalsApproximately(a: Mat4, b: Mat4): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 3] - b[ 3]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 7] - b[ 7]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON &&\n         Math.abs(a[11] - b[11]) < utils.EPSILON &&\n         Math.abs(a[12] - b[12]) < utils.EPSILON &&\n         Math.abs(a[13] - b[13]) < utils.EPSILON &&\n         Math.abs(a[14] - b[14]) < utils.EPSILON &&\n         Math.abs(a[15] - b[15]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nexport function equals(a: Mat4, b: Mat4): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 3] === b[ 3] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 7] === b[ 7] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10] &&\n         a[11] === b[11] &&\n         a[12] === b[12] &&\n         a[13] === b[13] &&\n         a[14] === b[14] &&\n         a[15] === b[15];\n}\n\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nexport function identity(dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;  dst[ 1] = 0;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] = 1;  dst[ 6] = 0;  dst[ 7] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = 1;  dst[11] = 0;\n  dst[12] = 0;  dst[13] = 0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nexport function transpose(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;  dst[ 1] = m10;  dst[ 2] = m20;  dst[ 3] = m30;\n  dst[ 4] = m01;  dst[ 5] = m11;  dst[ 6] = m21;  dst[ 7] = m31;\n  dst[ 8] = m02;  dst[ 9] = m12;  dst[10] = m22;  dst[11] = m32;\n  dst[12] = m03;  dst[13] = m13;  dst[14] = m23;  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport function inverse(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n  const tmp12 = m20 * m31;\n  const tmp13 = m30 * m21;\n  const tmp14 = m10 * m31;\n  const tmp15 = m30 * m11;\n  const tmp16 = m10 * m21;\n  const tmp17 = m20 * m11;\n  const tmp18 = m00 * m31;\n  const tmp19 = m30 * m01;\n  const tmp20 = m00 * m21;\n  const tmp21 = m20 * m01;\n  const tmp22 = m00 * m11;\n  const tmp23 = m10 * m01;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n      (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n      (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n      (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n      (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n          (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n  dst[ 5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n          (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n  dst[ 6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n          (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n  dst[ 7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n          (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n  dst[ 8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n          (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n  dst[ 9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n          (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n  dst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n          (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n  dst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n          (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n  dst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n          (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n  dst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n          (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n  dst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n          (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n  dst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n          (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n\n  return dst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nexport function determinant(m: Mat4): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n             (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n             (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n             (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n             (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport const invert = inverse;\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport function multiply(a: Mat4, b: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nexport function setTranslation(a: Mat4, v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nexport function getTranslation(m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || vec3.create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nexport function getAxis(m: Mat4, axis: number, dst?: Vec3): Vec3 {\n  dst = dst || vec3.create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nexport function setAxis(m: Mat4, v: Vec3, axis: number, dst: Mat4): Mat4 {\n  if (dst !== m) {\n    dst = copy(m, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nexport function getScaling(m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || vec3.create();\n\n  const xx = m[0];\n  const xy = m[1];\n  const xz = m[2];\n  const yx = m[4];\n  const yy = m[5];\n  const yz = m[6];\n  const zx = m[8];\n  const zy = m[9];\n  const zz = m[10];\n\n  dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n  dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n  dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n *\n * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n * otherwise.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nexport function perspective(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[15] = 0;\n\n  if (Number.isFinite(zFar)) {\n    const rangeInv = 1 / (zNear - zFar);\n    dst[10] = zFar * rangeInv;\n    dst[14] = zFar * zNear * rangeInv;\n  } else {\n    dst[10] = -1;\n    dst[14] = -zNear;\n  }\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane. (default = Infinity)\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */export function perspectiveReverseZ(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar = Infinity, dst?: Mat4) {\n  dst = dst || new MatType(16);\n\n  const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n\n  dst[ 0] = f / aspect;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n\n  dst[ 4] = 0;\n  dst[ 5] = f;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[15] = 0;\n\n  if (zFar === Infinity) {\n    dst[10] = 0;\n    dst[14] = zNear;\n  } else {\n    const rangeInv = 1 / (zFar - zNear);\n    dst[10] = zNear * rangeInv;\n    dst[14] = zFar * zNear * rangeInv;\n  }\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The orthographic projection matrix.\n */\nexport function ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 1 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = near / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nexport function frustum(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nexport function frustumReverseZ(left: number, right: number, bottom: number, top: number, near: number, far = Infinity, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[15] = 0;\n\n  if (far === Infinity) {\n    dst[10] = 0;\n    dst[14] = near;\n  } else {\n    const rangeInv = 1 / (far - near);\n    dst[10] = near * rangeInv;\n    dst[14] = far * near * rangeInv;\n  }\n\n  return dst;\n}\n\nlet xAxis: Vec3;\nlet yAxis: Vec3;\nlet zAxis: Vec3;\n\n/**\n * Computes a 4-by-4 aim transformation.\n *\n * This is a matrix which positions an object aiming down positive Z.\n * toward the target.\n *\n * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n *\n * @param position - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nexport function aim(position: Vec3, target: Vec3, up: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || vec3.create();\n  yAxis = yAxis || vec3.create();\n  zAxis = zAxis || vec3.create();\n\n  vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];     dst[ 1] = xAxis[1];     dst[ 2] = xAxis[2];     dst[ 3] = 0;\n  dst[ 4] = yAxis[0];     dst[ 5] = yAxis[1];     dst[ 6] = yAxis[2];     dst[ 7] = 0;\n  dst[ 8] = zAxis[0];     dst[ 9] = zAxis[1];     dst[10] = zAxis[2];     dst[11] = 0;\n  dst[12] = position[0];  dst[13] = position[1];  dst[14] = position[2];  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 camera aim transformation.\n *\n * This is a matrix which positions an object aiming down negative Z.\n * toward the target.\n *\n * Note: this is the inverse of `lookAt`\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nexport function cameraAim(eye: Vec3, target: Vec3, up: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || vec3.create();\n  yAxis = yAxis || vec3.create();\n  zAxis = zAxis || vec3.create();\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];     dst[ 1] = xAxis[1];     dst[ 2] = xAxis[2];     dst[ 3] = 0;\n  dst[ 4] = yAxis[0];     dst[ 5] = yAxis[1];     dst[ 6] = yAxis[2];     dst[ 7] = 0;\n  dst[ 8] = zAxis[0];     dst[ 9] = zAxis[1];     dst[10] = zAxis[2];     dst[11] = 0;\n  dst[12] = eye[0];  dst[13] = eye[1];  dst[14] = eye[2];  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 view transformation.\n *\n * This is a view matrix which transforms all other objects\n * to be in the space of the view defined by the parameters.\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nexport function lookAt(eye: Vec3, target: Vec3, up: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || vec3.create();\n  yAxis = yAxis || vec3.create();\n  zAxis = zAxis || vec3.create();\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];  dst[ 1] = yAxis[0];  dst[ 2] = zAxis[0];  dst[ 3] = 0;\n  dst[ 4] = xAxis[1];  dst[ 5] = yAxis[1];  dst[ 6] = zAxis[1];  dst[ 7] = 0;\n  dst[ 8] = xAxis[2];  dst[ 9] = yAxis[2];  dst[10] = zAxis[2];  dst[11] = 0;\n\n  dst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n  dst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n  dst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nexport function translation(v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;     dst[ 1] = 0;     dst[ 2] = 0;     dst[ 3] = 0;\n  dst[ 4] = 0;     dst[ 5] = 1;     dst[ 6] = 0;     dst[ 7] = 0;\n  dst[ 8] = 0;     dst[ 9] = 0;     dst[10] = 1;     dst[11] = 0;\n  dst[12] = v[0];  dst[13] = v[1];  dst[14] = v[2];  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nexport function translate(m: Mat4, v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotationX(angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;  dst[ 1] =  0;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] =  c;  dst[ 6] = s;  dst[ 7] = 0;\n  dst[ 8] = 0;  dst[ 9] = -s;  dst[10] = c;  dst[11] = 0;\n  dst[12] = 0;  dst[13] =  0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotateX(m: Mat4, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotationY(angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;  dst[ 1] = 0;  dst[ 2] = -s;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] = 1;  dst[ 6] =  0;  dst[ 7] = 0;\n  dst[ 8] = s;  dst[ 9] = 0;  dst[10] =  c;  dst[11] = 0;\n  dst[12] = 0;  dst[13] = 0;  dst[14] =  0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotateY(m: Mat4, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotationZ(angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] =  c;  dst[ 1] = s;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = -s;  dst[ 5] = c;  dst[ 6] = 0;  dst[ 7] = 0;\n  dst[ 8] =  0;  dst[ 9] = 0;  dst[10] = 1;  dst[11] = 0;\n  dst[12] =  0;  dst[13] = 0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotateZ(m: Mat4, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nexport function axisRotation(axis: Vec3, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nexport const rotation = axisRotation;\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function axisRotate(m: Mat4, axis: Vec3, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport const rotate = axisRotate;\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function scaling(v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];  dst[ 1] = 0;     dst[ 2] = 0;     dst[ 3] = 0;\n  dst[ 4] = 0;     dst[ 5] = v[1];  dst[ 6] = 0;     dst[ 7] = 0;\n  dst[ 8] = 0;     dst[ 9] = 0;     dst[10] = v[2];  dst[11] = 0;\n  dst[12] = 0;     dst[13] = 0;     dst[14] = 0;     dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function scale(m: Mat4, v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n * @param s - the amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function uniformScaling(s: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = s;  dst[ 1] = 0;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] = s;  dst[ 6] = 0;  dst[ 7] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = s;  dst[11] = 0;\n  dst[12] = 0;  dst[13] = 0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n * @param m - The matrix to be modified.\n * @param s - The amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function uniformScale(m: Mat4, s: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = s * m[0 * 4 + 0];\n  dst[ 1] = s * m[0 * 4 + 1];\n  dst[ 2] = s * m[0 * 4 + 2];\n  dst[ 3] = s * m[0 * 4 + 3];\n  dst[ 4] = s * m[1 * 4 + 0];\n  dst[ 5] = s * m[1 * 4 + 1];\n  dst[ 6] = s * m[1 * 4 + 2];\n  dst[ 7] = s * m[1 * 4 + 3];\n  dst[ 8] = s * m[2 * 4 + 0];\n  dst[ 9] = s * m[2 * 4 + 1];\n  dst[10] = s * m[2 * 4 + 2];\n  dst[11] = s * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 4 values, Float32Array with 4 values, or a Float64Array with 4 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link quat.setDefaultType}.\n */\nexport type Quat = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let QuatType: new (n: number) => Quat = Float32Array;\n\n/**\n * Sets the type this library creates for a Quat4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Quat4\n */\nexport function setDefaultType(ctor: new (n: number) => Quat) {\n  const oldType = QuatType;\n  QuatType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a quat4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nexport function create(x?: number, y?: number, z?: number, w?: number): Quat {\n  const dst = new QuatType(4);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n      if (z !== undefined) {\n        dst[2] = z;\n        if (w !== undefined) {\n          dst[3] = w;\n        }\n      }\n    }\n  }\n  return dst;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Quat, create, setDefaultType, QuatType } from './quat';\nimport { Mat3 } from './mat3.js';\nimport { Mat4 } from './mat4.js';\nimport { Vec3 } from './vec3.js';\nimport * as vec3 from './vec3-impl.js';\n\nexport type RotationOrder =  'xyz' |  'xzy' |  'yxz' |  'yzx' |  'zxy' |  'zyx';\n\nexport default Quat;\nexport { create, setDefaultType };\n\n/**\n * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Quat\n * Also see {@link quat.create} and {@link quat.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, z: number, w: number, dst?: Quat) {\n  dst = dst || new QuatType(4);\n\n  dst[0] = x;\n  dst[1] = y;\n  dst[2] = z;\n  dst[3] = w;\n\n  return dst;\n}\n\n/**\n * Sets a quaternion from the given angle and  axis,\n * then returns it.\n *\n * @param axis - the axis to rotate around\n * @param angleInRadians - the angle\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The quaternion that represents the given axis and angle\n **/\nexport function fromAxisAngle(axis: Vec3, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n  const s = Math.sin(halfAngle);\n\n  dst[0] = s * axis[0];\n  dst[1] = s * axis[1];\n  dst[2] = s * axis[2];\n  dst[3] = Math.cos(halfAngle);\n\n  return dst;\n}\n\n/**\n * Gets the rotation axis and angle\n * @param q - quaternion to compute from\n * @param dst - Vec3 to hold result. If not passed in a new one is created.\n * @return angle and axis\n */\nexport function toAxisAngle(q: Quat, dst?: Vec3): { angle: number, axis: Vec3 } {\n  dst = dst || vec3.create(4);\n\n  const angle = Math.acos(q[3]) * 2;\n  const s = Math.sin(angle * 0.5);\n  if (s > utils.EPSILON) {\n    dst[0] = q[0] / s;\n    dst[1] = q[1] / s;\n    dst[2] = q[2] / s;\n  } else {\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return { angle, axis: dst };\n}\n\n/**\n * Returns the angle in degrees between two rotations a and b.\n * @param a - quaternion a\n * @param b - quaternion b\n * @return angle in radians between the two quaternions\n */\nexport function angle(a: Quat, b: Quat) {\n  const d = dot(a, b);\n  return Math.acos(2 * d * d - 1);\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function multiply(a: Quat, b: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  dst[0] = ax * bw + aw * bx + ay * bz - az * by;\n  dst[1] = ay * bw + aw * by + az * bx - ax * bz;\n  dst[2] = az * bw + aw * bz + ax * by - ay * bx;\n  dst[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return dst;\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport const mul = multiply;\n\n/**\n * Rotates the given quaternion around the X axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function rotateX(q: Quat, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bx = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  dst[0] = qx * bw + qw * bx;\n  dst[1] = qy * bw + qz * bx;\n  dst[2] = qz * bw - qy * bx;\n  dst[3] = qw * bw - qx * bx;\n\n  return dst;\n}\n\n/**\n * Rotates the given quaternion around the Y axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function rotateY(q: Quat, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const by = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  dst[0] = qx * bw - qz * by;\n  dst[1] = qy * bw + qw * by;\n  dst[2] = qz * bw + qx * by;\n  dst[3] = qw * bw - qy * by;\n\n  return dst;\n}\n\n/**\n * Rotates the given quaternion around the Z axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function rotateZ(q: Quat, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bz = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  dst[0] = qx * bw + qy * bz;\n  dst[1] = qy * bw - qx * bz;\n  dst[2] = qz * bw + qw * bz;\n  dst[3] = qw * bw - qz * bz;\n\n  return dst;\n}\n\n/**\n * Spherically linear interpolate between two quaternions\n *\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function slerp(a: Quat, b: Quat, t: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n\n  if (cosOmega < 0) {\n    cosOmega = -cosOmega;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n\n  let scale0;\n  let scale1;\n\n  if (1.0 - cosOmega > utils.EPSILON) {\n    const omega = Math.acos(cosOmega);\n    const sinOmega = Math.sin(omega);\n    scale0 = Math.sin((1 - t) * omega) / sinOmega;\n    scale1 = Math.sin(t * omega) / sinOmega;\n  } else {\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n\n  dst[0] = scale0 * ax + scale1 * bx;\n  dst[1] = scale0 * ay + scale1 * by;\n  dst[2] = scale0 * az + scale1 * bz;\n  dst[3] = scale0 * aw + scale1 * bw;\n\n  return dst;\n}\n\n/**\n * Compute the inverse of a quaternion\n *\n * @param q - quaternion to compute the inverse of\n * @returns A quaternion that is the result of a * b\n */\nexport function inverse(q: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const a0 = q[0];\n  const a1 = q[1];\n  const a2 = q[2];\n  const a3 = q[3];\n\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1 / dot : 0;\n\n  dst[0] = -a0 * invDot;\n  dst[1] = -a1 * invDot;\n  dst[2] = -a2 * invDot;\n  dst[3] =  a3 * invDot;\n\n  return dst;\n}\n\n/**\n * Compute the conjugate of a quaternion\n * For quaternions with a magnitude of 1 (a unit quaternion)\n * this returns the same as the inverse but is faster to calculate.\n *\n * @param q - quaternion to compute the conjugate of.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The conjugate of q\n */\nexport function conjugate(q: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = -q[0];\n  dst[1] = -q[1];\n  dst[2] = -q[2];\n  dst[3] =  q[3];\n\n  return dst;\n}\n\n/**\n * Creates a quaternion from the given rotation matrix.\n *\n * The created quaternion is not normalized.\n *\n * @param m - rotation matrix\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nexport function fromMat(m: Mat3 | Mat4, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  /*\n  0 1 2\n  3 4 5\n  6 7 8\n\n  0 1 2\n  4 5 6\n  8 9 10\n   */\n\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const trace = m[0] + m[5] + m[10];\n\n  if (trace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    const root = Math.sqrt(trace + 1); // 2w\n    dst[3] = 0.5 * root;\n    const invRoot = 0.5 / root; // 1/(4w)\n\n    dst[0] = (m[6] - m[9]) * invRoot;\n    dst[1] = (m[8] - m[2]) * invRoot;\n    dst[2] = (m[1] - m[4]) * invRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n\n    if (m[5] > m[0]) {\n      i = 1;\n    }\n    if (m[10] > m[i * 4 + i]) {\n      i = 2;\n    }\n\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n    dst[i] = 0.5 * root;\n\n    const invRoot = 0.5 / root;\n\n    dst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n    dst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n    dst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n  }\n\n  return dst;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param xAngleInRadians - angle to rotate around X axis in radians.\n * @param yAngleInRadians - angle to rotate around Y axis in radians.\n * @param zAngleInRadians - angle to rotate around Z axis in radians.\n * @param order - order to apply euler angles\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n */\nexport function fromEuler(\n    xAngleInRadians: number,\n    yAngleInRadians: number,\n    zAngleInRadians: number,\n    order: RotationOrder,\n    dst?: Quat) {\n  dst = dst || new QuatType(4);\n\n  const xHalfAngle = xAngleInRadians * 0.5;\n  const yHalfAngle = yAngleInRadians * 0.5;\n  const zHalfAngle = zAngleInRadians * 0.5;\n\n  const sx = Math.sin(xHalfAngle);\n  const cx = Math.cos(xHalfAngle);\n  const sy = Math.sin(yHalfAngle);\n  const cy = Math.cos(yHalfAngle);\n  const sz = Math.sin(zHalfAngle);\n  const cz = Math.cos(zHalfAngle);\n\n  switch (order) {\n    case 'xyz':\n      dst[0] = sx * cy * cz + cx * sy * sz;\n      dst[1] = cx * sy * cz - sx * cy * sz;\n      dst[2] = cx * cy * sz + sx * sy * cz;\n      dst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'xzy':\n      dst[0] = sx * cy * cz - cx * sy * sz;\n      dst[1] = cx * sy * cz - sx * cy * sz;\n      dst[2] = cx * cy * sz + sx * sy * cz;\n      dst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yxz':\n      dst[0] = sx * cy * cz + cx * sy * sz;\n      dst[1] = cx * sy * cz - sx * cy * sz;\n      dst[2] = cx * cy * sz - sx * sy * cz;\n      dst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yzx':\n      dst[0] = sx * cy * cz + cx * sy * sz;\n      dst[1] = cx * sy * cz + sx * cy * sz;\n      dst[2] = cx * cy * sz - sx * sy * cz;\n      dst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zxy':\n      dst[0] = sx * cy * cz - cx * sy * sz;\n      dst[1] = cx * sy * cz + sx * cy * sz;\n      dst[2] = cx * cy * sz + sx * sy * cz;\n      dst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zyx':\n      dst[0] = sx * cy * cz - cx * sy * sz;\n      dst[1] = cx * sy * cz + sx * cy * sz;\n      dst[2] = cx * cy * sz - sx * sy * cz;\n      dst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    default:\n      throw new Error(`Unknown rotation order: ${order}`);\n  }\n\n  return dst;\n}\n\n/**\n * Copies a quaternion. (same as {@link quat.clone})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is a copy of q\n */\nexport function copy(q: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = q[0];\n  dst[1] = q[1];\n  dst[2] = q[2];\n  dst[3] = q[3];\n\n  return dst;\n}\n\n/**\n * Clones a quaternion. (same as {@link quat.copy})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A copy of q.\n */\nexport const clone = copy;\n\n/**\n * Adds two quaternions; assumes a and b have the same dimension.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the sum of a and b.\n */\nexport function add(a: Quat, b: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  dst[3] = a[3] + b[3];\n\n  return dst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nexport function subtract(a: Quat, b: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  dst[3] = a[3] - b[3];\n\n  return dst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Multiplies a quaternion by a scalar.\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nexport function mulScalar(v: Quat, k: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  dst[3] = v[3] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a quaternion by a scalar. (same as mulScalar)\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nexport function divScalar(v: Quat, k: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  dst[3] = v[3] / k;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two quaternions\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns dot product\n */\nexport function dot(a: Quat, b: Quat): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Performs linear interpolation on two quaternions.\n * Given quaternions a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param t - Interpolation coefficient.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Quat, b: Quat, t: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  dst[3] = a[3] + t * (b[3] - a[3]);\n\n  return dst;\n}\n\n/**\n * Computes the length of quaternion\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nexport function length(v: Quat): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of quaternion (same as length)\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of quaternion\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nexport function lengthSq(v: Quat): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of quaternion (same as lengthSq)\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Divides a quaternion by its Euclidean length and returns the quotient.\n * @param v - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The normalized quaternion.\n */\nexport function normalize(v: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n    dst[2] = v2 / len;\n    dst[3] = v3 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Check if 2 quaternions are approximately equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are approximately equal\n */\nexport function equalsApproximately(a: Quat, b: Quat): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 quaternions are exactly equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are exactly equal\n */\nexport function equals(a: Quat, b: Quat): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Creates an identity quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns an identity quaternion\n */\nexport function identity(dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 1;\n\n  return dst;\n}\n\nlet tempVec3: Vec3;\nlet xUnitVec3: Vec3;\nlet yUnitVec3: Vec3;\n\n/**\n * Computes a quaternion to represent the shortest rotation from one vector to another.\n *\n * @param aUnit - the start vector\n * @param bUnit - the end vector\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nexport function rotationTo(aUnit: Vec3, bUnit: Vec3, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  tempVec3 = tempVec3 || vec3.create();\n  xUnitVec3 = xUnitVec3 || vec3.create(1, 0, 0);\n  yUnitVec3 = yUnitVec3 || vec3.create(0, 1, 0);\n\n  const dot = vec3.dot(aUnit, bUnit);\n  if (dot < -0.999999) {\n    vec3.cross(xUnitVec3, aUnit, tempVec3);\n    if (vec3.len(tempVec3) < 0.000001) {\n      vec3.cross(yUnitVec3, aUnit, tempVec3);\n    }\n\n    vec3.normalize(tempVec3, tempVec3);\n    fromAxisAngle(tempVec3, Math.PI, dst);\n\n    return dst;\n  } else if (dot > 0.999999) {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 1;\n\n    return dst;\n  } else {\n    vec3.cross(aUnit, bUnit, tempVec3);\n\n    dst[0] = tempVec3[0];\n    dst[1] = tempVec3[1];\n    dst[2] = tempVec3[2];\n    dst[3] = 1 + dot;\n\n    return normalize(dst, dst);\n  }\n}\n\nlet tempQuat1: Quat;\nlet tempQuat2: Quat;\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param c - the third quaternion\n * @param d - the fourth quaternion\n * @param t - Interpolation coefficient 0 to 1\n * @returns result\n */\nexport function sqlerp(\n    a: Quat,\n    b: Quat,\n    c: Quat,\n    d: Quat,\n    t: number,\n    dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  tempQuat1 = tempQuat1 || new QuatType(4);\n  tempQuat2 = tempQuat2 || new QuatType(4);\n\n  slerp(a, d, t, tempQuat1);\n  slerp(b, c, t, tempQuat2);\n  slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), dst);\n\n  return dst;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 4 values, Float32Array with 4 values, or a Float64Array with 4 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link vec4.setDefaultType}.\n */\nexport type Vec4 = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let VecType: new (n: number) => Vec4 = Float32Array;\n\n/**\n * Sets the type this library creates for a Vec4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec4\n */\nexport function setDefaultType(ctor: new (n: number) => Vec4) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nexport function create(x?: number, y?: number, z?: number, w?: number): Vec4 {\n  const dst = new VecType(4);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n      if (z !== undefined) {\n        dst[2] = z;\n        if (w !== undefined) {\n          dst[3] = w;\n        }\n      }\n    }\n  }\n  return dst;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec4, create, setDefaultType, VecType } from './vec4';\nimport { Mat4 } from './mat4';\n\nexport default Vec4;\nexport { create, setDefaultType };\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Vec4\n * Also see {@link vec4.create} and {@link vec4.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, z: number, w: number, dst?: Vec4) {\n  dst = dst || new VecType(4);\n\n  dst[0] = x;\n  dst[1] = y;\n  dst[2] = z;\n  dst[3] = w;\n\n  return dst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nexport function ceil(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.ceil(v[0]);\n  dst[1] = Math.ceil(v[1]);\n  dst[2] = Math.ceil(v[2]);\n  dst[3] = Math.ceil(v[3]);\n\n  return dst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nexport function floor(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.floor(v[0]);\n  dst[1] = Math.floor(v[1]);\n  dst[2] = Math.floor(v[2]);\n  dst[3] = Math.floor(v[3]);\n\n  return dst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nexport function round(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.round(v[0]);\n  dst[1] = Math.round(v[1]);\n  dst[2] = Math.round(v[2]);\n  dst[3] = Math.round(v[3]);\n\n  return dst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nexport function clamp(v: Vec4, min = 0, max = 1, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.min(max, Math.max(min, v[0]));\n  dst[1] = Math.min(max, Math.max(min, v[1]));\n  dst[2] = Math.min(max, Math.max(min, v[2]));\n  dst[3] = Math.min(max, Math.max(min, v[3]));\n\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nexport function add(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  dst[3] = a[3] + b[3];\n\n  return dst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nexport function addScaled(a: Vec4, b: Vec4, scale: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + b[0] * scale;\n  dst[1] = a[1] + b[1] * scale;\n  dst[2] = a[2] + b[2] * scale;\n  dst[3] = a[3] + b[3] * scale;\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport function subtract(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  dst[3] = a[3] - b[3];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nexport function equalsApproximately(a: Vec4, b: Vec4): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nexport function equals(a: Vec4, b: Vec4): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Vec4, b: Vec4, t: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  dst[3] = a[3] + t * (b[3] - a[3]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nexport function lerpV(a: Vec4, b: Vec4, t: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n  dst[3] = a[3] + t[3] * (b[3] - a[3]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nexport function max(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n  dst[3] = Math.max(a[3], b[3]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nexport function min(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n  dst[3] = Math.min(a[3], b[3]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function mulScalar(v: Vec4, k: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  dst[3] = v[3] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function divScalar(v: Vec4, k: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  dst[3] = v[3] / k;\n\n  return dst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport function inverse(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = 1 / v[0];\n  dst[1] = 1 / v[1];\n  dst[2] = 1 / v[2];\n  dst[3] = 1 / v[3];\n\n  return dst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport const invert = inverse;\n\n/**\n * Computes the dot product of two vectors\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nexport function dot(a: Vec4, b: Vec4): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nexport function length(v: Vec4): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport function lengthSq(v: Vec4): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport function distance(a: Vec4, b: Vec4): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport const dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport function distanceSq(a: Vec4, b: Vec4): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport const distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nexport function normalize(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n    dst[2] = v2 / len;\n    dst[3] = v3 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nexport function negate(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n  dst[3] = -v[3];\n\n  return dst;\n}\n\n/**\n * Copies a vector. (same as {@link vec4.clone})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport function copy(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n  dst[3] = v[3];\n\n  return dst;\n}\n\n/**\n * Clones a vector. (same as {@link vec4.copy})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport const clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport function multiply(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n  dst[3] = a[3] * b[3];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport function divide(a: Vec4, b: Vec4, dst?: Vec4) {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n  dst[3] = a[3] / b[3];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport const div = divide;\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nexport function zero(dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n\n  return dst;\n}\n\n\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat4(v: Vec4, m: Mat4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = v[3];\n\n  dst[0] = m[0] * x + m[4] * y + m[ 8] * z + m[12] * w;\n  dst[1] = m[1] * x + m[5] * y + m[ 9] * z + m[13] * w;\n  dst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  dst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n  return dst;\n}\n\n\n/**\n * Treat a 4D vector as a direction and set it's length\n *\n * @param a The vec4 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nexport function setLength(a: Vec4, len: number, dst?: Vec4) {\n  dst = dst || new VecType(4);\n  normalize(a, dst);\n  return mulScalar(dst, len, dst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec4 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nexport function truncate(a: Vec4, maxLen: number, dst?: Vec4) {\n  dst = dst || new VecType(4);\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, dst);\n  }\n\n  return copy(a, dst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nexport function midpoint(a: Vec4, b: Vec4, dst?: Vec4) {\n  dst = dst || new VecType(4);\n  return lerp(a, b, 0.5, dst);\n}\n","import Mat3, * as mat3 from './mat3-impl';\nimport Mat4, * as mat4 from './mat4-impl';\nimport Quat, * as quat from './quat-impl';\nimport Vec2, * as vec2 from './vec2-impl';\nimport Vec3, * as vec3 from './vec3-impl';\nimport Vec4, * as vec4 from './vec4-impl';\nimport * as utils from './utils';\n\n/**\n * Sets the type this library creates for all types\n *\n * example:\n *\n * ```\n * setDefaultType(Float64Array);\n * ```\n *\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n */\nexport function setDefaultType(ctor: new (n: number) => Float32Array | Float64Array | number[]) {\n  mat3.setDefaultType(ctor);\n  mat4.setDefaultType(ctor);\n  quat.setDefaultType(ctor);\n  vec2.setDefaultType(ctor);\n  vec3.setDefaultType(ctor);\n  vec4.setDefaultType(ctor);\n}\n\nexport {\n  Mat3,\n  mat3,\n  Mat4,\n  mat4,\n  Quat,\n  quat,\n  utils,\n  Vec2,\n  vec2,\n  Vec3,\n  vec3,\n  Vec4,\n  vec4,\n};"],"names":["EPSILON","degrees","Math","PI","n","m","a","b","v","d","abs","t","radians","old","VecType","Float32Array","setDefaultType","ctor","oldType","create","x","y","dst","undefined","z","subtract","lerp","mulScalar","k","inverse","dot","length","v0","v1","sqrt","lengthSq","distance","dx","dy","distanceSq","normalize","len","copy","multiply","divide","setLength","scale","ax","ay","bx","by","mag","cosine","acos","ceil","min","max","Vec3Type","utils.EPSILON","floor","angle","random","cos","sin","rad","p0","p1","sinC","cosC","round","maxLen","MatType","ctorMap","Map","Float64Array","Array","fill","newMat3","get","identity","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","v2","v3","v4","v5","v6","v7","v8","m4","q","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","axis","off","vec2.create","xy","angleInRadians","c","s","cross","t1","t2","dz","az","bz","xz","yz","zScale","p","r","qx","qy","qz","w2","uvX","uvY","uvZ","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","position","target","up","vec3.create","vec3.normalize","vec3.subtract","vec3.cross","eye","v9","v10","v11","v12","v13","v14","v15","m3","left","right","bottom","top","near","far","Infinity","rangeInv","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","QuatType","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","trace","root","invRoot","i","j","a0","a1","a2","a3","invDot","qw","aUnit","bUnit","vec3.dot","vec3.len","dw","mat3.setDefaultType","mat4.setDefaultType","quat.setDefaultType","vec2.setDefaultType","vec3.setDefaultType","vec4.setDefaultType"],"mappings":"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"}