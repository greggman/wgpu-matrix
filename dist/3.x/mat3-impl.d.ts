import { Mat3Arg, Mat3Type } from './mat3';
import { Mat4Arg } from './mat4';
import { BaseArgType } from './types';
export { Mat3Arg, Mat3Type };
type Mat3Ctor<T extends Mat3Arg = Float32Array> = new (n: number) => T;
export declare function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat3Ctor<T>): {
    clone: <T_1 extends BaseArgType = T>(m: BaseArgType, dst?: T_1 | undefined) => T_1;
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined) => T;
    set: <T_2 extends BaseArgType = T>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, dst?: T_2 | undefined) => T_2;
    fromMat4: <T_3 extends BaseArgType = T>(m4: BaseArgType, dst?: T_3 | undefined) => T_3;
    fromQuat: <T_4 extends BaseArgType = T>(q: BaseArgType, dst?: T_4 | undefined) => T_4;
    negate: <T_5 extends BaseArgType = T>(m: BaseArgType, dst?: T_5 | undefined) => T_5;
    copy: <T_1 extends BaseArgType = T>(m: BaseArgType, dst?: T_1 | undefined) => T_1;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_6 extends BaseArgType = T>(dst?: T_6 | undefined) => T_6;
    transpose: <T_7 extends BaseArgType = T>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    inverse: <T_8 extends BaseArgType = T>(m: BaseArgType, dst?: T_8 | undefined) => T_8;
    invert: <T_8 extends BaseArgType = T>(m: BaseArgType, dst?: T_8 | undefined) => T_8;
    determinant: (m: BaseArgType) => number;
    mul: <T_9 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_9 | undefined) => T_9;
    multiply: <T_9 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_9 | undefined) => T_9;
    setTranslation: <T_10 extends BaseArgType = T>(a: BaseArgType, v: BaseArgType, dst?: T_10 | undefined) => T_10;
    getTranslation: <T_11 extends BaseArgType = T>(m: BaseArgType, dst?: T_11 | undefined) => T_11;
    getAxis: <T_12 extends BaseArgType = T>(m: BaseArgType, axis: number, dst?: T_12 | undefined) => T_12;
    setAxis: <T_13 extends BaseArgType = T>(m: BaseArgType, v: BaseArgType, axis: number, dst?: T_13 | undefined) => T_13;
    getScaling: <T_14 extends BaseArgType = T>(m: BaseArgType, dst?: T_14 | undefined) => T | T_14;
    translation: <T_15 extends BaseArgType = T>(v: BaseArgType, dst?: T_15 | undefined) => T_15;
    translate: <T_16 extends BaseArgType = T>(m: BaseArgType, v: BaseArgType, dst?: T_16 | undefined) => T_16;
    rotation: <T_17 extends BaseArgType = T>(angleInRadians: number, dst?: T_17 | undefined) => T_17;
    rotate: <T_18 extends BaseArgType = T>(m: BaseArgType, angleInRadians: number, dst?: T_18 | undefined) => T_18;
    scaling: <T_19 extends BaseArgType = T>(v: BaseArgType, dst?: T_19 | undefined) => T_19;
    scale: <T_20 extends BaseArgType = T>(m: BaseArgType, v: BaseArgType, dst?: T_20 | undefined) => T_20;
    uniformScaling: <T_21 extends BaseArgType = T>(s: number, dst?: T_21 | undefined) => T_21;
    uniformScale: <T_22 extends BaseArgType = T>(m: BaseArgType, s: number, dst?: T_22 | undefined) => T_22;
};
