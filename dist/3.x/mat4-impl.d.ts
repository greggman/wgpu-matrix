import { Mat4Arg, Mat4Type } from './mat4';
import { BaseArgType } from './types';
export { Mat4Arg, Mat4Type };
type Mat4Ctor<T extends Mat4Arg = Float32Array> = new (n: number) => T;
export declare function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<T>): {
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined, v9?: number | undefined, v10?: number | undefined, v11?: number | undefined, v12?: number | undefined, v13?: number | undefined, v14?: number | undefined, v15?: number | undefined) => T;
    set: <T_1 extends BaseArgType = T>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, dst?: T_1 | undefined) => T_1;
    fromMat3: <T_2 extends BaseArgType = T>(m3: BaseArgType, dst?: T_2 | undefined) => T_2;
    fromQuat: <T_3 extends BaseArgType = T>(q: BaseArgType, dst?: T_3 | undefined) => T_3;
    negate: <T_4 extends BaseArgType = T>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    copy: <T_5 extends BaseArgType = T>(m: BaseArgType, dst?: T_5 | undefined) => T_5;
    clone: <T_5 extends BaseArgType = T>(m: BaseArgType, dst?: T_5 | undefined) => T_5;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_6 extends BaseArgType = T>(dst?: T_6 | undefined) => T_6;
    transpose: <T_7 extends BaseArgType = T>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    inverse: <T_8 extends BaseArgType = T>(m: BaseArgType, dst?: T_8 | undefined) => T_8;
    determinant: (m: BaseArgType) => number;
    invert: <T_8 extends BaseArgType = T>(m: BaseArgType, dst?: T_8 | undefined) => T_8;
    multiply: <T_9 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_9 | undefined) => T_9;
    mul: <T_9 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_9 | undefined) => T_9;
    setTranslation: <T_10 extends BaseArgType = T>(a: BaseArgType, v: BaseArgType, dst?: T_10 | undefined) => T_10;
    getTranslation: <T_11 extends BaseArgType = T>(m: BaseArgType, dst?: T_11 | undefined) => T_11;
    getAxis: <T_12 extends BaseArgType = T>(m: BaseArgType, axis: number, dst?: T_12 | undefined) => T | T_12;
    setAxis: <T_13 extends BaseArgType = T>(m: BaseArgType, v: BaseArgType, axis: number, dst: T_13) => T_13;
    getScaling: <T_14 extends BaseArgType = T>(m: BaseArgType, dst?: T_14 | undefined) => T_14;
    perspective: <T_15 extends BaseArgType = T>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T_15 | undefined) => T_15;
    perspectiveReverseZ: <T_16 extends BaseArgType = T>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar?: number, dst?: T_16 | undefined) => T_16;
    ortho: <T_17 extends BaseArgType = T>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_17 | undefined) => T_17;
    frustum: <T_18 extends BaseArgType = T>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_18 | undefined) => T_18;
    frustumReverseZ: <T_19 extends BaseArgType = T>(left: number, right: number, bottom: number, top: number, near: number, far?: number, dst?: T_19 | undefined) => T_19;
    aim: <T_20 extends BaseArgType = T>(position: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_20 | undefined) => T_20;
    cameraAim: <T_21 extends BaseArgType = T>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_21 | undefined) => T_21;
    lookAt: <T_22 extends BaseArgType = T>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_22 | undefined) => T_22;
    translation: <T_23 extends BaseArgType = T>(v: BaseArgType, dst?: T_23 | undefined) => T_23;
    translate: <T_24 extends BaseArgType = T>(m: BaseArgType, v: BaseArgType, dst?: T_24 | undefined) => T_24;
    rotationX: <T_25 extends BaseArgType = T>(angleInRadians: number, dst?: T_25 | undefined) => T_25;
    rotateX: <T_26 extends BaseArgType = T>(m: BaseArgType, angleInRadians: number, dst?: T_26 | undefined) => T_26;
    rotationY: <T_27 extends BaseArgType = T>(angleInRadians: number, dst?: T_27 | undefined) => T_27;
    rotateY: <T_28 extends BaseArgType = T>(m: BaseArgType, angleInRadians: number, dst?: T_28 | undefined) => T_28;
    rotationZ: <T_29 extends BaseArgType = T>(angleInRadians: number, dst?: T_29 | undefined) => T_29;
    rotateZ: <T_30 extends BaseArgType = T>(m: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    axisRotation: <T_31 extends BaseArgType = T>(axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    rotation: <T_31 extends BaseArgType = T>(axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    axisRotate: <T_32 extends BaseArgType = T>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_32 | undefined) => T_32;
    rotate: <T_32 extends BaseArgType = T>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_32 | undefined) => T_32;
    scaling: <T_33 extends BaseArgType = T>(v: BaseArgType, dst?: T_33 | undefined) => T_33;
    scale: <T_34 extends BaseArgType = T>(m: BaseArgType, v: BaseArgType, dst?: T_34 | undefined) => T_34;
    uniformScaling: <T_35 extends BaseArgType = T>(s: number, dst?: T_35 | undefined) => T_35;
    uniformScale: <T_36 extends BaseArgType = T>(m: BaseArgType, s: number, dst?: T_36 | undefined) => T_36;
};
