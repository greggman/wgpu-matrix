import { Vec3Arg, Vec3Type } from './vec3';
import { Mat4Arg } from './mat4';
import { BaseArgType } from './types';
export { Vec3Arg, Vec3Type };
type Vec3Ctor<T extends Vec3Arg = Float32Array> = new (n: number) => T;
export declare function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec3Ctor<T>): {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => T;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => T;
    set: <T_1 extends BaseArgType = T>(x: number, y: number, z: number, dst?: T_1 | undefined) => T_1;
    ceil: <T_2 extends BaseArgType = T>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    floor: <T_3 extends BaseArgType = T>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    round: <T_4 extends BaseArgType = T>(v: BaseArgType, dst?: T_4 | undefined) => T_4;
    clamp: <T_5 extends BaseArgType = T>(v: BaseArgType, min?: number, max?: number, dst?: T_5 | undefined) => T_5;
    add: <T_6 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_6 | undefined) => T_6;
    addScaled: <T_7 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_7 | undefined) => T_7;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_8 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    sub: <T_8 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_9 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_9 | undefined) => T_9;
    lerpV: <T_10 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_10 | undefined) => T_10;
    max: <T_11 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    min: <T_12 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_12 | undefined) => T_12;
    mulScalar: <T_13 extends BaseArgType = T>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    scale: <T_13 extends BaseArgType = T>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    divScalar: <T_14 extends BaseArgType = T>(v: BaseArgType, k: number, dst?: T_14 | undefined) => T_14;
    inverse: <T_15 extends BaseArgType = T>(v: BaseArgType, dst?: T_15 | undefined) => T_15;
    invert: <T_15 extends BaseArgType = T>(v: BaseArgType, dst?: T_15 | undefined) => T_15;
    cross: <T_16 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_16 | undefined) => T_16;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_17 extends BaseArgType = T>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    negate: <T_18 extends BaseArgType = T>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    copy: <T_19 extends BaseArgType = T>(v: BaseArgType, dst?: T_19 | undefined) => T_19;
    clone: <T_19 extends BaseArgType = T>(v: BaseArgType, dst?: T_19 | undefined) => T_19;
    multiply: <T_20 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    mul: <T_20 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    divide: <T_21 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_21 | undefined) => T_21;
    div: <T_21 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_21 | undefined) => T_21;
    random: <T_22 extends BaseArgType = T>(scale?: number, dst?: T_22 | undefined) => T_22;
    zero: <T_23 extends BaseArgType = T>(dst?: T_23 | undefined) => T_23;
    transformMat4: <T_24 extends BaseArgType = T>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    transformMat4Upper3x3: <T_25 extends BaseArgType = T>(v: BaseArgType, m: BaseArgType, dst?: T_25 | undefined) => T_25;
    transformMat3: <T_26 extends BaseArgType = T>(v: BaseArgType, m: BaseArgType, dst?: T_26 | undefined) => T_26;
    transformQuat: <T_27 extends BaseArgType = T>(v: BaseArgType, q: BaseArgType, dst?: T_27 | undefined) => T_27;
    getTranslation: <T_28 extends BaseArgType = T>(m: BaseArgType, dst?: T_28 | undefined) => T_28;
    getAxis: <T_29 extends BaseArgType = T>(m: BaseArgType, axis: number, dst?: T_29 | undefined) => T_29;
    getScaling: <T_30 extends BaseArgType = T>(m: BaseArgType, dst?: T_30 | undefined) => T_30;
    rotateX: <T_31 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_31 | undefined) => T_31;
    rotateY: <T_32 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_32 | undefined) => T_32;
    rotateZ: <T_33 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_33 | undefined) => T_33;
    setLength: <T_34 extends BaseArgType = T>(a: BaseArgType, len: number, dst?: T_34 | undefined) => T_34;
    truncate: <T_35 extends BaseArgType = T>(a: BaseArgType, maxLen: number, dst?: T_35 | undefined) => T_35;
    midpoint: <T_36 extends BaseArgType = T>(a: BaseArgType, b: BaseArgType, dst?: T_36 | undefined) => T_36;
};
