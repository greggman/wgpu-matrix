import { BaseArgType } from './types';
import { Mat3Arg, Mat3Type } from './mat3-impl';
import { Mat4Arg, Mat4Type } from './mat4-impl';
import { QuatArg, QuatType, RotationOrder } from './quat-impl';
import { Vec2Arg, Vec2Type } from './vec2-impl';
import { Vec3Arg, Vec3Type } from './vec3-impl';
import { Vec4Arg, Vec4Type } from './vec4-impl';
import * as utils from './utils';
export { RotationOrder, utils, BaseArgType, Mat3Arg, Mat4Arg, QuatArg, Vec2Arg, Vec3Arg, Vec4Arg, Mat3Type, Mat4Type, QuatType, Vec2Type, Vec3Type, Vec4Type, };
export type BaseCtor<T extends BaseArgType> = new (n: number) => T;
export type Mat3 = Mat3Type<Float32Array>;
export type Mat4 = Mat4Type<Float32Array>;
export type Quat = QuatType<Float32Array>;
export type Vec2 = Vec2Type<Float32Array>;
export type Vec3 = Vec3Type<Float32Array>;
export type Vec4 = Vec4Type<Float32Array>;
export type Mat3d = Mat3Type<Float64Array>;
export type Mat4d = Mat4Type<Float64Array>;
export type Quatd = QuatType<Float64Array>;
export type Vec2d = Vec2Type<Float64Array>;
export type Vec3d = Vec3Type<Float64Array>;
export type Vec4d = Vec4Type<Float64Array>;
export type Mat3n = Mat3Type<number[]>;
export type Mat4n = Mat4Type<number[]>;
export type Quatn = QuatType<number[]>;
export type Vec2n = Vec2Type<number[]>;
export type Vec3n = Vec3Type<number[]>;
export type Vec4n = Vec4Type<number[]>;
export declare const 
/** @namespace */
mat4: {
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined, v9?: number | undefined, v10?: number | undefined, v11?: number | undefined, v12?: number | undefined, v13?: number | undefined, v14?: number | undefined, v15?: number | undefined) => Float32Array;
    set: <T extends BaseArgType = Float32Array>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, dst?: T | undefined) => T;
    fromMat3: <T_1 extends BaseArgType = Float32Array>(m3: BaseArgType, dst?: T_1 | undefined) => T_1;
    fromQuat: <T_2 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_2 | undefined) => T_2;
    negate: <T_3 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_3 | undefined) => T_3;
    copy: <T_4 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    clone: <T_4 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_5 extends BaseArgType = Float32Array>(dst?: T_5 | undefined) => T_5;
    transpose: <T_6 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_6 | undefined) => T_6;
    inverse: <T_7 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    determinant: (m: BaseArgType) => number;
    invert: <T_7 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    multiply: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    mul: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    setTranslation: <T_9 extends BaseArgType = Float32Array>(a: BaseArgType, v: BaseArgType, dst?: T_9 | undefined) => T_9;
    getTranslation: <T_10 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    getAxis: <T_11 extends BaseArgType = Float32Array>(m: BaseArgType, axis: number, dst?: T_11 | undefined) => Float32Array | T_11;
    setAxis: <T_12 extends BaseArgType = Float32Array>(m: BaseArgType, v: BaseArgType, axis: number, dst: T_12) => T_12;
    getScaling: <T_13 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_13 | undefined) => T_13;
    perspective: <T_14 extends BaseArgType = Float32Array>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T_14 | undefined) => T_14;
    perspectiveReverseZ: <T_15 extends BaseArgType = Float32Array>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar?: number, dst?: T_15 | undefined) => T_15;
    ortho: <T_16 extends BaseArgType = Float32Array>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_16 | undefined) => T_16;
    frustum: <T_17 extends BaseArgType = Float32Array>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_17 | undefined) => T_17;
    frustumReverseZ: <T_18 extends BaseArgType = Float32Array>(left: number, right: number, bottom: number, top: number, near: number, far?: number, dst?: T_18 | undefined) => T_18;
    aim: <T_19 extends BaseArgType = Float32Array>(position: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_19 | undefined) => T_19;
    cameraAim: <T_20 extends BaseArgType = Float32Array>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_20 | undefined) => T_20;
    lookAt: <T_21 extends BaseArgType = Float32Array>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_21 | undefined) => T_21;
    translation: <T_22 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_22 | undefined) => T_22;
    translate: <T_23 extends BaseArgType = Float32Array>(m: BaseArgType, v: BaseArgType, dst?: T_23 | undefined) => T_23;
    rotationX: <T_24 extends BaseArgType = Float32Array>(angleInRadians: number, dst?: T_24 | undefined) => T_24;
    rotateX: <T_25 extends BaseArgType = Float32Array>(m: BaseArgType, angleInRadians: number, dst?: T_25 | undefined) => T_25;
    rotationY: <T_26 extends BaseArgType = Float32Array>(angleInRadians: number, dst?: T_26 | undefined) => T_26;
    rotateY: <T_27 extends BaseArgType = Float32Array>(m: BaseArgType, angleInRadians: number, dst?: T_27 | undefined) => T_27;
    rotationZ: <T_28 extends BaseArgType = Float32Array>(angleInRadians: number, dst?: T_28 | undefined) => T_28;
    rotateZ: <T_29 extends BaseArgType = Float32Array>(m: BaseArgType, angleInRadians: number, dst?: T_29 | undefined) => T_29;
    axisRotation: <T_30 extends BaseArgType = Float32Array>(axis: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    rotation: <T_30 extends BaseArgType = Float32Array>(axis: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    axisRotate: <T_31 extends BaseArgType = Float32Array>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    rotate: <T_31 extends BaseArgType = Float32Array>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    scaling: <T_32 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_32 | undefined) => T_32;
    scale: <T_33 extends BaseArgType = Float32Array>(m: BaseArgType, v: BaseArgType, dst?: T_33 | undefined) => T_33;
    uniformScaling: <T_34 extends BaseArgType = Float32Array>(s: number, dst?: T_34 | undefined) => T_34;
    uniformScale: <T_35 extends BaseArgType = Float32Array>(m: BaseArgType, s: number, dst?: T_35 | undefined) => T_35;
}, 
/** @namespace */
mat3: {
    clone: <T extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T | undefined) => T;
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined) => Float32Array;
    set: <T_1 extends BaseArgType = Float32Array>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, dst?: T_1 | undefined) => T_1;
    fromMat4: <T_2 extends BaseArgType = Float32Array>(m4: BaseArgType, dst?: T_2 | undefined) => T_2;
    fromQuat: <T_3 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_3 | undefined) => T_3;
    negate: <T_4 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    copy: <T extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T | undefined) => T;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_5 extends BaseArgType = Float32Array>(dst?: T_5 | undefined) => T_5;
    transpose: <T_6 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_6 | undefined) => T_6;
    inverse: <T_7 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    invert: <T_7 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    determinant: (m: BaseArgType) => number;
    mul: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    multiply: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    setTranslation: <T_9 extends BaseArgType = Float32Array>(a: BaseArgType, v: BaseArgType, dst?: T_9 | undefined) => T_9;
    getTranslation: <T_10 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    getAxis: <T_11 extends BaseArgType = Float32Array>(m: BaseArgType, axis: number, dst?: T_11 | undefined) => T_11;
    setAxis: <T_12 extends BaseArgType = Float32Array>(m: BaseArgType, v: BaseArgType, axis: number, dst?: T_12 | undefined) => T_12;
    getScaling: <T_13 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_13 | undefined) => Float32Array | T_13;
    translation: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    translate: <T_15 extends BaseArgType = Float32Array>(m: BaseArgType, v: BaseArgType, dst?: T_15 | undefined) => T_15;
    rotation: <T_16 extends BaseArgType = Float32Array>(angleInRadians: number, dst?: T_16 | undefined) => T_16;
    rotate: <T_17 extends BaseArgType = Float32Array>(m: BaseArgType, angleInRadians: number, dst?: T_17 | undefined) => T_17;
    scaling: <T_18 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    scale: <T_19 extends BaseArgType = Float32Array>(m: BaseArgType, v: BaseArgType, dst?: T_19 | undefined) => T_19;
    uniformScaling: <T_20 extends BaseArgType = Float32Array>(s: number, dst?: T_20 | undefined) => T_20;
    uniformScale: <T_21 extends BaseArgType = Float32Array>(m: BaseArgType, s: number, dst?: T_21 | undefined) => T_21;
}, 
/** @namespace */
quat: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float32Array;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float32Array;
    set: <T extends BaseArgType = Float32Array>(x: number, y: number, z: number, w: number, dst?: T | undefined) => T;
    fromAxisAngle: <T_1 extends BaseArgType = Float32Array>(axis: BaseArgType, angleInRadians: number, dst?: T_1 | undefined) => T_1;
    toAxisAngle: <T_2 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_2 | undefined) => {
        angle: number;
        axis: T_2;
    };
    angle: (a: BaseArgType, b: BaseArgType) => number;
    multiply: <T_3 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_3 | undefined) => T_3;
    mul: <T_3 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_3 | undefined) => T_3;
    rotateX: <T_4 extends BaseArgType = Float32Array>(q: BaseArgType, angleInRadians: number, dst?: T_4 | undefined) => T_4;
    rotateY: <T_5 extends BaseArgType = Float32Array>(q: BaseArgType, angleInRadians: number, dst?: T_5 | undefined) => T_5;
    rotateZ: <T_6 extends BaseArgType = Float32Array>(q: BaseArgType, angleInRadians: number, dst?: T_6 | undefined) => T_6;
    slerp: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_7 | undefined) => T_7;
    inverse: <T_8 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_8 | undefined) => T_8;
    conjugate: <T_9 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_9 | undefined) => T_9;
    fromMat: <T_10 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    fromEuler: <T_11 extends BaseArgType = Float32Array>(xAngleInRadians: number, yAngleInRadians: number, zAngleInRadians: number, order: RotationOrder, dst?: T_11 | undefined) => T_11;
    copy: <T_12 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_12 | undefined) => T_12;
    clone: <T_12 extends BaseArgType = Float32Array>(q: BaseArgType, dst?: T_12 | undefined) => T_12;
    add: <T_13 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_13 | undefined) => T_13;
    subtract: <T_14 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_14 | undefined) => T_14;
    sub: <T_14 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_14 | undefined) => T_14;
    mulScalar: <T_15 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_15 | undefined) => T_15;
    scale: <T_15 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_15 | undefined) => T_15;
    divScalar: <T_16 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_16 | undefined) => T_16;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    lerp: <T_17 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_17 | undefined) => T_17;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    normalize: <T_18 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_19 extends BaseArgType = Float32Array>(dst?: T_19 | undefined) => T_19;
    rotationTo: <T_20 extends BaseArgType = Float32Array>(aUnit: BaseArgType, bUnit: BaseArgType, dst?: T_20 | undefined) => T_20;
    sqlerp: <T_21 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, c: BaseArgType, d: BaseArgType, t: number, dst?: T_21 | undefined) => T_21;
}, 
/** @namespace */
vec2: {
    create: (x?: number, y?: number) => Float32Array;
    fromValues: (x?: number, y?: number) => Float32Array;
    set: <T extends BaseArgType = Float32Array>(x: number, y: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = Float32Array>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    cross: <T_15 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_15 | undefined) => T_15;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_16 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    negate: <T_17 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    copy: <T_18 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    clone: <T_18 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    multiply: <T_19 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    mul: <T_19 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    divide: <T_20 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    div: <T_20 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    random: <T_21 extends BaseArgType = Float32Array>(scale?: number, dst?: T_21 | undefined) => T_21;
    zero: <T_22 extends BaseArgType = Float32Array>(dst?: T_22 | undefined) => T_22;
    transformMat4: <T_23 extends BaseArgType = Float32Array>(v: BaseArgType, m: BaseArgType, dst?: T_23 | undefined) => T_23;
    transformMat3: <T_24 extends BaseArgType = Float32Array>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    rotate: <T_25 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_25 | undefined) => T_25;
    setLength: <T_26 extends BaseArgType = Float32Array>(a: BaseArgType, len: number, dst?: T_26 | undefined) => T_26;
    truncate: <T_27 extends BaseArgType = Float32Array>(a: BaseArgType, maxLen: number, dst?: T_27 | undefined) => T_27;
    midpoint: <T_28 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_28 | undefined) => T_28;
}, 
/** @namespace */
vec3: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => Float32Array;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => Float32Array;
    set: <T extends BaseArgType = Float32Array>(x: number, y: number, z: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = Float32Array>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    cross: <T_15 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_15 | undefined) => T_15;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_16 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    negate: <T_17 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    copy: <T_18 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    clone: <T_18 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    multiply: <T_19 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    mul: <T_19 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    divide: <T_20 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    div: <T_20 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    random: <T_21 extends BaseArgType = Float32Array>(scale?: number, dst?: T_21 | undefined) => T_21;
    zero: <T_22 extends BaseArgType = Float32Array>(dst?: T_22 | undefined) => T_22;
    transformMat4: <T_23 extends BaseArgType = Float32Array>(v: BaseArgType, m: BaseArgType, dst?: T_23 | undefined) => T_23;
    transformMat4Upper3x3: <T_24 extends BaseArgType = Float32Array>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    transformMat3: <T_25 extends BaseArgType = Float32Array>(v: BaseArgType, m: BaseArgType, dst?: T_25 | undefined) => T_25;
    transformQuat: <T_26 extends BaseArgType = Float32Array>(v: BaseArgType, q: BaseArgType, dst?: T_26 | undefined) => T_26;
    getTranslation: <T_27 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_27 | undefined) => T_27;
    getAxis: <T_28 extends BaseArgType = Float32Array>(m: BaseArgType, axis: number, dst?: T_28 | undefined) => T_28;
    getScaling: <T_29 extends BaseArgType = Float32Array>(m: BaseArgType, dst?: T_29 | undefined) => T_29;
    rotateX: <T_30 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_30 | undefined) => T_30;
    rotateY: <T_31 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_31 | undefined) => T_31;
    rotateZ: <T_32 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_32 | undefined) => T_32;
    setLength: <T_33 extends BaseArgType = Float32Array>(a: BaseArgType, len: number, dst?: T_33 | undefined) => T_33;
    truncate: <T_34 extends BaseArgType = Float32Array>(a: BaseArgType, maxLen: number, dst?: T_34 | undefined) => T_34;
    midpoint: <T_35 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_35 | undefined) => T_35;
}, 
/** @namespace */
vec4: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float32Array;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float32Array;
    set: <T extends BaseArgType = Float32Array>(x: number, y: number, z: number, w: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = Float32Array>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    subtract: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = Float32Array>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_15 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_15 | undefined) => T_15;
    negate: <T_16 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    copy: <T_17 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    clone: <T_17 extends BaseArgType = Float32Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    multiply: <T_18 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_18 | undefined) => T_18;
    mul: <T_18 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_18 | undefined) => T_18;
    divide: <T_19 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    div: <T_19 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    zero: <T_20 extends BaseArgType = Float32Array>(dst?: T_20 | undefined) => T_20;
    transformMat4: <T_21 extends BaseArgType = Float32Array>(v: BaseArgType, m: BaseArgType, dst?: T_21 | undefined) => T_21;
    setLength: <T_22 extends BaseArgType = Float32Array>(a: BaseArgType, len: number, dst?: T_22 | undefined) => T_22;
    truncate: <T_23 extends BaseArgType = Float32Array>(a: BaseArgType, maxLen: number, dst?: T_23 | undefined) => T_23;
    midpoint: <T_24 extends BaseArgType = Float32Array>(a: BaseArgType, b: BaseArgType, dst?: T_24 | undefined) => T_24;
};
export declare const mat4d: {
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined, v9?: number | undefined, v10?: number | undefined, v11?: number | undefined, v12?: number | undefined, v13?: number | undefined, v14?: number | undefined, v15?: number | undefined) => Float64Array;
    set: <T extends BaseArgType = Float64Array>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, dst?: T | undefined) => T;
    fromMat3: <T_1 extends BaseArgType = Float64Array>(m3: BaseArgType, dst?: T_1 | undefined) => T_1;
    fromQuat: <T_2 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_2 | undefined) => T_2;
    negate: <T_3 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_3 | undefined) => T_3;
    copy: <T_4 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    clone: <T_4 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_5 extends BaseArgType = Float64Array>(dst?: T_5 | undefined) => T_5;
    transpose: <T_6 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_6 | undefined) => T_6;
    inverse: <T_7 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    determinant: (m: BaseArgType) => number;
    invert: <T_7 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    multiply: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    mul: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    setTranslation: <T_9 extends BaseArgType = Float64Array>(a: BaseArgType, v: BaseArgType, dst?: T_9 | undefined) => T_9;
    getTranslation: <T_10 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    getAxis: <T_11 extends BaseArgType = Float64Array>(m: BaseArgType, axis: number, dst?: T_11 | undefined) => Float64Array | T_11;
    setAxis: <T_12 extends BaseArgType = Float64Array>(m: BaseArgType, v: BaseArgType, axis: number, dst: T_12) => T_12;
    getScaling: <T_13 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_13 | undefined) => T_13;
    perspective: <T_14 extends BaseArgType = Float64Array>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T_14 | undefined) => T_14;
    perspectiveReverseZ: <T_15 extends BaseArgType = Float64Array>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar?: number, dst?: T_15 | undefined) => T_15;
    ortho: <T_16 extends BaseArgType = Float64Array>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_16 | undefined) => T_16;
    frustum: <T_17 extends BaseArgType = Float64Array>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_17 | undefined) => T_17;
    frustumReverseZ: <T_18 extends BaseArgType = Float64Array>(left: number, right: number, bottom: number, top: number, near: number, far?: number, dst?: T_18 | undefined) => T_18;
    aim: <T_19 extends BaseArgType = Float64Array>(position: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_19 | undefined) => T_19;
    cameraAim: <T_20 extends BaseArgType = Float64Array>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_20 | undefined) => T_20;
    lookAt: <T_21 extends BaseArgType = Float64Array>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_21 | undefined) => T_21;
    translation: <T_22 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_22 | undefined) => T_22;
    translate: <T_23 extends BaseArgType = Float64Array>(m: BaseArgType, v: BaseArgType, dst?: T_23 | undefined) => T_23;
    rotationX: <T_24 extends BaseArgType = Float64Array>(angleInRadians: number, dst?: T_24 | undefined) => T_24;
    rotateX: <T_25 extends BaseArgType = Float64Array>(m: BaseArgType, angleInRadians: number, dst?: T_25 | undefined) => T_25;
    rotationY: <T_26 extends BaseArgType = Float64Array>(angleInRadians: number, dst?: T_26 | undefined) => T_26;
    rotateY: <T_27 extends BaseArgType = Float64Array>(m: BaseArgType, angleInRadians: number, dst?: T_27 | undefined) => T_27;
    rotationZ: <T_28 extends BaseArgType = Float64Array>(angleInRadians: number, dst?: T_28 | undefined) => T_28;
    rotateZ: <T_29 extends BaseArgType = Float64Array>(m: BaseArgType, angleInRadians: number, dst?: T_29 | undefined) => T_29;
    axisRotation: <T_30 extends BaseArgType = Float64Array>(axis: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    rotation: <T_30 extends BaseArgType = Float64Array>(axis: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    axisRotate: <T_31 extends BaseArgType = Float64Array>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    rotate: <T_31 extends BaseArgType = Float64Array>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    scaling: <T_32 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_32 | undefined) => T_32;
    scale: <T_33 extends BaseArgType = Float64Array>(m: BaseArgType, v: BaseArgType, dst?: T_33 | undefined) => T_33;
    uniformScaling: <T_34 extends BaseArgType = Float64Array>(s: number, dst?: T_34 | undefined) => T_34;
    uniformScale: <T_35 extends BaseArgType = Float64Array>(m: BaseArgType, s: number, dst?: T_35 | undefined) => T_35;
}, mat3d: {
    clone: <T extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T | undefined) => T;
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined) => Float64Array;
    set: <T_1 extends BaseArgType = Float64Array>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, dst?: T_1 | undefined) => T_1;
    fromMat4: <T_2 extends BaseArgType = Float64Array>(m4: BaseArgType, dst?: T_2 | undefined) => T_2;
    fromQuat: <T_3 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_3 | undefined) => T_3;
    negate: <T_4 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    copy: <T extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T | undefined) => T;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_5 extends BaseArgType = Float64Array>(dst?: T_5 | undefined) => T_5;
    transpose: <T_6 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_6 | undefined) => T_6;
    inverse: <T_7 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    invert: <T_7 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    determinant: (m: BaseArgType) => number;
    mul: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    multiply: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    setTranslation: <T_9 extends BaseArgType = Float64Array>(a: BaseArgType, v: BaseArgType, dst?: T_9 | undefined) => T_9;
    getTranslation: <T_10 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    getAxis: <T_11 extends BaseArgType = Float64Array>(m: BaseArgType, axis: number, dst?: T_11 | undefined) => T_11;
    setAxis: <T_12 extends BaseArgType = Float64Array>(m: BaseArgType, v: BaseArgType, axis: number, dst?: T_12 | undefined) => T_12;
    getScaling: <T_13 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_13 | undefined) => Float64Array | T_13;
    translation: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    translate: <T_15 extends BaseArgType = Float64Array>(m: BaseArgType, v: BaseArgType, dst?: T_15 | undefined) => T_15;
    rotation: <T_16 extends BaseArgType = Float64Array>(angleInRadians: number, dst?: T_16 | undefined) => T_16;
    rotate: <T_17 extends BaseArgType = Float64Array>(m: BaseArgType, angleInRadians: number, dst?: T_17 | undefined) => T_17;
    scaling: <T_18 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    scale: <T_19 extends BaseArgType = Float64Array>(m: BaseArgType, v: BaseArgType, dst?: T_19 | undefined) => T_19;
    uniformScaling: <T_20 extends BaseArgType = Float64Array>(s: number, dst?: T_20 | undefined) => T_20;
    uniformScale: <T_21 extends BaseArgType = Float64Array>(m: BaseArgType, s: number, dst?: T_21 | undefined) => T_21;
}, quatd: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float64Array;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float64Array;
    set: <T extends BaseArgType = Float64Array>(x: number, y: number, z: number, w: number, dst?: T | undefined) => T;
    fromAxisAngle: <T_1 extends BaseArgType = Float64Array>(axis: BaseArgType, angleInRadians: number, dst?: T_1 | undefined) => T_1;
    toAxisAngle: <T_2 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_2 | undefined) => {
        angle: number;
        axis: T_2;
    };
    angle: (a: BaseArgType, b: BaseArgType) => number;
    multiply: <T_3 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_3 | undefined) => T_3;
    mul: <T_3 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_3 | undefined) => T_3;
    rotateX: <T_4 extends BaseArgType = Float64Array>(q: BaseArgType, angleInRadians: number, dst?: T_4 | undefined) => T_4;
    rotateY: <T_5 extends BaseArgType = Float64Array>(q: BaseArgType, angleInRadians: number, dst?: T_5 | undefined) => T_5;
    rotateZ: <T_6 extends BaseArgType = Float64Array>(q: BaseArgType, angleInRadians: number, dst?: T_6 | undefined) => T_6;
    slerp: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_7 | undefined) => T_7;
    inverse: <T_8 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_8 | undefined) => T_8;
    conjugate: <T_9 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_9 | undefined) => T_9;
    fromMat: <T_10 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    fromEuler: <T_11 extends BaseArgType = Float64Array>(xAngleInRadians: number, yAngleInRadians: number, zAngleInRadians: number, order: RotationOrder, dst?: T_11 | undefined) => T_11;
    copy: <T_12 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_12 | undefined) => T_12;
    clone: <T_12 extends BaseArgType = Float64Array>(q: BaseArgType, dst?: T_12 | undefined) => T_12;
    add: <T_13 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_13 | undefined) => T_13;
    subtract: <T_14 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_14 | undefined) => T_14;
    sub: <T_14 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_14 | undefined) => T_14;
    mulScalar: <T_15 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_15 | undefined) => T_15;
    scale: <T_15 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_15 | undefined) => T_15;
    divScalar: <T_16 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_16 | undefined) => T_16;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    lerp: <T_17 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_17 | undefined) => T_17;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    normalize: <T_18 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_19 extends BaseArgType = Float64Array>(dst?: T_19 | undefined) => T_19;
    rotationTo: <T_20 extends BaseArgType = Float64Array>(aUnit: BaseArgType, bUnit: BaseArgType, dst?: T_20 | undefined) => T_20;
    sqlerp: <T_21 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, c: BaseArgType, d: BaseArgType, t: number, dst?: T_21 | undefined) => T_21;
}, vec2d: {
    create: (x?: number, y?: number) => Float64Array;
    fromValues: (x?: number, y?: number) => Float64Array;
    set: <T extends BaseArgType = Float64Array>(x: number, y: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = Float64Array>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    cross: <T_15 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_15 | undefined) => T_15;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_16 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    negate: <T_17 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    copy: <T_18 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    clone: <T_18 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    multiply: <T_19 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    mul: <T_19 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    divide: <T_20 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    div: <T_20 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    random: <T_21 extends BaseArgType = Float64Array>(scale?: number, dst?: T_21 | undefined) => T_21;
    zero: <T_22 extends BaseArgType = Float64Array>(dst?: T_22 | undefined) => T_22;
    transformMat4: <T_23 extends BaseArgType = Float64Array>(v: BaseArgType, m: BaseArgType, dst?: T_23 | undefined) => T_23;
    transformMat3: <T_24 extends BaseArgType = Float64Array>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    rotate: <T_25 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_25 | undefined) => T_25;
    setLength: <T_26 extends BaseArgType = Float64Array>(a: BaseArgType, len: number, dst?: T_26 | undefined) => T_26;
    truncate: <T_27 extends BaseArgType = Float64Array>(a: BaseArgType, maxLen: number, dst?: T_27 | undefined) => T_27;
    midpoint: <T_28 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_28 | undefined) => T_28;
}, vec3d: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => Float64Array;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => Float64Array;
    set: <T extends BaseArgType = Float64Array>(x: number, y: number, z: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = Float64Array>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    cross: <T_15 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_15 | undefined) => T_15;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_16 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    negate: <T_17 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    copy: <T_18 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    clone: <T_18 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    multiply: <T_19 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    mul: <T_19 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    divide: <T_20 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    div: <T_20 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    random: <T_21 extends BaseArgType = Float64Array>(scale?: number, dst?: T_21 | undefined) => T_21;
    zero: <T_22 extends BaseArgType = Float64Array>(dst?: T_22 | undefined) => T_22;
    transformMat4: <T_23 extends BaseArgType = Float64Array>(v: BaseArgType, m: BaseArgType, dst?: T_23 | undefined) => T_23;
    transformMat4Upper3x3: <T_24 extends BaseArgType = Float64Array>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    transformMat3: <T_25 extends BaseArgType = Float64Array>(v: BaseArgType, m: BaseArgType, dst?: T_25 | undefined) => T_25;
    transformQuat: <T_26 extends BaseArgType = Float64Array>(v: BaseArgType, q: BaseArgType, dst?: T_26 | undefined) => T_26;
    getTranslation: <T_27 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_27 | undefined) => T_27;
    getAxis: <T_28 extends BaseArgType = Float64Array>(m: BaseArgType, axis: number, dst?: T_28 | undefined) => T_28;
    getScaling: <T_29 extends BaseArgType = Float64Array>(m: BaseArgType, dst?: T_29 | undefined) => T_29;
    rotateX: <T_30 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_30 | undefined) => T_30;
    rotateY: <T_31 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_31 | undefined) => T_31;
    rotateZ: <T_32 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_32 | undefined) => T_32;
    setLength: <T_33 extends BaseArgType = Float64Array>(a: BaseArgType, len: number, dst?: T_33 | undefined) => T_33;
    truncate: <T_34 extends BaseArgType = Float64Array>(a: BaseArgType, maxLen: number, dst?: T_34 | undefined) => T_34;
    midpoint: <T_35 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_35 | undefined) => T_35;
}, vec4d: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float64Array;
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => Float64Array;
    set: <T extends BaseArgType = Float64Array>(x: number, y: number, z: number, w: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = Float64Array>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    subtract: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = Float64Array>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_15 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_15 | undefined) => T_15;
    negate: <T_16 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    copy: <T_17 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    clone: <T_17 extends BaseArgType = Float64Array>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    multiply: <T_18 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_18 | undefined) => T_18;
    mul: <T_18 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_18 | undefined) => T_18;
    divide: <T_19 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    div: <T_19 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    zero: <T_20 extends BaseArgType = Float64Array>(dst?: T_20 | undefined) => T_20;
    transformMat4: <T_21 extends BaseArgType = Float64Array>(v: BaseArgType, m: BaseArgType, dst?: T_21 | undefined) => T_21;
    setLength: <T_22 extends BaseArgType = Float64Array>(a: BaseArgType, len: number, dst?: T_22 | undefined) => T_22;
    truncate: <T_23 extends BaseArgType = Float64Array>(a: BaseArgType, maxLen: number, dst?: T_23 | undefined) => T_23;
    midpoint: <T_24 extends BaseArgType = Float64Array>(a: BaseArgType, b: BaseArgType, dst?: T_24 | undefined) => T_24;
};
export declare const mat4n: {
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined, v9?: number | undefined, v10?: number | undefined, v11?: number | undefined, v12?: number | undefined, v13?: number | undefined, v14?: number | undefined, v15?: number | undefined) => number[];
    set: <T extends BaseArgType = number[]>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, dst?: T | undefined) => T;
    fromMat3: <T_1 extends BaseArgType = number[]>(m3: BaseArgType, dst?: T_1 | undefined) => T_1;
    fromQuat: <T_2 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_2 | undefined) => T_2;
    negate: <T_3 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_3 | undefined) => T_3;
    copy: <T_4 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    clone: <T_4 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_5 extends BaseArgType = number[]>(dst?: T_5 | undefined) => T_5;
    transpose: <T_6 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_6 | undefined) => T_6;
    inverse: <T_7 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    determinant: (m: BaseArgType) => number;
    invert: <T_7 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    multiply: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    mul: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    setTranslation: <T_9 extends BaseArgType = number[]>(a: BaseArgType, v: BaseArgType, dst?: T_9 | undefined) => T_9;
    getTranslation: <T_10 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    getAxis: <T_11 extends BaseArgType = number[]>(m: BaseArgType, axis: number, dst?: T_11 | undefined) => number[] | T_11;
    setAxis: <T_12 extends BaseArgType = number[]>(m: BaseArgType, v: BaseArgType, axis: number, dst: T_12) => T_12;
    getScaling: <T_13 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_13 | undefined) => T_13;
    perspective: <T_14 extends BaseArgType = number[]>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T_14 | undefined) => T_14;
    perspectiveReverseZ: <T_15 extends BaseArgType = number[]>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar?: number, dst?: T_15 | undefined) => T_15;
    ortho: <T_16 extends BaseArgType = number[]>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_16 | undefined) => T_16;
    frustum: <T_17 extends BaseArgType = number[]>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T_17 | undefined) => T_17;
    frustumReverseZ: <T_18 extends BaseArgType = number[]>(left: number, right: number, bottom: number, top: number, near: number, far?: number, dst?: T_18 | undefined) => T_18;
    aim: <T_19 extends BaseArgType = number[]>(position: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_19 | undefined) => T_19;
    cameraAim: <T_20 extends BaseArgType = number[]>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_20 | undefined) => T_20;
    lookAt: <T_21 extends BaseArgType = number[]>(eye: BaseArgType, target: BaseArgType, up: BaseArgType, dst?: T_21 | undefined) => T_21;
    translation: <T_22 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_22 | undefined) => T_22;
    translate: <T_23 extends BaseArgType = number[]>(m: BaseArgType, v: BaseArgType, dst?: T_23 | undefined) => T_23;
    rotationX: <T_24 extends BaseArgType = number[]>(angleInRadians: number, dst?: T_24 | undefined) => T_24;
    rotateX: <T_25 extends BaseArgType = number[]>(m: BaseArgType, angleInRadians: number, dst?: T_25 | undefined) => T_25;
    rotationY: <T_26 extends BaseArgType = number[]>(angleInRadians: number, dst?: T_26 | undefined) => T_26;
    rotateY: <T_27 extends BaseArgType = number[]>(m: BaseArgType, angleInRadians: number, dst?: T_27 | undefined) => T_27;
    rotationZ: <T_28 extends BaseArgType = number[]>(angleInRadians: number, dst?: T_28 | undefined) => T_28;
    rotateZ: <T_29 extends BaseArgType = number[]>(m: BaseArgType, angleInRadians: number, dst?: T_29 | undefined) => T_29;
    axisRotation: <T_30 extends BaseArgType = number[]>(axis: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    rotation: <T_30 extends BaseArgType = number[]>(axis: BaseArgType, angleInRadians: number, dst?: T_30 | undefined) => T_30;
    axisRotate: <T_31 extends BaseArgType = number[]>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    rotate: <T_31 extends BaseArgType = number[]>(m: BaseArgType, axis: BaseArgType, angleInRadians: number, dst?: T_31 | undefined) => T_31;
    scaling: <T_32 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_32 | undefined) => T_32;
    scale: <T_33 extends BaseArgType = number[]>(m: BaseArgType, v: BaseArgType, dst?: T_33 | undefined) => T_33;
    uniformScaling: <T_34 extends BaseArgType = number[]>(s: number, dst?: T_34 | undefined) => T_34;
    uniformScale: <T_35 extends BaseArgType = number[]>(m: BaseArgType, s: number, dst?: T_35 | undefined) => T_35;
}, mat3n: {
    clone: <T extends BaseArgType = number[]>(m: BaseArgType, dst?: T | undefined) => T;
    create: (v0?: number | undefined, v1?: number | undefined, v2?: number | undefined, v3?: number | undefined, v4?: number | undefined, v5?: number | undefined, v6?: number | undefined, v7?: number | undefined, v8?: number | undefined) => number[];
    set: <T_1 extends BaseArgType = number[]>(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, dst?: T_1 | undefined) => T_1;
    fromMat4: <T_2 extends BaseArgType = number[]>(m4: BaseArgType, dst?: T_2 | undefined) => T_2;
    fromQuat: <T_3 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_3 | undefined) => T_3;
    negate: <T_4 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_4 | undefined) => T_4;
    copy: <T extends BaseArgType = number[]>(m: BaseArgType, dst?: T | undefined) => T;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_5 extends BaseArgType = number[]>(dst?: T_5 | undefined) => T_5;
    transpose: <T_6 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_6 | undefined) => T_6;
    inverse: <T_7 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    invert: <T_7 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_7 | undefined) => T_7;
    determinant: (m: BaseArgType) => number;
    mul: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    multiply: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_8 | undefined) => T_8;
    setTranslation: <T_9 extends BaseArgType = number[]>(a: BaseArgType, v: BaseArgType, dst?: T_9 | undefined) => T_9;
    getTranslation: <T_10 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    getAxis: <T_11 extends BaseArgType = number[]>(m: BaseArgType, axis: number, dst?: T_11 | undefined) => T_11;
    setAxis: <T_12 extends BaseArgType = number[]>(m: BaseArgType, v: BaseArgType, axis: number, dst?: T_12 | undefined) => T_12;
    getScaling: <T_13 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_13 | undefined) => number[] | T_13;
    translation: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    translate: <T_15 extends BaseArgType = number[]>(m: BaseArgType, v: BaseArgType, dst?: T_15 | undefined) => T_15;
    rotation: <T_16 extends BaseArgType = number[]>(angleInRadians: number, dst?: T_16 | undefined) => T_16;
    rotate: <T_17 extends BaseArgType = number[]>(m: BaseArgType, angleInRadians: number, dst?: T_17 | undefined) => T_17;
    scaling: <T_18 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    scale: <T_19 extends BaseArgType = number[]>(m: BaseArgType, v: BaseArgType, dst?: T_19 | undefined) => T_19;
    uniformScaling: <T_20 extends BaseArgType = number[]>(s: number, dst?: T_20 | undefined) => T_20;
    uniformScale: <T_21 extends BaseArgType = number[]>(m: BaseArgType, s: number, dst?: T_21 | undefined) => T_21;
}, quatn: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => number[];
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => number[];
    set: <T extends BaseArgType = number[]>(x: number, y: number, z: number, w: number, dst?: T | undefined) => T;
    fromAxisAngle: <T_1 extends BaseArgType = number[]>(axis: BaseArgType, angleInRadians: number, dst?: T_1 | undefined) => T_1;
    toAxisAngle: <T_2 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_2 | undefined) => {
        angle: number;
        axis: T_2;
    };
    angle: (a: BaseArgType, b: BaseArgType) => number;
    multiply: <T_3 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_3 | undefined) => T_3;
    mul: <T_3 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_3 | undefined) => T_3;
    rotateX: <T_4 extends BaseArgType = number[]>(q: BaseArgType, angleInRadians: number, dst?: T_4 | undefined) => T_4;
    rotateY: <T_5 extends BaseArgType = number[]>(q: BaseArgType, angleInRadians: number, dst?: T_5 | undefined) => T_5;
    rotateZ: <T_6 extends BaseArgType = number[]>(q: BaseArgType, angleInRadians: number, dst?: T_6 | undefined) => T_6;
    slerp: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_7 | undefined) => T_7;
    inverse: <T_8 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_8 | undefined) => T_8;
    conjugate: <T_9 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_9 | undefined) => T_9;
    fromMat: <T_10 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_10 | undefined) => T_10;
    fromEuler: <T_11 extends BaseArgType = number[]>(xAngleInRadians: number, yAngleInRadians: number, zAngleInRadians: number, order: RotationOrder, dst?: T_11 | undefined) => T_11;
    copy: <T_12 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_12 | undefined) => T_12;
    clone: <T_12 extends BaseArgType = number[]>(q: BaseArgType, dst?: T_12 | undefined) => T_12;
    add: <T_13 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_13 | undefined) => T_13;
    subtract: <T_14 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_14 | undefined) => T_14;
    sub: <T_14 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_14 | undefined) => T_14;
    mulScalar: <T_15 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_15 | undefined) => T_15;
    scale: <T_15 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_15 | undefined) => T_15;
    divScalar: <T_16 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_16 | undefined) => T_16;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    lerp: <T_17 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_17 | undefined) => T_17;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    normalize: <T_18 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    identity: <T_19 extends BaseArgType = number[]>(dst?: T_19 | undefined) => T_19;
    rotationTo: <T_20 extends BaseArgType = number[]>(aUnit: BaseArgType, bUnit: BaseArgType, dst?: T_20 | undefined) => T_20;
    sqlerp: <T_21 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, c: BaseArgType, d: BaseArgType, t: number, dst?: T_21 | undefined) => T_21;
}, vec2n: {
    create: (x?: number, y?: number) => number[];
    fromValues: (x?: number, y?: number) => number[];
    set: <T extends BaseArgType = number[]>(x: number, y: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = number[]>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    cross: <T_15 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_15 | undefined) => T_15;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_16 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    negate: <T_17 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    copy: <T_18 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    clone: <T_18 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    multiply: <T_19 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    mul: <T_19 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    divide: <T_20 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    div: <T_20 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    random: <T_21 extends BaseArgType = number[]>(scale?: number, dst?: T_21 | undefined) => T_21;
    zero: <T_22 extends BaseArgType = number[]>(dst?: T_22 | undefined) => T_22;
    transformMat4: <T_23 extends BaseArgType = number[]>(v: BaseArgType, m: BaseArgType, dst?: T_23 | undefined) => T_23;
    transformMat3: <T_24 extends BaseArgType = number[]>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    rotate: <T_25 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_25 | undefined) => T_25;
    setLength: <T_26 extends BaseArgType = number[]>(a: BaseArgType, len: number, dst?: T_26 | undefined) => T_26;
    truncate: <T_27 extends BaseArgType = number[]>(a: BaseArgType, maxLen: number, dst?: T_27 | undefined) => T_27;
    midpoint: <T_28 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_28 | undefined) => T_28;
}, vec3n: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => number[];
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined) => number[];
    set: <T extends BaseArgType = number[]>(x: number, y: number, z: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = number[]>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    angle: (a: BaseArgType, b: BaseArgType) => number;
    subtract: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    cross: <T_15 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_15 | undefined) => T_15;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_16 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    negate: <T_17 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    copy: <T_18 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    clone: <T_18 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_18 | undefined) => T_18;
    multiply: <T_19 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    mul: <T_19 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    divide: <T_20 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    div: <T_20 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_20 | undefined) => T_20;
    random: <T_21 extends BaseArgType = number[]>(scale?: number, dst?: T_21 | undefined) => T_21;
    zero: <T_22 extends BaseArgType = number[]>(dst?: T_22 | undefined) => T_22;
    transformMat4: <T_23 extends BaseArgType = number[]>(v: BaseArgType, m: BaseArgType, dst?: T_23 | undefined) => T_23;
    transformMat4Upper3x3: <T_24 extends BaseArgType = number[]>(v: BaseArgType, m: BaseArgType, dst?: T_24 | undefined) => T_24;
    transformMat3: <T_25 extends BaseArgType = number[]>(v: BaseArgType, m: BaseArgType, dst?: T_25 | undefined) => T_25;
    transformQuat: <T_26 extends BaseArgType = number[]>(v: BaseArgType, q: BaseArgType, dst?: T_26 | undefined) => T_26;
    getTranslation: <T_27 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_27 | undefined) => T_27;
    getAxis: <T_28 extends BaseArgType = number[]>(m: BaseArgType, axis: number, dst?: T_28 | undefined) => T_28;
    getScaling: <T_29 extends BaseArgType = number[]>(m: BaseArgType, dst?: T_29 | undefined) => T_29;
    rotateX: <T_30 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_30 | undefined) => T_30;
    rotateY: <T_31 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_31 | undefined) => T_31;
    rotateZ: <T_32 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, rad: number, dst?: T_32 | undefined) => T_32;
    setLength: <T_33 extends BaseArgType = number[]>(a: BaseArgType, len: number, dst?: T_33 | undefined) => T_33;
    truncate: <T_34 extends BaseArgType = number[]>(a: BaseArgType, maxLen: number, dst?: T_34 | undefined) => T_34;
    midpoint: <T_35 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_35 | undefined) => T_35;
}, vec4n: {
    create: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => number[];
    fromValues: (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined) => number[];
    set: <T extends BaseArgType = number[]>(x: number, y: number, z: number, w: number, dst?: T | undefined) => T;
    ceil: <T_1 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_1 | undefined) => T_1;
    floor: <T_2 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_2 | undefined) => T_2;
    round: <T_3 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_3 | undefined) => T_3;
    clamp: <T_4 extends BaseArgType = number[]>(v: BaseArgType, min?: number, max?: number, dst?: T_4 | undefined) => T_4;
    add: <T_5 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_5 | undefined) => T_5;
    addScaled: <T_6 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, scale: number, dst?: T_6 | undefined) => T_6;
    subtract: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    sub: <T_7 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_7 | undefined) => T_7;
    equalsApproximately: (a: BaseArgType, b: BaseArgType) => boolean;
    equals: (a: BaseArgType, b: BaseArgType) => boolean;
    lerp: <T_8 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: number, dst?: T_8 | undefined) => T_8;
    lerpV: <T_9 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, t: BaseArgType, dst?: T_9 | undefined) => T_9;
    max: <T_10 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_10 | undefined) => T_10;
    min: <T_11 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_11 | undefined) => T_11;
    mulScalar: <T_12 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    scale: <T_12 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_12 | undefined) => T_12;
    divScalar: <T_13 extends BaseArgType = number[]>(v: BaseArgType, k: number, dst?: T_13 | undefined) => T_13;
    inverse: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    invert: <T_14 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_14 | undefined) => T_14;
    dot: (a: BaseArgType, b: BaseArgType) => number;
    length: (v: BaseArgType) => number;
    len: (v: BaseArgType) => number;
    lengthSq: (v: BaseArgType) => number;
    lenSq: (v: BaseArgType) => number;
    distance: (a: BaseArgType, b: BaseArgType) => number;
    dist: (a: BaseArgType, b: BaseArgType) => number;
    distanceSq: (a: BaseArgType, b: BaseArgType) => number;
    distSq: (a: BaseArgType, b: BaseArgType) => number;
    normalize: <T_15 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_15 | undefined) => T_15;
    negate: <T_16 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_16 | undefined) => T_16;
    copy: <T_17 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    clone: <T_17 extends BaseArgType = number[]>(v: BaseArgType, dst?: T_17 | undefined) => T_17;
    multiply: <T_18 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_18 | undefined) => T_18;
    mul: <T_18 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_18 | undefined) => T_18;
    divide: <T_19 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    div: <T_19 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_19 | undefined) => T_19;
    zero: <T_20 extends BaseArgType = number[]>(dst?: T_20 | undefined) => T_20;
    transformMat4: <T_21 extends BaseArgType = number[]>(v: BaseArgType, m: BaseArgType, dst?: T_21 | undefined) => T_21;
    setLength: <T_22 extends BaseArgType = number[]>(a: BaseArgType, len: number, dst?: T_22 | undefined) => T_22;
    truncate: <T_23 extends BaseArgType = number[]>(a: BaseArgType, maxLen: number, dst?: T_23 | undefined) => T_23;
    midpoint: <T_24 extends BaseArgType = number[]>(a: BaseArgType, b: BaseArgType, dst?: T_24 | undefined) => T_24;
};
