{"version":3,"file":"wgpu-matrix.min.js","sources":["../../../src/types.ts","../../../src/utils.ts","../../../src/vec2-impl.ts","../../../src/vec3-impl.ts","../../../src/mat3-impl.ts","../../../src/mat4-impl.ts","../../../src/quat-impl.ts","../../../src/vec4-impl.ts","../../../src/wgpu-matrix.ts"],"sourcesContent":["/**\n * The types you can pass to most functions that take an\n * array of numbers.\n */\nexport type BaseArgType = Float32Array | Float64Array | number[];\n\nfunction wrapConstructor<T extends new(...args: any[]) => any>(\n  OriginalConstructor: T,\n  modifier: (instance: InstanceType<T>) => void\n): T {\n  return class extends OriginalConstructor {\n    constructor(...args: any[]) {\n      super(...args);\n      modifier(this as InstanceType<T>);\n    }\n  } as T; // Type assertion is necessary here\n}\n\nexport const ZeroArray = wrapConstructor(Array<number>, a => a.fill(0));\n\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nexport let EPSILON = 0.000001;\n\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nexport function setEpsilon(v: number): number {\n  const old = EPSILON;\n  EPSILON = v;\n  return old;\n}\n\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nexport function degToRad(degrees: number): number {\n  return degrees * Math.PI / 180;\n}\n\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nexport function radToDeg(radians: number): number {\n  return radians * 180 / Math.PI;\n}\n\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nexport function lerp(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nexport function inverseLerp(a: number, b: number, v: number): number {\n  const d = b - a;\n  return (Math.abs(b - a) < EPSILON)\n     ? a\n     : (v - a) / d;\n}\n\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nexport function euclideanModulo(n: number, m: number) {\n  return ((n % m) + m) % m;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Mat3Arg } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { Vec2Arg, Vec2Type } from './vec2';\nimport { Vec3Arg } from './vec3';\nimport { BaseArgType } from './types';\n\nexport { Vec2Arg, Vec2Type };\n\ntype Vec2Ctor<T extends Vec2Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl<VecType extends Vec2Arg = Float32Array>(Ctor: Vec2Ctor<VecType>) {\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nfunction create(x = 0, y = 0) {\n  const newDst = new Ctor(2);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec2\n * Also see {@link vec2.create} and {@link vec2.copy}\n *\n * @param x first value\n * @param y second value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec2Arg = VecType>(x: number, y: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec2Arg = VecType>(v: Vec2Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n\n  return newDst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a: Vec2Arg, b: Vec2Arg): number {\n  const ax = a[0];\n  const ay = a[1];\n  const bx = b[0];\n  const by = b[1];\n  const mag1 = Math.sqrt(ax * ax + ay * ay);\n  const mag2 = Math.sqrt(bx * bx + by * by);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec2Arg, b: Vec2Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec2Arg, b: Vec2Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, t: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec2Arg = VecType>(v: Vec2Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec2Arg = VecType>(v: Vec2Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross<T extends Vec3Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const z = a[0] * b[1] - a[1] * b[0];\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = z;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec2Arg, b: Vec2Arg): number {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec2Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return Math.sqrt(v0 * v0 + v1 * v1);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec2Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return v0 * v0 + v1 * v1;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec2Arg, b: Vec2Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec2Arg, b: Vec2Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const len = Math.sqrt(v0 * v0 + v1 * v1);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec2.clone})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec2.copy})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random<T extends Vec2Arg = VecType>(scale = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const angle = Math.random() * 2 * Math.PI;\n  newDst[0] = Math.cos(angle) * scale;\n  newDst[1] = Math.sin(angle) * scale;\n\n  return newDst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec2Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec2Arg = VecType>(v: Vec2Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const x = v[0];\n  const y = v[1];\n\n  newDst[0] = x * m[0] + y * m[4] + m[12];\n  newDst[1] = x * m[1] + y * m[5] + m[13];\n\n  return newDst;\n}\n\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3<T extends Vec2Arg = VecType>(v: Vec2Arg, m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const x = v[0];\n  const y = v[1];\n\n  newDst[0] = m[0] * x + m[4] * y + m[8];\n  newDst[1] = m[1] * x + m[5] * y + m[9];\n\n  return newDst;\n}\n\n/**\n * Rotate a 2D vector\n *\n * @param a The vec2 point to rotate\n * @param b The origin of the rotation\n * @param rad The angle of rotation in radians\n * @returns the rotated vector\n */\nfunction rotate<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  //perform rotation and translate to correct position\n  newDst[0] = p0 * cosC - p1 * sinC + b[0];\n  newDst[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return newDst;\n}\n\n/**\n * Treat a 2D vector as a direction and set it's length\n *\n * @param a The vec2 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec2Arg = VecType>(a: Vec2Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec2 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec2Arg = VecType>(a: Vec2Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  angle,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  cross,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  random,\n  zero,\n  transformMat4,\n  transformMat3,\n  rotate,\n  setLength,\n  truncate,\n  midpoint,\n};\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Vec2Arg = Float32Array>(Ctor: Vec2Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec3Arg, Vec3Type } from './vec3';\nimport { Mat3Arg } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { QuatArg } from './quat';\nimport { BaseArgType } from './types';\n\nexport { Vec3Arg, Vec3Type };\n\ntype Vec3Ctor<T extends Vec3Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl<VecType extends Vec3Arg = Float32Array>(Ctor: Vec3Ctor<VecType>) {\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number) {\n  const newDst = new Ctor(3);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec3\n * Also see {@link vec3.create} and {@link vec3.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec3Arg = VecType>(x: number, y: number, z: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n  newDst[2] = Math.ceil(v[2]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n  newDst[2] = Math.floor(v[2]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n  newDst[2] = Math.round(v[2]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec3Arg = VecType>(v: Vec3Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n  newDst[2] = Math.min(max, Math.max(min, v[2]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n  newDst[2] = a[2] + b[2] * scale;\n\n  return newDst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a: Vec3Arg, b: Vec3Arg): number {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec3Arg, b: Vec3Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec3Arg, b: Vec3Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, t: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n  newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n  newDst[2] = Math.max(a[2], b[2]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n  newDst[2] = Math.min(a[2], b[2]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec3Arg = VecType>(v: Vec3Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec3Arg = VecType>(v: Vec3Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n  newDst[2] = 1 / v[2];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  newDst[0] = a[1] * b[2] - a[2] * b[1];\n  newDst[1] = t1;\n  newDst[2] = t2;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec3Arg, b: Vec3Arg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec3Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec3Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return v0 * v0 + v1 * v1 + v2 * v2;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec3Arg, b: Vec3Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec3Arg, b: Vec3Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n  }\n\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n  newDst[2] = -v[2];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec3.clone})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n  newDst[2] = v[2];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec3.copy})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n  newDst[2] = a[2] * b[2];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n  newDst[2] = a[2] / b[2];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random<T extends Vec3Arg = VecType>(scale = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const angle = Math.random() * 2 * Math.PI;\n  const z = Math.random() * 2 - 1;\n  const zScale = Math.sqrt(1 - z * z) * scale;\n  newDst[0] = Math.cos(angle) * zScale;\n  newDst[1] = Math.sin(angle) * zScale;\n  newDst[2] = z * scale;\n\n  return newDst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec3Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n\n  newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n  return newDst;\n}\n\n/**\n * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nfunction transformMat4Upper3x3<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return newDst;\n}\n\n/**\n * Transforms vec3 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  newDst[0] = x * m[0] + y * m[4] + z * m[8];\n  newDst[1] = x * m[1] + y * m[5] + z * m[9];\n  newDst[2] = x * m[2] + y * m[6] + z * m[10];\n\n  return newDst;\n}\n\n/**\n * Transforms vec3 by Quaternion\n * @param v - the vector to transform\n * @param q - the quaternion to transform by\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed\n */\nfunction transformQuat<T extends Vec3Arg = VecType>(v: Vec3Arg, q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const w2 = q[3] * 2;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  const uvX = qy * z - qz * y;\n  const uvY = qz * x - qx * z;\n  const uvZ = qx * y - qy * x;\n\n  newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n  newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n  newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n\n  return newDst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation<T extends Vec3Arg = VecType>(m: Mat3Arg, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    newDst[0] = m[12];\n    newDst[1] = m[13];\n    newDst[2] = m[14];\n    return newDst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec3Arg = VecType>(m: Mat4Arg, axis: number, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    const off = axis * 4;\n    newDst[0] = m[off + 0];\n    newDst[1] = m[off + 1];\n    newDst[2] = m[off + 2];\n    return newDst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling<T extends Vec3Arg = VecType>(m: Mat4Arg, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return newDst;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nfunction rotateX<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nfunction rotateY<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns {vec3} out\n */\nfunction rotateZ<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Treat a 3D vector as a direction and set it's length\n *\n * @param a The vec3 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec3Arg = VecType>(a: Vec3Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec3 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec3Arg = VecType>(a: Vec3Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  angle,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  cross,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  random,\n  zero,\n  transformMat4,\n  transformMat4Upper3x3,\n  transformMat3,\n  transformQuat,\n  getTranslation,\n  getAxis,\n  getScaling,\n  rotateX,\n  rotateY,\n  rotateZ,\n  setLength,\n  truncate,\n  midpoint,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec3Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport { QuatArg } from './quat';\nimport { Mat3Arg, Mat3Type } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { Vec2Arg } from './vec2';\nimport { Vec3Arg } from './vec3';\nimport { getAPI as getVec2API } from './vec2-impl';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\n\nexport { Mat3Arg, Mat3Type };\n\ntype Mat3Ctor<T extends Mat3Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl<MatType extends Mat3Arg = Float32Array>(Ctor: Mat3Ctor<MatType>) {\n  const vec2 = getVec2API<MatType>(Ctor);\n  const vec3 = getVec3API<MatType>(Ctor);\n\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nfunction create(\n    v0?: number, v1?: number, v2?: number,\n    v3?: number, v4?: number, v5?: number,\n    v6?: number, v7?: number, v8?: number) {\n  const newDst = new Ctor(12);\n  // to make the array homogenous\n  newDst[3] = 0;\n  newDst[7] = 0;\n  newDst[11] = 0;\n\n  if (v0 !== undefined) {\n    newDst[0] = v0;\n    if (v1 !== undefined) {\n      newDst[1] = v1;\n      if (v2 !== undefined) {\n        newDst[2] = v2;\n        if (v3 !== undefined) {\n          newDst[4] = v3;\n          if (v4 !== undefined) {\n            newDst[5] = v4;\n            if (v5 !== undefined) {\n              newDst[6] = v5;\n              if (v6 !== undefined) {\n                newDst[8] = v6;\n                if (v7 !== undefined) {\n                  newDst[9] = v7;\n                  if (v8 !== undefined) {\n                    newDst[10] = v8;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return newDst;\n}\n\n/**\n * Sets the values of a Mat3\n * Also see {@link mat3.create} and {@link mat3.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 set from values.\n */\nfunction set<T extends Mat3Arg = MatType>(\n    v0: number, v1: number, v2: number,\n    v3: number, v4: number, v5: number,\n    v6: number, v7: number, v8: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[0] = v0;  newDst[1] = v1;  newDst[ 2] = v2;  newDst[ 3] = 0;\n  newDst[4] = v3;  newDst[5] = v4;  newDst[ 6] = v5;  newDst[ 7] = 0;\n  newDst[8] = v6;  newDst[9] = v7;  newDst[10] = v8;  newDst[11] = 0;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat3 from the upper left 3x3 part of a Mat4\n * @param m4 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from m4\n */\nfunction fromMat4<T extends Mat3Arg = MatType>(m4: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n  newDst[0] = m4[0];  newDst[1] = m4[1];  newDst[ 2] = m4[ 2];  newDst[ 3] = 0;\n  newDst[4] = m4[4];  newDst[5] = m4[5];  newDst[ 6] = m4[ 6];  newDst[ 7] = 0;\n  newDst[8] = m4[8];  newDst[9] = m4[9];  newDst[10] = m4[10];  newDst[11] = 0;\n  return newDst;\n}\n\n/**\n * Creates a Mat3 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from q\n */\nfunction fromQuat<T extends Mat3Arg = MatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  newDst[ 0] = 1 - yy - zz;  newDst[ 1] = yx + wz;      newDst[ 2] = zx - wy;      newDst[ 3] = 0;\n  newDst[ 4] = yx - wz;      newDst[ 5] = 1 - xx - zz;  newDst[ 6] = zy + wx;      newDst[ 7] = 0;\n  newDst[ 8] = zx + wy;      newDst[ 9] = zy - wx;      newDst[10] = 1 - xx - yy;  newDst[11] = 0;\n\n  return newDst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = -m[ 0];  newDst[ 1] = -m[ 1];  newDst[ 2] = -m[ 2];\n  newDst[ 4] = -m[ 4];  newDst[ 5] = -m[ 5];  newDst[ 6] = -m[ 6];\n  newDst[ 8] = -m[ 8];  newDst[ 9] = -m[ 9];  newDst[10] = -m[10];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat3.clone})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = m[ 0];  newDst[ 1] = m[ 1];  newDst[ 2] = m[ 2];\n  newDst[ 4] = m[ 4];  newDst[ 5] = m[ 5];  newDst[ 6] = m[ 6];\n  newDst[ 8] = m[ 8];  newDst[ 9] = m[ 9];  newDst[10] = m[10];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix (same as {@link mat3.copy})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately(a: Mat3Arg, b: Mat3Arg): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals(a: Mat3Arg, b: Mat3Arg): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10];\n}\n\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nfunction identity<T extends Mat3Arg = MatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = 1;  newDst[ 1] = 0;  newDst[ 2] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n  if (newDst === m) {\n    let t: number;\n\n    // 0 1 2\n    // 4 5 6\n    // 8 9 10\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    return newDst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  newDst[ 0] = m00;  newDst[ 1] = m10;  newDst[ 2] = m20;\n  newDst[ 4] = m01;  newDst[ 5] = m11;  newDst[ 6] = m21;\n  newDst[ 8] = m02;  newDst[ 9] = m12;  newDst[10] = m22;\n\n  return newDst;\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  const b01 =  m22 * m11 - m12 * m21;\n  const b11 = -m22 * m10 + m12 * m20;\n  const b21 =  m21 * m10 - m11 * m20;\n\n  const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n\n  newDst[ 0] = b01 * invDet;\n  newDst[ 1] = (-m22 * m01 + m02 * m21) * invDet;\n  newDst[ 2] = ( m12 * m01 - m02 * m11) * invDet;\n  newDst[ 4] = b11 * invDet;\n  newDst[ 5] = ( m22 * m00 - m02 * m20) * invDet;\n  newDst[ 6] = (-m12 * m00 + m02 * m10) * invDet;\n  newDst[ 8] = b21 * invDet;\n  newDst[ 9] = (-m21 * m00 + m01 * m20) * invDet;\n  newDst[10] = ( m11 * m00 - m01 * m10) * invDet;\n\n  return newDst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m: Mat3Arg): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  return m00 * (m11 * m22 - m21 * m12) -\n         m10 * (m01 * m22 - m21 * m02) +\n         m20 * (m01 * m12 - m11 * m02);\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert = inverse;\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply<T extends Mat3Arg = MatType>(a: Mat3Arg, b: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n\n  newDst[ 0] = a00 * b00 + a10 * b01 + a20 * b02;\n  newDst[ 1] = a01 * b00 + a11 * b01 + a21 * b02;\n  newDst[ 2] = a02 * b00 + a12 * b01 + a22 * b02;\n  newDst[ 4] = a00 * b10 + a10 * b11 + a20 * b12;\n  newDst[ 5] = a01 * b10 + a11 * b11 + a21 * b12;\n  newDst[ 6] = a02 * b10 + a12 * b11 + a22 * b12;\n  newDst[ 8] = a00 * b20 + a10 * b21 + a20 * b22;\n  newDst[ 9] = a01 * b20 + a11 * b21 + a21 * b22;\n  newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\n  return newDst;\n}\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul = multiply;\n\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation<T extends Mat3Arg = MatType>(a: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? identity()) as T;\n  if (a !== newDst) {\n    newDst[ 0] = a[ 0];\n    newDst[ 1] = a[ 1];\n    newDst[ 2] = a[ 2];\n    newDst[ 4] = a[ 4];\n    newDst[ 5] = a[ 5];\n    newDst[ 6] = a[ 6];\n  }\n  newDst[ 8] = v[0];\n  newDst[ 9] = v[1];\n  newDst[10] = 1;\n  return newDst;\n}\n\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation<T extends Vec2Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec2.create()) as T;\n  newDst[0] = m[8];\n  newDst[1] = m[9];\n  return newDst;\n}\n\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec2Arg = MatType>(m: Mat3Arg, axis: number, dst?: T) {\n  const newDst = (dst ?? vec2.create()) as T;\n  const off = axis * 4;\n  newDst[0] = m[off + 0];\n  newDst[1] = m[off + 1];\n  return newDst;\n}\n\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, axis: number, dst?: T) {\n  const newDst = (dst === m ? m : copy(m, dst)) as T;\n\n  const off = axis * 4;\n  newDst[off + 0] = v[0];\n  newDst[off + 1] = v[1];\n  return newDst;\n}\n\n/**\n * Returns the \"2d\" scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling<T extends Vec2Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec2.create());\n\n  const xx = m[0];\n  const xy = m[1];\n  const yx = m[4];\n  const yy = m[5];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy);\n\n  return newDst;\n}\n\n\n/**\n * Returns the \"3d\" scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction get3DScaling<T extends Vec3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create());\n\n  const xx = m[0];\n  const xy = m[1];\n  const xz = m[2];\n  const yx = m[4];\n  const yy = m[5];\n  const yz = m[6];\n  const zx = m[8];\n  const zy = m[9];\n  const zz = m[10];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n  newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation<T extends Mat3Arg = MatType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = 1;     newDst[ 1] = 0;     newDst[ 2] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = 1;     newDst[ 6] = 0;\n  newDst[ 8] = v[0];  newDst[ 9] = v[1];  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 0] = m00;\n    newDst[ 1] = m01;\n    newDst[ 2] = m02;\n    newDst[ 4] = m10;\n    newDst[ 5] = m11;\n    newDst[ 6] = m12;\n  }\n\n  newDst[ 8] = m00 * v0 + m10 * v1 + m20;\n  newDst[ 9] = m01 * v0 + m11 * v1 + m21;\n  newDst[10] = m02 * v0 + m12 * v1 + m22;\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotation<T extends Mat3Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] =  c;  newDst[ 1] = s;  newDst[ 2] = 0;\n  newDst[ 4] = -s;  newDst[ 5] = c;  newDst[ 6] = 0;\n  newDst[ 8] =  0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotate<T extends Mat3Arg = MatType>(m: Mat3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 + s * m10;\n  newDst[ 1] = c * m01 + s * m11;\n  newDst[ 2] = c * m02 + s * m12;\n\n  newDst[ 4] = c * m10 - s * m00;\n  newDst[ 5] = c * m11 - s * m01;\n  newDst[ 6] = c * m12 - s * m02;\n\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling<T extends Mat3Arg = MatType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = v[0];  newDst[ 1] = 0;     newDst[ 2] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = v[1];  newDst[ 6] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  newDst[ 0] = v0 * m[0 * 4 + 0];\n  newDst[ 1] = v0 * m[0 * 4 + 1];\n  newDst[ 2] = v0 * m[0 * 4 + 2];\n\n  newDst[ 4] = v1 * m[1 * 4 + 0];\n  newDst[ 5] = v1 * m[1 * 4 + 1];\n  newDst[ 6] = v1 * m[1 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales uniformly in each dimension\n * @param s - Amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling<T extends Mat3Arg = MatType>(s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = s;  newDst[ 1] = 0;  newDst[ 2] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = s;  newDst[ 6] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given.\n * @param m - The matrix to be modified.\n * @param s - Amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale<T extends Mat3Arg = MatType>(m: Mat3Arg, s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = s * m[0 * 4 + 0];\n  newDst[ 1] = s * m[0 * 4 + 1];\n  newDst[ 2] = s * m[0 * 4 + 2];\n\n  newDst[ 4] = s * m[1 * 4 + 0];\n  newDst[ 5] = s * m[1 * 4 + 1];\n  newDst[ 6] = s * m[1 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\nreturn {\n  clone,\n  create,\n  set,\n  fromMat4,\n  fromQuat,\n  negate,\n  copy,\n  equalsApproximately,\n  equals,\n  identity,\n  transpose,\n  inverse,\n  invert,\n  determinant,\n  mul,\n  multiply,\n  setTranslation,\n  getTranslation,\n  getAxis,\n  setAxis,\n  getScaling,\n  get3DScaling,\n  translation,\n  translate,\n  rotation,\n  rotate,\n  scaling,\n  scale,\n  uniformScaling,\n  uniformScale,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat3Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","import { Mat4Arg, Mat4Type } from './mat4';\nimport { Mat3Arg } from './mat3';\nimport { QuatArg } from './quat';\nimport { Vec3Arg } from './vec3';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\nimport * as utils from './utils';\n\nexport { Mat4Arg, Mat4Type };\n\ntype Mat4Ctor<T extends Mat4Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl<MatType extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<MatType>) {\n  const vec3 = getVec3API<MatType>(Ctor);\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\n\n\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nfunction create(\n    v0?: number, v1?: number, v2?: number, v3?: number,\n    v4?: number, v5?: number, v6?: number, v7?: number,\n    v8?: number, v9?: number, v10?: number, v11?: number,\n    v12?: number, v13?: number, v14?: number, v15?: number) {\n  const newDst = new Ctor(16);\n  if (v0 !== undefined) {\n    newDst[0] = v0;\n    if (v1 !== undefined) {\n      newDst[1] = v1;\n      if (v2 !== undefined) {\n        newDst[2] = v2;\n        if (v3 !== undefined) {\n          newDst[3] = v3;\n          if (v4 !== undefined) {\n            newDst[4] = v4;\n            if (v5 !== undefined) {\n              newDst[5] = v5;\n              if (v6 !== undefined) {\n                newDst[6] = v6;\n                if (v7 !== undefined) {\n                  newDst[7] = v7;\n                  if (v8 !== undefined) {\n                    newDst[8] = v8;\n                    if (v9 !== undefined) {\n                      newDst[9] = v9;\n                      if (v10 !== undefined) {\n                        newDst[10] = v10;\n                        if (v11 !== undefined) {\n                          newDst[11] = v11;\n                          if (v12 !== undefined) {\n                            newDst[12] = v12;\n                            if (v13 !== undefined) {\n                              newDst[13] = v13;\n                              if (v14 !== undefined) {\n                                newDst[14] = v14;\n                                if (v15 !== undefined) {\n                                  newDst[15] = v15;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Sets the values of a Mat4\n * Also see {@link mat4.create} and {@link mat4.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 created from values.\n */\nfunction set<T extends Mat4Arg = MatType>(\n    v0: number, v1: number, v2: number, v3: number,\n    v4: number, v5: number, v6: number, v7: number,\n    v8: number, v9: number, v10: number, v11: number,\n    v12: number, v13: number, v14: number, v15: number,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = v0;   newDst[ 1] = v1;   newDst[ 2] = v2;   newDst[ 3] = v3;\n  newDst[ 4] = v4;   newDst[ 5] = v5;   newDst[ 6] = v6;   newDst[ 7] = v7;\n  newDst[ 8] = v8;   newDst[ 9] = v9;   newDst[10] = v10;  newDst[11] = v11;\n  newDst[12] = v12;  newDst[13] = v13;  newDst[14] = v14;  newDst[15] = v15;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat4 from a Mat3\n * @param m3 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from m3\n */\nfunction fromMat3<T extends Mat4Arg = MatType>(m3: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = m3[0];  newDst[ 1] = m3[1];  newDst[ 2] = m3[ 2];  newDst[ 3] = 0;\n  newDst[ 4] = m3[4];  newDst[ 5] = m3[5];  newDst[ 6] = m3[ 6];  newDst[ 7] = 0;\n  newDst[ 8] = m3[8];  newDst[ 9] = m3[9];  newDst[10] = m3[10];  newDst[11] = 0;\n  newDst[12] = 0;      newDst[13] = 0;      newDst[14] = 0;       newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat4 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from q\n */\nfunction fromQuat<T extends Mat4Arg = MatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  newDst[ 0] = 1 - yy - zz;  newDst[ 1] = yx + wz;      newDst[ 2] = zx - wy;      newDst[ 3] = 0;\n  newDst[ 4] = yx - wz;      newDst[ 5] = 1 - xx - zz;  newDst[ 6] = zy + wx;      newDst[ 7] = 0;\n  newDst[ 8] = zx + wy;      newDst[ 9] = zy - wx;      newDst[10] = 1 - xx - yy;  newDst[11] = 0;\n  newDst[12] = 0;            newDst[13] = 0;            newDst[14] = 0;            newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = -m[ 0];  newDst[ 1] = -m[ 1];  newDst[ 2] = -m[ 2];  newDst[ 3] = -m[ 3];\n  newDst[ 4] = -m[ 4];  newDst[ 5] = -m[ 5];  newDst[ 6] = -m[ 6];  newDst[ 7] = -m[ 7];\n  newDst[ 8] = -m[ 8];  newDst[ 9] = -m[ 9];  newDst[10] = -m[10];  newDst[11] = -m[11];\n  newDst[12] = -m[12];  newDst[13] = -m[13];  newDst[14] = -m[14];  newDst[15] = -m[15];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat4.clone})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = m[ 0];  newDst[ 1] = m[ 1];  newDst[ 2] = m[ 2];  newDst[ 3] = m[ 3];\n  newDst[ 4] = m[ 4];  newDst[ 5] = m[ 5];  newDst[ 6] = m[ 6];  newDst[ 7] = m[ 7];\n  newDst[ 8] = m[ 8];  newDst[ 9] = m[ 9];  newDst[10] = m[10];  newDst[11] = m[11];\n  newDst[12] = m[12];  newDst[13] = m[13];  newDst[14] = m[14];  newDst[15] = m[15];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix (same as {@link mat4.copy})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately(a: Mat4Arg, b: Mat4Arg): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 3] - b[ 3]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 7] - b[ 7]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON &&\n         Math.abs(a[11] - b[11]) < utils.EPSILON &&\n         Math.abs(a[12] - b[12]) < utils.EPSILON &&\n         Math.abs(a[13] - b[13]) < utils.EPSILON &&\n         Math.abs(a[14] - b[14]) < utils.EPSILON &&\n         Math.abs(a[15] - b[15]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals(a: Mat4Arg, b: Mat4Arg): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 3] === b[ 3] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 7] === b[ 7] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10] &&\n         a[11] === b[11] &&\n         a[12] === b[12] &&\n         a[13] === b[13] &&\n         a[14] === b[14] &&\n         a[15] === b[15];\n}\n\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nfunction identity<T extends Mat4Arg = MatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = 1;  newDst[ 1] = 0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n  if (newDst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return newDst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  newDst[ 0] = m00;  newDst[ 1] = m10;  newDst[ 2] = m20;  newDst[ 3] = m30;\n  newDst[ 4] = m01;  newDst[ 5] = m11;  newDst[ 6] = m21;  newDst[ 7] = m31;\n  newDst[ 8] = m02;  newDst[ 9] = m12;  newDst[10] = m22;  newDst[11] = m32;\n  newDst[12] = m03;  newDst[13] = m13;  newDst[14] = m23;  newDst[15] = m33;\n\n  return newDst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n  const tmp12 = m20 * m31;\n  const tmp13 = m30 * m21;\n  const tmp14 = m10 * m31;\n  const tmp15 = m30 * m11;\n  const tmp16 = m10 * m21;\n  const tmp17 = m20 * m11;\n  const tmp18 = m00 * m31;\n  const tmp19 = m30 * m01;\n  const tmp20 = m00 * m21;\n  const tmp21 = m20 * m01;\n  const tmp22 = m00 * m11;\n  const tmp23 = m10 * m01;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n      (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n      (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n      (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n      (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  newDst[ 0] = d * t0;\n  newDst[ 1] = d * t1;\n  newDst[ 2] = d * t2;\n  newDst[ 3] = d * t3;\n  newDst[ 4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n          (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n  newDst[ 5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n          (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n  newDst[ 6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n          (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n  newDst[ 7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n          (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n  newDst[ 8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n          (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n  newDst[ 9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n          (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n  newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n          (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n  newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n          (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n  newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n          (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n  newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n          (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n  newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n          (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n  newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n          (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n\n  return newDst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m: Mat4Arg): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n             (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n             (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n             (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n             (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert = inverse;\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply<T extends Mat4Arg = MatType>(a: Mat4Arg, b: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  newDst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  newDst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  newDst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  newDst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  newDst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  newDst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  newDst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  newDst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  newDst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  newDst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return newDst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul = multiply;\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation<T extends Mat4Arg = MatType>(a: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? identity()) as T;\n  if (a !== newDst) {\n    newDst[ 0] = a[ 0];\n    newDst[ 1] = a[ 1];\n    newDst[ 2] = a[ 2];\n    newDst[ 3] = a[ 3];\n    newDst[ 4] = a[ 4];\n    newDst[ 5] = a[ 5];\n    newDst[ 6] = a[ 6];\n    newDst[ 7] = a[ 7];\n    newDst[ 8] = a[ 8];\n    newDst[ 9] = a[ 9];\n    newDst[10] = a[10];\n    newDst[11] = a[11];\n  }\n  newDst[12] = v[0];\n  newDst[13] = v[1];\n  newDst[14] = v[2];\n  newDst[15] = 1;\n  return newDst;\n}\n\n///**\n// * Returns the translation component of a 4-by-4 matrix as a vector with 3\n// * entries.\n// * @param m - The matrix.\n// * @param dst - vector to hold result. If not passed a new one is created.\n// * @returns The translation component of m.\n// */\nfunction getTranslation<T extends Vec3Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create()) as T;\n  newDst[0] = m[12];\n  newDst[1] = m[13];\n  newDst[2] = m[14];\n  return newDst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec3Arg = MatType>(m: Mat4Arg, axis: number, dst?: T) {\n  const newDst = (dst ?? vec3.create());\n  const off = axis * 4;\n  newDst[0] = m[off + 0];\n  newDst[1] = m[off + 1];\n  newDst[2] = m[off + 2];\n  return newDst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, axis: number, dst: T) {\n  const newDst = (dst === m) ? dst : copy(m, dst);\n\n  const off = axis * 4;\n  newDst[off + 0] = v[0];\n  newDst[off + 1] = v[1];\n  newDst[off + 2] = v[2];\n  return newDst;\n}\n\n/**\n * Returns the \"3d\" scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling<T extends Vec3Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create()) as T;\n\n  const xx = m[0];\n  const xy = m[1];\n  const xz = m[2];\n  const yx = m[4];\n  const yy = m[5];\n  const yz = m[6];\n  const zx = m[8];\n  const zy = m[9];\n  const zz = m[10];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n  newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n *\n * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n * otherwise.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nfunction perspective<T extends Mat4Arg = MatType>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\n  newDst[0]  = f / aspect;\n  newDst[1]  = 0;\n  newDst[2]  = 0;\n  newDst[3]  = 0;\n\n  newDst[4]  = 0;\n  newDst[5]  = f;\n  newDst[6]  = 0;\n  newDst[7]  = 0;\n\n  newDst[8]  = 0;\n  newDst[9]  = 0;\n  newDst[11] = -1;\n\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (Number.isFinite(zFar)) {\n    const rangeInv = 1 / (zNear - zFar);\n    newDst[10] = zFar * rangeInv;\n    newDst[14] = zFar * zNear * rangeInv;\n  } else {\n    newDst[10] = -1;\n    newDst[14] = -zNear;\n  }\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane. (default = Infinity)\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */function perspectiveReverseZ<T extends Mat4Arg = MatType>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar = Infinity, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n\n  newDst[ 0] = f / aspect;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n\n  newDst[ 4] = 0;\n  newDst[ 5] = f;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n\n  newDst[ 8] = 0;\n  newDst[ 9] = 0;\n  newDst[11] = -1;\n\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (zFar === Infinity) {\n    newDst[10] = 0;\n    newDst[14] = zNear;\n  } else {\n    const rangeInv = 1 / (zFar - zNear);\n    newDst[10] = zNear * rangeInv;\n    newDst[14] = zFar * zNear * rangeInv;\n  }\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The orthographic projection matrix.\n */\nfunction ortho<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[0]  = 2 / (right - left);\n  newDst[1]  = 0;\n  newDst[2]  = 0;\n  newDst[3]  = 0;\n\n  newDst[4]  = 0;\n  newDst[5]  = 2 / (top - bottom);\n  newDst[6]  = 0;\n  newDst[7]  = 0;\n\n  newDst[8]  = 0;\n  newDst[9]  = 0;\n  newDst[10] = 1 / (near - far);\n  newDst[11] = 0;\n\n  newDst[12] = (right + left) / (left - right);\n  newDst[13] = (top + bottom) / (bottom - top);\n  newDst[14] = near / (near - far);\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustum<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  newDst[ 0] = 2 * near / dx;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n  newDst[ 4] = 0;\n  newDst[ 5] = 2 * near / dy;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n  newDst[ 8] = (left + right) / dx;\n  newDst[ 9] = (top + bottom) / dy;\n  newDst[10] = far / dz;\n  newDst[11] = -1;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[14] = near * far / dz;\n  newDst[15] = 0;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustumReverseZ<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far = Infinity, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n\n  newDst[ 0] = 2 * near / dx;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n  newDst[ 4] = 0;\n  newDst[ 5] = 2 * near / dy;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n  newDst[ 8] = (left + right) / dx;\n  newDst[ 9] = (top + bottom) / dy;\n  newDst[11] = -1;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (far === Infinity) {\n    newDst[10] = 0;\n    newDst[14] = near;\n  } else {\n    const rangeInv = 1 / (far - near);\n    newDst[10] = near * rangeInv;\n    newDst[14] = far * near * rangeInv;\n  }\n\n  return newDst;\n}\n\nconst xAxis = vec3.create();\nconst yAxis = vec3.create();\nconst zAxis = vec3.create();\n\n/**\n * Computes a 4-by-4 aim transformation.\n *\n * This is a matrix which positions an object aiming down positive Z.\n * toward the target.\n *\n * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n *\n * @param position - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction aim<T extends Mat4Arg = MatType>(position: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];     newDst[ 1] = xAxis[1];     newDst[ 2] = xAxis[2];     newDst[ 3] = 0;\n  newDst[ 4] = yAxis[0];     newDst[ 5] = yAxis[1];     newDst[ 6] = yAxis[2];     newDst[ 7] = 0;\n  newDst[ 8] = zAxis[0];     newDst[ 9] = zAxis[1];     newDst[10] = zAxis[2];     newDst[11] = 0;\n  newDst[12] = position[0];  newDst[13] = position[1];  newDst[14] = position[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 camera aim transformation.\n *\n * This is a matrix which positions an object aiming down negative Z.\n * toward the target.\n *\n * Note: this is the inverse of `lookAt`\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction cameraAim<T extends Mat4Arg = MatType>(eye: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];     newDst[ 1] = xAxis[1];     newDst[ 2] = xAxis[2];     newDst[ 3] = 0;\n  newDst[ 4] = yAxis[0];     newDst[ 5] = yAxis[1];     newDst[ 6] = yAxis[2];     newDst[ 7] = 0;\n  newDst[ 8] = zAxis[0];     newDst[ 9] = zAxis[1];     newDst[10] = zAxis[2];     newDst[11] = 0;\n  newDst[12] = eye[0];  newDst[13] = eye[1];  newDst[14] = eye[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 view transformation.\n *\n * This is a view matrix which transforms all other objects\n * to be in the space of the view defined by the parameters.\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nfunction lookAt<T extends Mat4Arg = MatType>(eye: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];  newDst[ 1] = yAxis[0];  newDst[ 2] = zAxis[0];  newDst[ 3] = 0;\n  newDst[ 4] = xAxis[1];  newDst[ 5] = yAxis[1];  newDst[ 6] = zAxis[1];  newDst[ 7] = 0;\n  newDst[ 8] = xAxis[2];  newDst[ 9] = yAxis[2];  newDst[10] = zAxis[2];  newDst[11] = 0;\n\n  newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n  newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n  newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation<T extends Mat4Arg = MatType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = 1;     newDst[ 1] = 0;     newDst[ 2] = 0;     newDst[ 3] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = 1;     newDst[ 6] = 0;     newDst[ 7] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = 1;     newDst[11] = 0;\n  newDst[12] = v[0];  newDst[13] = v[1];  newDst[14] = v[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[ 0] = m00;\n    newDst[ 1] = m01;\n    newDst[ 2] = m02;\n    newDst[ 3] = m03;\n    newDst[ 4] = m10;\n    newDst[ 5] = m11;\n    newDst[ 6] = m12;\n    newDst[ 7] = m13;\n    newDst[ 8] = m20;\n    newDst[ 9] = m21;\n    newDst[10] = m22;\n    newDst[11] = m23;\n  }\n\n  newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationX<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = 1;  newDst[ 1] =  0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] =  c;  newDst[ 6] = s;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = -s;  newDst[10] = c;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] =  0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateX<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[4]  = c * m10 + s * m20;\n  newDst[5]  = c * m11 + s * m21;\n  newDst[6]  = c * m12 + s * m22;\n  newDst[7]  = c * m13 + s * m23;\n  newDst[8]  = c * m20 - s * m10;\n  newDst[9]  = c * m21 - s * m11;\n  newDst[10] = c * m22 - s * m12;\n  newDst[11] = c * m23 - s * m13;\n\n  if (m !== newDst) {\n    newDst[ 0] = m[ 0];\n    newDst[ 1] = m[ 1];\n    newDst[ 2] = m[ 2];\n    newDst[ 3] = m[ 3];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationY<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c;  newDst[ 1] = 0;  newDst[ 2] = -s;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] =  0;  newDst[ 7] = 0;\n  newDst[ 8] = s;  newDst[ 9] = 0;  newDst[10] =  c;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] =  0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateY<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 - s * m20;\n  newDst[ 1] = c * m01 - s * m21;\n  newDst[ 2] = c * m02 - s * m22;\n  newDst[ 3] = c * m03 - s * m23;\n  newDst[ 8] = c * m20 + s * m00;\n  newDst[ 9] = c * m21 + s * m01;\n  newDst[10] = c * m22 + s * m02;\n  newDst[11] = c * m23 + s * m03;\n\n  if (m !== newDst) {\n    newDst[ 4] = m[ 4];\n    newDst[ 5] = m[ 5];\n    newDst[ 6] = m[ 6];\n    newDst[ 7] = m[ 7];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationZ<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] =  c;  newDst[ 1] = s;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = -s;  newDst[ 5] = c;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] =  0;  newDst[ 9] = 0;  newDst[10] = 1;  newDst[11] = 0;\n  newDst[12] =  0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateZ<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 + s * m10;\n  newDst[ 1] = c * m01 + s * m11;\n  newDst[ 2] = c * m02 + s * m12;\n  newDst[ 3] = c * m03 + s * m13;\n  newDst[ 4] = c * m10 - s * m00;\n  newDst[ 5] = c * m11 - s * m01;\n  newDst[ 6] = c * m12 - s * m02;\n  newDst[ 7] = c * m13 - s * m03;\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n    newDst[11] = m[11];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nfunction axisRotation<T extends Mat4Arg = MatType>(axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  newDst[ 0] = xx + (1 - xx) * c;\n  newDst[ 1] = x * y * oneMinusCosine + z * s;\n  newDst[ 2] = x * z * oneMinusCosine - y * s;\n  newDst[ 3] = 0;\n  newDst[ 4] = x * y * oneMinusCosine - z * s;\n  newDst[ 5] = yy + (1 - yy) * c;\n  newDst[ 6] = y * z * oneMinusCosine + x * s;\n  newDst[ 7] = 0;\n  newDst[ 8] = x * z * oneMinusCosine + y * s;\n  newDst[ 9] = y * z * oneMinusCosine - x * s;\n  newDst[10] = zz + (1 - zz) * c;\n  newDst[11] = 0;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[14] = 0;\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nconst rotation = axisRotation;\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction axisRotate<T extends Mat4Arg = MatType>(m: Mat4Arg, axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  newDst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  newDst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  newDst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  newDst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  newDst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  newDst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  newDst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  newDst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  newDst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  newDst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nconst rotate = axisRotate;\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling<T extends Mat4Arg = MatType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = v[0];  newDst[ 1] = 0;     newDst[ 2] = 0;     newDst[ 3] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = v[1];  newDst[ 6] = 0;     newDst[ 7] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = v[2];  newDst[11] = 0;\n  newDst[12] = 0;     newDst[13] = 0;     newDst[14] = 0;     newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  newDst[ 0] = v0 * m[0 * 4 + 0];\n  newDst[ 1] = v0 * m[0 * 4 + 1];\n  newDst[ 2] = v0 * m[0 * 4 + 2];\n  newDst[ 3] = v0 * m[0 * 4 + 3];\n  newDst[ 4] = v1 * m[1 * 4 + 0];\n  newDst[ 5] = v1 * m[1 * 4 + 1];\n  newDst[ 6] = v1 * m[1 * 4 + 2];\n  newDst[ 7] = v1 * m[1 * 4 + 3];\n  newDst[ 8] = v2 * m[2 * 4 + 0];\n  newDst[ 9] = v2 * m[2 * 4 + 1];\n  newDst[10] = v2 * m[2 * 4 + 2];\n  newDst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n * @param s - the amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling<T extends Mat4Arg = MatType>(s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = s;  newDst[ 1] = 0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = s;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = s;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n * @param m - The matrix to be modified.\n * @param s - The amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale<T extends Mat4Arg = MatType>(m: Mat4Arg, s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = s * m[0 * 4 + 0];\n  newDst[ 1] = s * m[0 * 4 + 1];\n  newDst[ 2] = s * m[0 * 4 + 2];\n  newDst[ 3] = s * m[0 * 4 + 3];\n  newDst[ 4] = s * m[1 * 4 + 0];\n  newDst[ 5] = s * m[1 * 4 + 1];\n  newDst[ 6] = s * m[1 * 4 + 2];\n  newDst[ 7] = s * m[1 * 4 + 3];\n  newDst[ 8] = s * m[2 * 4 + 0];\n  newDst[ 9] = s * m[2 * 4 + 1];\n  newDst[10] = s * m[2 * 4 + 2];\n  newDst[11] = s * m[2 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\nreturn {\n  create,\n  set,\n  fromMat3,\n  fromQuat,\n  negate,\n  copy,\n  clone,\n  equalsApproximately,\n  equals,\n  identity,\n  transpose,\n  inverse,\n  determinant,\n  invert,\n  multiply,\n  mul,\n  setTranslation,\n  getTranslation,\n  getAxis,\n  setAxis,\n  getScaling,\n  perspective,\n  perspectiveReverseZ,\n  ortho,\n  frustum,\n  frustumReverseZ,\n  aim,\n  cameraAim,\n  lookAt,\n  translation,\n  translate,\n  rotationX,\n  rotateX,\n  rotationY,\n  rotateY,\n  rotationZ,\n  rotateZ,\n  axisRotation,\n  rotation,\n  axisRotate,\n  rotate,\n  scaling,\n  scale,\n  uniformScaling,\n  uniformScale,\n};\n\n}\n\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { QuatArg, QuatType } from './quat';\nimport { Mat3Arg } from './mat3.js';\nimport { Mat4Arg } from './mat4.js';\nimport { Vec3Arg } from './vec3.js';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\n\nexport { QuatArg, QuatType };\n\ntype QuatCtor<T extends QuatArg = Float32Array>  = new (n: number) => T;\n\nexport type RotationOrder =  'xyz' |  'xzy' |  'yxz' |  'yzx' |  'zxy' |  'zyx';\n\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl<QuatType extends QuatArg = Float32Array>(Ctor: QuatCtor<QuatType>) {\n  const vec3 = getVec3API<QuatType>(Ctor);\n\n/**\n * Creates a quat4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number, w?: number) {\n  const newDst = new Ctor(4);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n        if (w !== undefined) {\n          newDst[3] = w;\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Quat\n * Also see {@link quat.create} and {@link quat.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends QuatArg = QuatType>(x: number, y: number, z: number, w: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n  newDst[3] = w;\n\n  return newDst;\n}\n\n/**\n * Sets a quaternion from the given angle and  axis,\n * then returns it.\n *\n * @param axis - the axis to rotate around\n * @param angleInRadians - the angle\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The quaternion that represents the given axis and angle\n **/\nfunction fromAxisAngle<T extends QuatArg = QuatType>(axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n  const s = Math.sin(halfAngle);\n\n  newDst[0] = s * axis[0];\n  newDst[1] = s * axis[1];\n  newDst[2] = s * axis[2];\n  newDst[3] = Math.cos(halfAngle);\n\n  return newDst;\n}\n\n/**\n * Gets the rotation axis and angle\n * @param q - quaternion to compute from\n * @param dst - Vec3 to hold result. If not passed in a new one is created.\n * @return angle and axis\n */\nfunction toAxisAngle<T extends Vec3Arg = QuatType>(q: QuatArg, dst?: T): { angle: number, axis: T } {\n  const newDst = (dst ?? vec3.create(3)) as T;\n\n  const angle = Math.acos(q[3]) * 2;\n  const s = Math.sin(angle * 0.5);\n  if (s > utils.EPSILON) {\n    newDst[0] = q[0] / s;\n    newDst[1] = q[1] / s;\n    newDst[2] = q[2] / s;\n  } else {\n    newDst[0] = 1;\n    newDst[1] = 0;\n    newDst[2] = 0;\n  }\n\n  return { angle, axis: newDst };\n}\n\n/**\n * Returns the angle in degrees between two rotations a and b.\n * @param a - quaternion a\n * @param b - quaternion b\n * @return angle in radians between the two quaternions\n */\nfunction angle(a: QuatArg, b: QuatArg) {\n  const d = dot(a, b);\n  return Math.acos(2 * d * d - 1);\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction multiply<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n  newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n  newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n  newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return newDst;\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nconst mul = multiply;\n\n/**\n * Rotates the given quaternion around the X axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateX<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bx = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw + qw * bx;\n  newDst[1] = qy * bw + qz * bx;\n  newDst[2] = qz * bw - qy * bx;\n  newDst[3] = qw * bw - qx * bx;\n\n  return newDst;\n}\n\n/**\n * Rotates the given quaternion around the Y axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateY<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const by = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw - qz * by;\n  newDst[1] = qy * bw + qw * by;\n  newDst[2] = qz * bw + qx * by;\n  newDst[3] = qw * bw - qy * by;\n\n  return newDst;\n}\n\n/**\n * Rotates the given quaternion around the Z axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateZ<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bz = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw + qy * bz;\n  newDst[1] = qy * bw - qx * bz;\n  newDst[2] = qz * bw + qw * bz;\n  newDst[3] = qw * bw - qz * bz;\n\n  return newDst;\n}\n\n/**\n * Spherically linear interpolate between two quaternions\n *\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction slerp<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n\n  if (cosOmega < 0) {\n    cosOmega = -cosOmega;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n\n  let scale0;\n  let scale1;\n\n  if (1.0 - cosOmega > utils.EPSILON) {\n    const omega = Math.acos(cosOmega);\n    const sinOmega = Math.sin(omega);\n    scale0 = Math.sin((1 - t) * omega) / sinOmega;\n    scale1 = Math.sin(t * omega) / sinOmega;\n  } else {\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n\n  newDst[0] = scale0 * ax + scale1 * bx;\n  newDst[1] = scale0 * ay + scale1 * by;\n  newDst[2] = scale0 * az + scale1 * bz;\n  newDst[3] = scale0 * aw + scale1 * bw;\n\n  return newDst;\n}\n\n/**\n * Compute the inverse of a quaternion\n *\n * @param q - quaternion to compute the inverse of\n * @returns A quaternion that is the result of a * b\n */\nfunction inverse<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const a0 = q[0];\n  const a1 = q[1];\n  const a2 = q[2];\n  const a3 = q[3];\n\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1 / dot : 0;\n\n  newDst[0] = -a0 * invDot;\n  newDst[1] = -a1 * invDot;\n  newDst[2] = -a2 * invDot;\n  newDst[3] =  a3 * invDot;\n\n  return newDst;\n}\n\n/**\n * Compute the conjugate of a quaternion\n * For quaternions with a magnitude of 1 (a unit quaternion)\n * this returns the same as the inverse but is faster to calculate.\n *\n * @param q - quaternion to compute the conjugate of.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The conjugate of q\n */\nfunction conjugate<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = -q[0];\n  newDst[1] = -q[1];\n  newDst[2] = -q[2];\n  newDst[3] =  q[3];\n\n  return newDst;\n}\n\n/**\n * Creates a quaternion from the given rotation matrix.\n *\n * The created quaternion is not normalized.\n *\n * @param m - rotation matrix\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction fromMat<T extends QuatArg = QuatType>(m: Mat3Arg | Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  /*\n  0 1 2\n  3 4 5\n  6 7 8\n\n  0 1 2\n  4 5 6\n  8 9 10\n   */\n\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const trace = m[0] + m[5] + m[10];\n\n  if (trace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    const root = Math.sqrt(trace + 1); // 2w\n    newDst[3] = 0.5 * root;\n    const invRoot = 0.5 / root; // 1/(4w)\n\n    newDst[0] = (m[6] - m[9]) * invRoot;\n    newDst[1] = (m[8] - m[2]) * invRoot;\n    newDst[2] = (m[1] - m[4]) * invRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n\n    if (m[5] > m[0]) {\n      i = 1;\n    }\n    if (m[10] > m[i * 4 + i]) {\n      i = 2;\n    }\n\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n    newDst[i] = 0.5 * root;\n\n    const invRoot = 0.5 / root;\n\n    newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n    newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n    newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param xAngleInRadians - angle to rotate around X axis in radians.\n * @param yAngleInRadians - angle to rotate around Y axis in radians.\n * @param zAngleInRadians - angle to rotate around Z axis in radians.\n * @param order - order to apply euler angles\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n */\nfunction fromEuler<T extends QuatArg = QuatType>(\n    xAngleInRadians: number,\n    yAngleInRadians: number,\n    zAngleInRadians: number,\n    order: RotationOrder,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const xHalfAngle = xAngleInRadians * 0.5;\n  const yHalfAngle = yAngleInRadians * 0.5;\n  const zHalfAngle = zAngleInRadians * 0.5;\n\n  const sx = Math.sin(xHalfAngle);\n  const cx = Math.cos(xHalfAngle);\n  const sy = Math.sin(yHalfAngle);\n  const cy = Math.cos(yHalfAngle);\n  const sz = Math.sin(zHalfAngle);\n  const cz = Math.cos(zHalfAngle);\n\n  switch (order) {\n    case 'xyz':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'xzy':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yxz':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yzx':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zxy':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zyx':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    default:\n      throw new Error(`Unknown rotation order: ${order}`);\n  }\n\n  return newDst;\n}\n\n/**\n * Copies a quaternion. (same as {@link quat.clone})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is a copy of q\n */\nfunction copy<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = q[0];\n  newDst[1] = q[1];\n  newDst[2] = q[2];\n  newDst[3] = q[3];\n\n  return newDst;\n}\n\n/**\n * Clones a quaternion. (same as {@link quat.copy})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A copy of q.\n */\nconst clone = copy;\n\n/**\n * Adds two quaternions; assumes a and b have the same dimension.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the sum of a and b.\n */\nfunction add<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n  newDst[3] = a[3] + b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nfunction subtract<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n  newDst[3] = a[3] - b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Multiplies a quaternion by a scalar.\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction mulScalar<T extends QuatArg = QuatType>(v: QuatArg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n  newDst[3] = v[3] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a quaternion by a scalar. (same as mulScalar)\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction divScalar<T extends QuatArg = QuatType>(v: QuatArg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n  newDst[3] = v[3] / k;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two quaternions\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns dot product\n */\nfunction dot(a: QuatArg, b: QuatArg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Performs linear interpolation on two quaternions.\n * Given quaternions a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param t - Interpolation coefficient.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n  newDst[3] = a[3] + t * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Computes the length of quaternion\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nfunction length(v: QuatArg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of quaternion (same as length)\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of quaternion\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nfunction lengthSq(v: QuatArg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of quaternion (same as lengthSq)\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nconst lenSq = lengthSq;\n\n/**\n * Divides a quaternion by its Euclidean length and returns the quotient.\n * @param v - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The normalized quaternion.\n */\nfunction normalize<T extends QuatArg = QuatType>(v: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n    newDst[3] = v3 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 1;\n  }\n\n  return newDst;\n}\n\n/**\n * Check if 2 quaternions are approximately equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are approximately equal\n */\nfunction equalsApproximately(a: QuatArg, b: QuatArg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 quaternions are exactly equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are exactly equal\n */\nfunction equals(a: QuatArg, b: QuatArg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Creates an identity quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns an identity quaternion\n */\nfunction identity<T extends QuatArg = QuatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n  newDst[3] = 1;\n\n  return newDst;\n}\n\nconst tempVec3 = vec3.create();\nconst xUnitVec3 = vec3.create();\nconst yUnitVec3 = vec3.create();\n\n/**\n * Computes a quaternion to represent the shortest rotation from one vector to another.\n *\n * @param aUnit - the start vector\n * @param bUnit - the end vector\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction rotationTo<T extends QuatArg = QuatType>(aUnit: Vec3Arg, bUnit: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const dot = vec3.dot(aUnit, bUnit);\n  if (dot < -0.999999) {\n    vec3.cross(xUnitVec3, aUnit, tempVec3);\n    if (vec3.len(tempVec3) < 0.000001) {\n      vec3.cross(yUnitVec3, aUnit, tempVec3);\n    }\n\n    vec3.normalize(tempVec3, tempVec3);\n    fromAxisAngle(tempVec3, Math.PI, newDst);\n\n    return newDst;\n  } else if (dot > 0.999999) {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 1;\n\n    return newDst;\n  } else {\n    vec3.cross(aUnit, bUnit, tempVec3);\n\n    newDst[0] = tempVec3[0];\n    newDst[1] = tempVec3[1];\n    newDst[2] = tempVec3[2];\n    newDst[3] = 1 + dot;\n\n    return normalize(newDst, newDst);\n  }\n}\n\nconst tempQuat1 = new Ctor(4);\nconst tempQuat2 = new Ctor(4);\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param c - the third quaternion\n * @param d - the fourth quaternion\n * @param t - Interpolation coefficient 0 to 1\n * @returns result\n */\nfunction sqlerp<T extends QuatArg = QuatType>(\n    a: QuatArg,\n    b: QuatArg,\n    c: QuatArg,\n    d: QuatArg,\n    t: number,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  slerp(a, d, t, tempQuat1);\n  slerp(b, c, t, tempQuat2);\n  slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n\n  return newDst;\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  fromAxisAngle,\n  toAxisAngle,\n  angle,\n  multiply,\n  mul,\n  rotateX,\n  rotateY,\n  rotateZ,\n  slerp,\n  inverse,\n  conjugate,\n  fromMat,\n  fromEuler,\n  copy,\n  clone,\n  add,\n  subtract,\n  sub,\n  mulScalar,\n  scale,\n  divScalar,\n  dot,\n  lerp,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  normalize,\n  equalsApproximately,\n  equals,\n  identity,\n  rotationTo,\n  sqlerp,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nexport function getAPI<T extends QuatArg = Float32Array>(Ctor: QuatCtor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec4Arg, Vec4Type } from './vec4';\nimport { Mat4Arg } from './mat4';\nimport { BaseArgType } from './types';\n\nexport { Vec4Arg, Vec4Type };\n\ntype Vec4Ctor<T extends Vec4Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl<VecType extends Vec4Arg = Float32Array>(Ctor: Vec4Ctor<VecType>) {\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number, w?: number) {\n  const newDst = new Ctor(4);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n        if (w !== undefined) {\n          newDst[3] = w;\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec4\n * Also see {@link vec4.create} and {@link vec4.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec4Arg = VecType>(x: number, y: number, z: number, w: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n  newDst[3] = w;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n  newDst[2] = Math.ceil(v[2]);\n  newDst[3] = Math.ceil(v[3]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n  newDst[2] = Math.floor(v[2]);\n  newDst[3] = Math.floor(v[3]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n  newDst[2] = Math.round(v[2]);\n  newDst[3] = Math.round(v[3]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec4Arg = VecType>(v: Vec4Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n  newDst[2] = Math.min(max, Math.max(min, v[2]));\n  newDst[3] = Math.min(max, Math.max(min, v[3]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n  newDst[3] = a[3] + b[3];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n  newDst[2] = a[2] + b[2] * scale;\n  newDst[3] = a[3] + b[3] * scale;\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n  newDst[3] = a[3] - b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec4Arg, b: Vec4Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec4Arg, b: Vec4Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n  newDst[3] = a[3] + t * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, t: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n  newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n  newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n  newDst[2] = Math.max(a[2], b[2]);\n  newDst[3] = Math.max(a[3], b[3]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n  newDst[2] = Math.min(a[2], b[2]);\n  newDst[3] = Math.min(a[3], b[3]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec4Arg = VecType>(v: Vec4Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n  newDst[3] = v[3] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec4Arg = VecType>(v: Vec4Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n  newDst[3] = v[3] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n  newDst[2] = 1 / v[2];\n  newDst[3] = 1 / v[3];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the dot product of two vectors\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec4Arg, b: Vec4Arg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec4Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec4Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec4Arg, b: Vec4Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec4Arg, b: Vec4Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n    newDst[3] = v3 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n  newDst[2] = -v[2];\n  newDst[3] = -v[3];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec4.clone})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n  newDst[2] = v[2];\n  newDst[3] = v[3];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec4.copy})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n  newDst[2] = a[2] * b[2];\n  newDst[3] = a[3] * b[3];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n  newDst[2] = a[2] / b[2];\n  newDst[3] = a[3] / b[3];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec4Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n  newDst[3] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec4Arg = VecType>(v: Vec4Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = v[3];\n\n  newDst[0] = m[0] * x + m[4] * y + m[ 8] * z + m[12] * w;\n  newDst[1] = m[1] * x + m[5] * y + m[ 9] * z + m[13] * w;\n  newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n  return newDst;\n}\n\n\n/**\n * Treat a 4D vector as a direction and set it's length\n *\n * @param a The vec4 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec4Arg = VecType>(a: Vec4Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec4 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec4Arg = VecType>(a: Vec4Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  zero,\n  transformMat4,\n  setLength,\n  truncate,\n  midpoint,\n};\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec4Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n\n","/**\n * Some docs\n * @namespace wgpu-matrix\n */\nimport {BaseArgType, ZeroArray} from './types';\nimport {Mat3Arg, Mat3Type, getAPI as getMat3API} from './mat3-impl';\nimport {Mat4Arg, Mat4Type, getAPI as getMat4API} from './mat4-impl';\nimport {QuatArg, QuatType, getAPI as getQuatAPI, RotationOrder} from './quat-impl';\nimport {Vec2Arg, Vec2Type, getAPI as getVec2API} from './vec2-impl';\nimport {Vec3Arg, Vec3Type, getAPI as getVec3API} from './vec3-impl';\nimport {Vec4Arg, Vec4Type, getAPI as getVec4API} from './vec4-impl';\nimport * as utils from './utils';\n\nexport {\n  RotationOrder,\n  utils,\n\n  BaseArgType,\n\n  Mat3Arg,\n  Mat4Arg,\n  QuatArg,\n  Vec2Arg,\n  Vec3Arg,\n  Vec4Arg,\n\n  Mat3Type,\n  Mat4Type,\n  QuatType,\n  Vec2Type,\n  Vec3Type,\n  Vec4Type,\n};\n\nexport type BaseCtor<T extends BaseArgType>  = new (n: number) => T;\n\nexport type Mat3 = Mat3Type<Float32Array>;\nexport type Mat4 = Mat4Type<Float32Array>;\nexport type Quat = QuatType<Float32Array>;\nexport type Vec2 = Vec2Type<Float32Array>;\nexport type Vec3 = Vec3Type<Float32Array>;\nexport type Vec4 = Vec4Type<Float32Array>;\n\nexport type Mat3d = Mat3Type<Float64Array>;\nexport type Mat4d = Mat4Type<Float64Array>;\nexport type Quatd = QuatType<Float64Array>;\nexport type Vec2d = Vec2Type<Float64Array>;\nexport type Vec3d = Vec3Type<Float64Array>;\nexport type Vec4d = Vec4Type<Float64Array>;\n\nexport type Mat3n = Mat3Type<number[]>;\nexport type Mat4n = Mat4Type<number[]>;\nexport type Quatn = QuatType<number[]>;\nexport type Vec2n = Vec2Type<number[]>;\nexport type Vec3n = Vec3Type<number[]>;\nexport type Vec4n = Vec4Type<number[]>;\n\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI<\n    Mat3 extends BaseArgType,\n    Mat4 extends BaseArgType,\n    Quat extends BaseArgType,\n    Vec2 extends BaseArgType,\n    Vec3 extends BaseArgType,\n    Vec4 extends BaseArgType,\n>(\n    Mat3Ctor: BaseCtor<Mat3>,\n    Mat4Ctor: BaseCtor<Mat4>,\n    QuatCtor: BaseCtor<Quat>,\n    Vec2Ctor: BaseCtor<Vec2>,\n    Vec3Ctor: BaseCtor<Vec3>,\n    Vec4Ctor: BaseCtor<Vec4>,\n) {\n  return {\n    /** @namespace mat3 */\n    mat3: getMat3API<Mat3>(Mat3Ctor),\n    /** @namespace mat4 */\n    mat4: getMat4API<Mat4>(Mat4Ctor),\n    /** @namespace quat */\n    quat: getQuatAPI<Quat>(QuatCtor),\n    /** @namespace vec2 */\n    vec2: getVec2API<Vec2>(Vec2Ctor),\n    /** @namespace vec3 */\n    vec3: getVec3API<Vec3>(Vec3Ctor),\n    /** @namespace vec4 */\n    vec4: getVec4API<Vec4>(Vec4Ctor),\n  };\n}\n\nexport const {\n  /**\n   * 3x3 Matrix functions that default to returning `Float32Array`\n   * @namespace\n   */\n  mat3,\n  /**\n   * 4x4 Matrix functions that default to returning `Float32Array`\n   * @namespace\n   */\n  mat4,\n  /**\n   * Quaternion functions that default to returning `Float32Array`\n   * @namespace\n   */\n  quat,\n  /**\n   * Vec2 functions that default to returning `Float32Array`\n   * @namespace\n   */\n  vec2,\n  /**\n   * Vec3 functions that default to returning `Float32Array`\n   * @namespace\n   */\n  vec3,\n  /**\n   * Vec3 functions that default to returning `Float32Array`\n   * @namespace\n   */\n  vec4,\n} = wgpuMatrixAPI<\n  Mat3, Mat4, Quat, Vec2, Vec3, Vec4>(\n    Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\n\nexport const {\n  /**\n   * 3x3 Matrix functions that default to returning `Float64Array`\n   * @namespace\n   */\n  mat3: mat3d,\n  /**\n   * 4x4 Matrix functions that default to returning `Float64Array`\n   * @namespace\n   */\n  mat4: mat4d,\n  /**\n   * Quaternion functions that default to returning `Float64Array`\n   * @namespace\n   */\n  quat: quatd,\n  /**\n   * Vec2 functions that default to returning `Float64Array`\n   * @namespace\n   */\n  vec2: vec2d,\n  /**\n   * Vec3 functions that default to returning `Float64Array`\n   * @namespace\n   */\n  vec3: vec3d,\n  /**\n   * Vec3 functions that default to returning `Float64Array`\n   * @namespace\n   */\n  vec4: vec4d,\n} = wgpuMatrixAPI<\n  Mat3d, Mat4d, Quatd, Vec2d, Vec3d, Vec4d>(\n    Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\n\nexport const {\n  /**\n   * 3x3 Matrix functions that default to returning `number[]`\n   * @namespace\n   */\n  mat3: mat3n,\n  /**\n   * 4x4 Matrix functions that default to returning `number[]`\n   * @namespace\n   */\n  mat4: mat4n,\n  /**\n   * Quaternion functions that default to returning `number[]`\n   * @namespace\n   */\n  quat: quatn,\n  /**\n   * Vec2 functions that default to returning `number[]`\n   * @namespace\n   */\n  vec2: vec2n,\n  /**\n   * Vec3 functions that default to returning `number[]`\n   * @namespace\n   */\n  vec3: vec3n,\n  /**\n   * Vec3 functions that default to returning `number[]`\n   * @namespace\n   */\n  vec4: vec4n,\n} = wgpuMatrixAPI<\n  Mat3n, Mat4n, Quatn, Vec2n, Vec3n, Vec4n>(\n    ZeroArray, Array, Array, Array, Array, Array);\n"],"names":["ZeroArray","OriginalConstructor","modifier","a","fill","constructor","args","super","this","EPSILON","degrees","Math","PI","n","m","b","v","d","abs","t","radians","old","cache","Map","getAPI","Ctor","api","get","create","x","y","newDst","undefined","subtract","dst","lerp","mulScalar","k","inverse","dot","length","v0","v1","sqrt","lengthSq","distance","dx","dy","distanceSq","normalize","len","copy","multiply","divide","setLength","fromValues","set","ceil","floor","round","clamp","min","max","add","addScaled","scale","angle","ax","ay","bx","by","mag","cosine","acos","sub","equalsApproximately","utils.EPSILON","equals","lerpV","divScalar","invert","cross","z","lenSq","dist","distSq","negate","clone","mul","div","random","cos","sin","zero","transformMat4","transformMat3","rotate","rad","p0","p1","sinC","cosC","truncate","maxLen","midpoint","getAPIImpl","v2","dz","az","bz","t1","t2","zScale","w","transformMat4Upper3x3","transformQuat","q","qx","qy","qz","w2","uvX","uvY","uvZ","getTranslation","getAxis","axis","off","getScaling","xx","xy","xz","yx","yy","yz","zx","zy","zz","rotateX","p","r","rotateY","rotateZ","vec2","getVec2API","vec3","getVec3API","identity","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","v3","v4","v5","v6","v7","v8","fromMat4","m4","fromQuat","x2","y2","z2","wx","wy","wz","transpose","determinant","setTranslation","setAxis","get3DScaling","translation","translate","rotation","angleInRadians","c","s","scaling","uniformScaling","uniformScale","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","rangeInv","perspectiveReverseZ","Infinity","ortho","left","right","bottom","top","near","far","frustum","frustumReverseZ","aim","position","target","up","cameraAim","eye","lookAt","rotationX","rotationY","rotationZ","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","toAxisAngle","qw","a0","a1","a2","a3","invDot","conjugate","fromMat","trace","root","invRoot","i","j","fromEuler","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","rotationTo","aUnit","bUnit","sqlerp","dw","wgpuMatrixAPI","Mat3Ctor","Mat4Ctor","QuatCtor","Vec2Ctor","Vec3Ctor","Vec4Ctor","mat3","getMat3API","mat4","getMat4API","quat","getQuatAPI","vec4","getVec4API","Float32Array","mat3d","mat4d","quatd","vec2d","vec3d","vec4d","Float64Array","mat3n","mat4n","quatn","vec2n","vec3n","vec4n","Array"],"mappings":"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"}