{"version":3,"file":"wgpu-matrix.module.js","sources":["../../../src/types.ts","../../../src/utils.ts","../../../src/vec2-impl.ts","../../../src/mat3-impl.ts","../../../src/vec3-impl.ts","../../../src/mat4-impl.ts","../../../src/quat-impl.ts","../../../src/vec4-impl.ts","../../../src/wgpu-matrix.ts"],"sourcesContent":["/**\n * The types you can pass to most functions that take an\n * array of numbers.\n */\nexport type BaseArgType = Float32Array | Float64Array | number[];\n\nfunction wrapConstructor<T extends new(...args: any[]) => any>(\n  OriginalConstructor: T,\n  modifier: (instance: InstanceType<T>) => void\n): T {\n  return class extends OriginalConstructor {\n    constructor(...args: any[]) {\n      super(...args);\n      modifier(this as InstanceType<T>);\n    }\n  } as T; // Type assertion is necessary here\n}\n\nexport const ZeroArray = wrapConstructor(Array<number>, a => a.fill(0));\n\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nexport let EPSILON = 0.000001;\n\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nexport function setEpsilon(v: number): number {\n  const old = EPSILON;\n  EPSILON = v;\n  return old;\n}\n\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nexport function degToRad(degrees: number): number {\n  return degrees * Math.PI / 180;\n}\n\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nexport function radToDeg(radians: number): number {\n  return radians * 180 / Math.PI;\n}\n\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nexport function lerp(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nexport function inverseLerp(a: number, b: number, v: number): number {\n  const d = b - a;\n  return (Math.abs(b - a) < EPSILON)\n     ? a\n     : (v - a) / d;\n}\n\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nexport function euclideanModulo(n: number, m: number) {\n  return ((n % m) + m) % m;\n}","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Mat3Arg } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { Vec2Arg, Vec2Type } from './vec2';\nimport { Vec3Arg } from './vec3';\nimport { BaseArgType } from './types';\n\nexport { Vec2Arg, Vec2Type };\n\ntype Vec2Ctor<T extends Vec2Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl<VecType extends Vec2Arg = Float32Array>(Ctor: Vec2Ctor<VecType>) {\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nfunction create(x = 0, y = 0) {\n  const newDst = new Ctor(2);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec2\n * Also see {@link vec2.create} and {@link vec2.copy}\n *\n * @param x first value\n * @param y second value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec2Arg = VecType>(x: number, y: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec2Arg = VecType>(v: Vec2Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n\n  return newDst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a: Vec2Arg, b: Vec2Arg): number {\n  const ax = a[0];\n  const ay = a[1];\n  const bx = b[0];\n  const by = b[1];\n  const mag1 = Math.sqrt(ax * ax + ay * ay);\n  const mag2 = Math.sqrt(bx * bx + by * by);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec2Arg, b: Vec2Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec2Arg, b: Vec2Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, t: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec2Arg = VecType>(v: Vec2Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec2Arg = VecType>(v: Vec2Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross<T extends Vec3Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const z = a[0] * b[1] - a[1] * b[0];\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = z;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec2Arg, b: Vec2Arg): number {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec2Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return Math.sqrt(v0 * v0 + v1 * v1);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec2Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return v0 * v0 + v1 * v1;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec2Arg, b: Vec2Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec2Arg, b: Vec2Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const len = Math.sqrt(v0 * v0 + v1 * v1);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec2.clone})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec2.copy})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random<T extends Vec2Arg = VecType>(scale = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const angle = Math.random() * 2 * Math.PI;\n  newDst[0] = Math.cos(angle) * scale;\n  newDst[1] = Math.sin(angle) * scale;\n\n  return newDst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec2Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec2Arg = VecType>(v: Vec2Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const x = v[0];\n  const y = v[1];\n\n  newDst[0] = x * m[0] + y * m[4] + m[12];\n  newDst[1] = x * m[1] + y * m[5] + m[13];\n\n  return newDst;\n}\n\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3<T extends Vec2Arg = VecType>(v: Vec2Arg, m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const x = v[0];\n  const y = v[1];\n\n  newDst[0] = m[0] * x + m[4] * y + m[8];\n  newDst[1] = m[1] * x + m[5] * y + m[9];\n\n  return newDst;\n}\n\n/**\n * Rotate a 2D vector\n *\n * @param a The vec2 point to rotate\n * @param b The origin of the rotation\n * @param rad The angle of rotation in radians\n * @returns the rotated vector\n */\nfunction rotate<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  //perform rotation and translate to correct position\n  newDst[0] = p0 * cosC - p1 * sinC + b[0];\n  newDst[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return newDst;\n}\n\n/**\n * Treat a 2D vector as a direction and set it's length\n *\n * @param a The vec2 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec2Arg = VecType>(a: Vec2Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec2 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec2Arg = VecType>(a: Vec2Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  angle,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  cross,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  random,\n  zero,\n  transformMat4,\n  transformMat3,\n  rotate,\n  setLength,\n  truncate,\n  midpoint,\n};\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Vec2Arg = Float32Array>(Ctor: Vec2Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport { QuatArg } from './quat';\nimport { Mat3Arg, Mat3Type } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { Vec2Arg } from './vec2';\nimport { getAPI as getVec2API } from './vec2-impl';\nimport { BaseArgType } from './types';\n\nexport { Mat3Arg, Mat3Type };\n\ntype Mat3Ctor<T extends Mat3Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl<MatType extends Mat3Arg = Float32Array>(Ctor: Mat3Ctor<MatType>) {\n  const vec2 = getVec2API<MatType>(Ctor);\n\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nfunction create(\n    v0?: number, v1?: number, v2?: number,\n    v3?: number, v4?: number, v5?: number,\n    v6?: number, v7?: number, v8?: number) {\n  const newDst = new Ctor(12);\n  // to make the array homogenous\n  newDst[3] = 0;\n  newDst[7] = 0;\n  newDst[11] = 0;\n\n  if (v0 !== undefined) {\n    newDst[0] = v0;\n    if (v1 !== undefined) {\n      newDst[1] = v1;\n      if (v2 !== undefined) {\n        newDst[2] = v2;\n        if (v3 !== undefined) {\n          newDst[4] = v3;\n          if (v4 !== undefined) {\n            newDst[5] = v4;\n            if (v5 !== undefined) {\n              newDst[6] = v5;\n              if (v6 !== undefined) {\n                newDst[8] = v6;\n                if (v7 !== undefined) {\n                  newDst[9] = v7;\n                  if (v8 !== undefined) {\n                    newDst[10] = v8;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return newDst;\n}\n\n/**\n * Sets the values of a Mat3\n * Also see {@link mat3.create} and {@link mat3.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 set from values.\n */\nfunction set<T extends Mat3Arg = MatType>(\n    v0: number, v1: number, v2: number,\n    v3: number, v4: number, v5: number,\n    v6: number, v7: number, v8: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[0] = v0;  newDst[1] = v1;  newDst[ 2] = v2;  newDst[ 3] = 0;\n  newDst[4] = v3;  newDst[5] = v4;  newDst[ 6] = v5;  newDst[ 7] = 0;\n  newDst[8] = v6;  newDst[9] = v7;  newDst[10] = v8;  newDst[11] = 0;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat3 from the upper left 3x3 part of a Mat4\n * @param m4 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from m4\n */\nfunction fromMat4<T extends Mat3Arg = MatType>(m4: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n  newDst[0] = m4[0];  newDst[1] = m4[1];  newDst[ 2] = m4[ 2];  newDst[ 3] = 0;\n  newDst[4] = m4[4];  newDst[5] = m4[5];  newDst[ 6] = m4[ 6];  newDst[ 7] = 0;\n  newDst[8] = m4[8];  newDst[9] = m4[9];  newDst[10] = m4[10];  newDst[11] = 0;\n  return newDst;\n}\n\n/**\n * Creates a Mat3 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from q\n */\nfunction fromQuat<T extends Mat3Arg = MatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  newDst[ 0] = 1 - yy - zz;  newDst[ 1] = yx + wz;      newDst[ 2] = zx - wy;      newDst[ 3] = 0;\n  newDst[ 4] = yx - wz;      newDst[ 5] = 1 - xx - zz;  newDst[ 6] = zy + wx;      newDst[ 7] = 0;\n  newDst[ 8] = zx + wy;      newDst[ 9] = zy - wx;      newDst[10] = 1 - xx - yy;  newDst[11] = 0;\n\n  return newDst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = -m[ 0];  newDst[ 1] = -m[ 1];  newDst[ 2] = -m[ 2];\n  newDst[ 4] = -m[ 4];  newDst[ 5] = -m[ 5];  newDst[ 6] = -m[ 6];\n  newDst[ 8] = -m[ 8];  newDst[ 9] = -m[ 9];  newDst[10] = -m[10];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat3.clone})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = m[ 0];  newDst[ 1] = m[ 1];  newDst[ 2] = m[ 2];\n  newDst[ 4] = m[ 4];  newDst[ 5] = m[ 5];  newDst[ 6] = m[ 6];\n  newDst[ 8] = m[ 8];  newDst[ 9] = m[ 9];  newDst[10] = m[10];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix (same as {@link mat3.copy})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately(a: Mat3Arg, b: Mat3Arg): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals(a: Mat3Arg, b: Mat3Arg): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10];\n}\n\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nfunction identity<T extends Mat3Arg = MatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = 1;  newDst[ 1] = 0;  newDst[ 2] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n  if (newDst === m) {\n    let t: number;\n\n    // 0 1 2\n    // 4 5 6\n    // 8 9 10\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    return newDst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  newDst[ 0] = m00;  newDst[ 1] = m10;  newDst[ 2] = m20;\n  newDst[ 4] = m01;  newDst[ 5] = m11;  newDst[ 6] = m21;\n  newDst[ 8] = m02;  newDst[ 9] = m12;  newDst[10] = m22;\n\n  return newDst;\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  const b01 =  m22 * m11 - m12 * m21;\n  const b11 = -m22 * m10 + m12 * m20;\n  const b21 =  m21 * m10 - m11 * m20;\n\n  const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n\n  newDst[ 0] = b01 * invDet;\n  newDst[ 1] = (-m22 * m01 + m02 * m21) * invDet;\n  newDst[ 2] = ( m12 * m01 - m02 * m11) * invDet;\n  newDst[ 4] = b11 * invDet;\n  newDst[ 5] = ( m22 * m00 - m02 * m20) * invDet;\n  newDst[ 6] = (-m12 * m00 + m02 * m10) * invDet;\n  newDst[ 8] = b21 * invDet;\n  newDst[ 9] = (-m21 * m00 + m01 * m20) * invDet;\n  newDst[10] = ( m11 * m00 - m01 * m10) * invDet;\n\n  return newDst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m: Mat3Arg): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  return m00 * (m11 * m22 - m21 * m12) -\n         m10 * (m01 * m22 - m21 * m02) +\n         m20 * (m01 * m12 - m11 * m02);\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert = inverse;\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply<T extends Mat3Arg = MatType>(a: Mat3Arg, b: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n\n  newDst[ 0] = a00 * b00 + a10 * b01 + a20 * b02;\n  newDst[ 1] = a01 * b00 + a11 * b01 + a21 * b02;\n  newDst[ 2] = a02 * b00 + a12 * b01 + a22 * b02;\n  newDst[ 4] = a00 * b10 + a10 * b11 + a20 * b12;\n  newDst[ 5] = a01 * b10 + a11 * b11 + a21 * b12;\n  newDst[ 6] = a02 * b10 + a12 * b11 + a22 * b12;\n  newDst[ 8] = a00 * b20 + a10 * b21 + a20 * b22;\n  newDst[ 9] = a01 * b20 + a11 * b21 + a21 * b22;\n  newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\n  return newDst;\n}\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul = multiply;\n\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation<T extends Mat3Arg = MatType>(a: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? identity()) as T;\n  if (a !== newDst) {\n    newDst[ 0] = a[ 0];\n    newDst[ 1] = a[ 1];\n    newDst[ 2] = a[ 2];\n    newDst[ 4] = a[ 4];\n    newDst[ 5] = a[ 5];\n    newDst[ 6] = a[ 6];\n  }\n  newDst[ 8] = v[0];\n  newDst[ 9] = v[1];\n  newDst[10] = 1;\n  return newDst;\n}\n\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation<T extends Vec2Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec2.create()) as T;\n  newDst[0] = m[8];\n  newDst[1] = m[9];\n  return newDst;\n}\n\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec2Arg = MatType>(m: Mat3Arg, axis: number, dst?: T) {\n  const newDst = (dst ?? vec2.create()) as T;\n  const off = axis * 4;\n  newDst[0] = m[off + 0];\n  newDst[1] = m[off + 1];\n  return newDst;\n}\n\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, axis: number, dst?: T) {\n  const newDst = (dst === m ? m : copy(m, dst)) as T;\n\n  const off = axis * 4;\n  newDst[off + 0] = v[0];\n  newDst[off + 1] = v[1];\n  return newDst;\n}\n\n///**\n// * Returns the scaling component of the matrix\n// * @param m - The Matrix\n// * @param dst - The vector to set. If not passed a new one is created.\n// */\nfunction getScaling<T extends Vec2Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec2.create());\n\n  const xx = m[0];\n  const xy = m[1];\n  const yx = m[4];\n  const yy = m[5];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy);\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation<T extends Mat3Arg = MatType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = 1;     newDst[ 1] = 0;     newDst[ 2] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = 1;     newDst[ 6] = 0;\n  newDst[ 8] = v[0];  newDst[ 9] = v[1];  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 0] = m00;\n    newDst[ 1] = m01;\n    newDst[ 2] = m02;\n    newDst[ 4] = m10;\n    newDst[ 5] = m11;\n    newDst[ 6] = m12;\n  }\n\n  newDst[ 8] = m00 * v0 + m10 * v1 + m20;\n  newDst[ 9] = m01 * v0 + m11 * v1 + m21;\n  newDst[10] = m02 * v0 + m12 * v1 + m22;\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotation<T extends Mat3Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] =  c;  newDst[ 1] = s;  newDst[ 2] = 0;\n  newDst[ 4] = -s;  newDst[ 5] = c;  newDst[ 6] = 0;\n  newDst[ 8] =  0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotate<T extends Mat3Arg = MatType>(m: Mat3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 + s * m10;\n  newDst[ 1] = c * m01 + s * m11;\n  newDst[ 2] = c * m02 + s * m12;\n\n  newDst[ 4] = c * m10 - s * m00;\n  newDst[ 5] = c * m11 - s * m01;\n  newDst[ 6] = c * m12 - s * m02;\n\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling<T extends Mat3Arg = MatType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = v[0];  newDst[ 1] = 0;     newDst[ 2] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = v[1];  newDst[ 6] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  newDst[ 0] = v0 * m[0 * 4 + 0];\n  newDst[ 1] = v0 * m[0 * 4 + 1];\n  newDst[ 2] = v0 * m[0 * 4 + 2];\n\n  newDst[ 4] = v1 * m[1 * 4 + 0];\n  newDst[ 5] = v1 * m[1 * 4 + 1];\n  newDst[ 6] = v1 * m[1 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales uniformly in each dimension\n * @param s - Amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling<T extends Mat3Arg = MatType>(s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = s;  newDst[ 1] = 0;  newDst[ 2] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = s;  newDst[ 6] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given.\n * @param m - The matrix to be modified.\n * @param s - Amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale<T extends Mat3Arg = MatType>(m: Mat3Arg, s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = s * m[0 * 4 + 0];\n  newDst[ 1] = s * m[0 * 4 + 1];\n  newDst[ 2] = s * m[0 * 4 + 2];\n\n  newDst[ 4] = s * m[1 * 4 + 0];\n  newDst[ 5] = s * m[1 * 4 + 1];\n  newDst[ 6] = s * m[1 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\nreturn {\n  clone,\n  create,\n  set,\n  fromMat4,\n  fromQuat,\n  negate,\n  copy,\n  equalsApproximately,\n  equals,\n  identity,\n  transpose,\n  inverse,\n  invert,\n  determinant,\n  mul,\n  multiply,\n  setTranslation,\n  getTranslation,\n  getAxis,\n  setAxis,\n  getScaling,\n  translation,\n  translate,\n  rotation,\n  rotate,\n  scaling,\n  scale,\n  uniformScaling,\n  uniformScale,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat3Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec3Arg, Vec3Type } from './vec3';\nimport { Mat3Arg } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { QuatArg } from './quat';\nimport { BaseArgType } from './types';\n\nexport { Vec3Arg, Vec3Type };\n\ntype Vec3Ctor<T extends Vec3Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl<VecType extends Vec3Arg = Float32Array>(Ctor: Vec3Ctor<VecType>) {\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number) {\n  const newDst = new Ctor(3);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec3\n * Also see {@link vec3.create} and {@link vec3.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec3Arg = VecType>(x: number, y: number, z: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n  newDst[2] = Math.ceil(v[2]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n  newDst[2] = Math.floor(v[2]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n  newDst[2] = Math.round(v[2]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec3Arg = VecType>(v: Vec3Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n  newDst[2] = Math.min(max, Math.max(min, v[2]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n  newDst[2] = a[2] + b[2] * scale;\n\n  return newDst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a: Vec3Arg, b: Vec3Arg): number {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec3Arg, b: Vec3Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec3Arg, b: Vec3Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, t: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n  newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n  newDst[2] = Math.max(a[2], b[2]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n  newDst[2] = Math.min(a[2], b[2]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec3Arg = VecType>(v: Vec3Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec3Arg = VecType>(v: Vec3Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n  newDst[2] = 1 / v[2];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  newDst[0] = a[1] * b[2] - a[2] * b[1];\n  newDst[1] = t1;\n  newDst[2] = t2;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec3Arg, b: Vec3Arg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec3Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec3Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return v0 * v0 + v1 * v1 + v2 * v2;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec3Arg, b: Vec3Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec3Arg, b: Vec3Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n  }\n\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n  newDst[2] = -v[2];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec3.clone})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n  newDst[2] = v[2];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec3.copy})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n  newDst[2] = a[2] * b[2];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n  newDst[2] = a[2] / b[2];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random<T extends Vec3Arg = VecType>(scale = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const angle = Math.random() * 2 * Math.PI;\n  const z = Math.random() * 2 - 1;\n  const zScale = Math.sqrt(1 - z * z) * scale;\n  newDst[0] = Math.cos(angle) * zScale;\n  newDst[1] = Math.sin(angle) * zScale;\n  newDst[2] = z * scale;\n\n  return newDst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec3Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n\n  newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n  return newDst;\n}\n\n/**\n * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nfunction transformMat4Upper3x3<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return newDst;\n}\n\n/**\n * Transforms vec3 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  newDst[0] = x * m[0] + y * m[4] + z * m[8];\n  newDst[1] = x * m[1] + y * m[5] + z * m[9];\n  newDst[2] = x * m[2] + y * m[6] + z * m[10];\n\n  return newDst;\n}\n\n/**\n * Transforms vec3 by Quaternion\n * @param v - the vector to transform\n * @param q - the quaternion to transform by\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed\n */\nfunction transformQuat<T extends Vec3Arg = VecType>(v: Vec3Arg, q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const w2 = q[3] * 2;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  const uvX = qy * z - qz * y;\n  const uvY = qz * x - qx * z;\n  const uvZ = qx * y - qy * x;\n\n  newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n  newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n  newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n\n  return newDst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation<T extends Vec3Arg = VecType>(m: Mat3Arg, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    newDst[0] = m[12];\n    newDst[1] = m[13];\n    newDst[2] = m[14];\n    return newDst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec3Arg = VecType>(m: Mat4Arg, axis: number, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    const off = axis * 4;\n    newDst[0] = m[off + 0];\n    newDst[1] = m[off + 1];\n    newDst[2] = m[off + 2];\n    return newDst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling<T extends Vec3Arg = VecType>(m: Mat4Arg, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return newDst;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nfunction rotateX<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nfunction rotateY<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns {vec3} out\n */\nfunction rotateZ<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Treat a 3D vector as a direction and set it's length\n *\n * @param a The vec3 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec3Arg = VecType>(a: Vec3Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec3 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec3Arg = VecType>(a: Vec3Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  angle,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  cross,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  random,\n  zero,\n  transformMat4,\n  transformMat4Upper3x3,\n  transformMat3,\n  transformQuat,\n  getTranslation,\n  getAxis,\n  getScaling,\n  rotateX,\n  rotateY,\n  rotateZ,\n  setLength,\n  truncate,\n  midpoint,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec3Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","import { Mat4Arg, Mat4Type } from './mat4';\nimport { Mat3Arg } from './mat3';\nimport { QuatArg } from './quat';\nimport { Vec3Arg } from './vec3';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\nimport * as utils from './utils';\n\nexport { Mat4Arg, Mat4Type };\n\ntype Mat4Ctor<T extends Mat4Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl<MatType extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<MatType>) {\n  const vec3 = getVec3API<MatType>(Ctor);\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\n\n\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nfunction create(\n    v0?: number, v1?: number, v2?: number, v3?: number,\n    v4?: number, v5?: number, v6?: number, v7?: number,\n    v8?: number, v9?: number, v10?: number, v11?: number,\n    v12?: number, v13?: number, v14?: number, v15?: number) {\n  const newDst = new Ctor(16);\n  if (v0 !== undefined) {\n    newDst[0] = v0;\n    if (v1 !== undefined) {\n      newDst[1] = v1;\n      if (v2 !== undefined) {\n        newDst[2] = v2;\n        if (v3 !== undefined) {\n          newDst[3] = v3;\n          if (v4 !== undefined) {\n            newDst[4] = v4;\n            if (v5 !== undefined) {\n              newDst[5] = v5;\n              if (v6 !== undefined) {\n                newDst[6] = v6;\n                if (v7 !== undefined) {\n                  newDst[7] = v7;\n                  if (v8 !== undefined) {\n                    newDst[8] = v8;\n                    if (v9 !== undefined) {\n                      newDst[9] = v9;\n                      if (v10 !== undefined) {\n                        newDst[10] = v10;\n                        if (v11 !== undefined) {\n                          newDst[11] = v11;\n                          if (v12 !== undefined) {\n                            newDst[12] = v12;\n                            if (v13 !== undefined) {\n                              newDst[13] = v13;\n                              if (v14 !== undefined) {\n                                newDst[14] = v14;\n                                if (v15 !== undefined) {\n                                  newDst[15] = v15;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Sets the values of a Mat4\n * Also see {@link mat4.create} and {@link mat4.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 created from values.\n */\nfunction set<T extends Mat4Arg = MatType>(\n    v0: number, v1: number, v2: number, v3: number,\n    v4: number, v5: number, v6: number, v7: number,\n    v8: number, v9: number, v10: number, v11: number,\n    v12: number, v13: number, v14: number, v15: number,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = v0;   newDst[ 1] = v1;   newDst[ 2] = v2;   newDst[ 3] = v3;\n  newDst[ 4] = v4;   newDst[ 5] = v5;   newDst[ 6] = v6;   newDst[ 7] = v7;\n  newDst[ 8] = v8;   newDst[ 9] = v9;   newDst[10] = v10;  newDst[11] = v11;\n  newDst[12] = v12;  newDst[13] = v13;  newDst[14] = v14;  newDst[15] = v15;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat4 from a Mat3\n * @param m3 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from m3\n */\nfunction fromMat3<T extends Mat4Arg = MatType>(m3: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = m3[0];  newDst[ 1] = m3[1];  newDst[ 2] = m3[ 2];  newDst[ 3] = 0;\n  newDst[ 4] = m3[4];  newDst[ 5] = m3[5];  newDst[ 6] = m3[ 6];  newDst[ 7] = 0;\n  newDst[ 8] = m3[8];  newDst[ 9] = m3[9];  newDst[10] = m3[10];  newDst[11] = 0;\n  newDst[12] = 0;      newDst[13] = 0;      newDst[14] = 0;       newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat4 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from q\n */\nfunction fromQuat<T extends Mat4Arg = MatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  newDst[ 0] = 1 - yy - zz;  newDst[ 1] = yx + wz;      newDst[ 2] = zx - wy;      newDst[ 3] = 0;\n  newDst[ 4] = yx - wz;      newDst[ 5] = 1 - xx - zz;  newDst[ 6] = zy + wx;      newDst[ 7] = 0;\n  newDst[ 8] = zx + wy;      newDst[ 9] = zy - wx;      newDst[10] = 1 - xx - yy;  newDst[11] = 0;\n  newDst[12] = 0;            newDst[13] = 0;            newDst[14] = 0;            newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = -m[ 0];  newDst[ 1] = -m[ 1];  newDst[ 2] = -m[ 2];  newDst[ 3] = -m[ 3];\n  newDst[ 4] = -m[ 4];  newDst[ 5] = -m[ 5];  newDst[ 6] = -m[ 6];  newDst[ 7] = -m[ 7];\n  newDst[ 8] = -m[ 8];  newDst[ 9] = -m[ 9];  newDst[10] = -m[10];  newDst[11] = -m[11];\n  newDst[12] = -m[12];  newDst[13] = -m[13];  newDst[14] = -m[14];  newDst[15] = -m[15];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat4.clone})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = m[ 0];  newDst[ 1] = m[ 1];  newDst[ 2] = m[ 2];  newDst[ 3] = m[ 3];\n  newDst[ 4] = m[ 4];  newDst[ 5] = m[ 5];  newDst[ 6] = m[ 6];  newDst[ 7] = m[ 7];\n  newDst[ 8] = m[ 8];  newDst[ 9] = m[ 9];  newDst[10] = m[10];  newDst[11] = m[11];\n  newDst[12] = m[12];  newDst[13] = m[13];  newDst[14] = m[14];  newDst[15] = m[15];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix (same as {@link mat4.copy})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately(a: Mat4Arg, b: Mat4Arg): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 3] - b[ 3]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 7] - b[ 7]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON &&\n         Math.abs(a[11] - b[11]) < utils.EPSILON &&\n         Math.abs(a[12] - b[12]) < utils.EPSILON &&\n         Math.abs(a[13] - b[13]) < utils.EPSILON &&\n         Math.abs(a[14] - b[14]) < utils.EPSILON &&\n         Math.abs(a[15] - b[15]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals(a: Mat4Arg, b: Mat4Arg): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 3] === b[ 3] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 7] === b[ 7] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10] &&\n         a[11] === b[11] &&\n         a[12] === b[12] &&\n         a[13] === b[13] &&\n         a[14] === b[14] &&\n         a[15] === b[15];\n}\n\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nfunction identity<T extends Mat4Arg = MatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = 1;  newDst[ 1] = 0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n  if (newDst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return newDst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  newDst[ 0] = m00;  newDst[ 1] = m10;  newDst[ 2] = m20;  newDst[ 3] = m30;\n  newDst[ 4] = m01;  newDst[ 5] = m11;  newDst[ 6] = m21;  newDst[ 7] = m31;\n  newDst[ 8] = m02;  newDst[ 9] = m12;  newDst[10] = m22;  newDst[11] = m32;\n  newDst[12] = m03;  newDst[13] = m13;  newDst[14] = m23;  newDst[15] = m33;\n\n  return newDst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n  const tmp12 = m20 * m31;\n  const tmp13 = m30 * m21;\n  const tmp14 = m10 * m31;\n  const tmp15 = m30 * m11;\n  const tmp16 = m10 * m21;\n  const tmp17 = m20 * m11;\n  const tmp18 = m00 * m31;\n  const tmp19 = m30 * m01;\n  const tmp20 = m00 * m21;\n  const tmp21 = m20 * m01;\n  const tmp22 = m00 * m11;\n  const tmp23 = m10 * m01;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n      (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n      (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n      (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n      (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  newDst[ 0] = d * t0;\n  newDst[ 1] = d * t1;\n  newDst[ 2] = d * t2;\n  newDst[ 3] = d * t3;\n  newDst[ 4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n          (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n  newDst[ 5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n          (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n  newDst[ 6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n          (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n  newDst[ 7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n          (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n  newDst[ 8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n          (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n  newDst[ 9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n          (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n  newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n          (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n  newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n          (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n  newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n          (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n  newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n          (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n  newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n          (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n  newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n          (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n\n  return newDst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m: Mat4Arg): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n             (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n             (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n             (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n             (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert = inverse;\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply<T extends Mat4Arg = MatType>(a: Mat4Arg, b: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  newDst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  newDst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  newDst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  newDst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  newDst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  newDst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  newDst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  newDst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  newDst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  newDst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return newDst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul = multiply;\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation<T extends Mat4Arg = MatType>(a: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? identity()) as T;\n  if (a !== newDst) {\n    newDst[ 0] = a[ 0];\n    newDst[ 1] = a[ 1];\n    newDst[ 2] = a[ 2];\n    newDst[ 3] = a[ 3];\n    newDst[ 4] = a[ 4];\n    newDst[ 5] = a[ 5];\n    newDst[ 6] = a[ 6];\n    newDst[ 7] = a[ 7];\n    newDst[ 8] = a[ 8];\n    newDst[ 9] = a[ 9];\n    newDst[10] = a[10];\n    newDst[11] = a[11];\n  }\n  newDst[12] = v[0];\n  newDst[13] = v[1];\n  newDst[14] = v[2];\n  newDst[15] = 1;\n  return newDst;\n}\n\n///**\n// * Returns the translation component of a 4-by-4 matrix as a vector with 3\n// * entries.\n// * @param m - The matrix.\n// * @param dst - vector to hold result. If not passed a new one is created.\n// * @returns The translation component of m.\n// */\nfunction getTranslation<T extends Vec3Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create()) as T;\n  newDst[0] = m[12];\n  newDst[1] = m[13];\n  newDst[2] = m[14];\n  return newDst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec3Arg = MatType>(m: Mat4Arg, axis: number, dst?: T) {\n  const newDst = (dst ?? vec3.create());\n  const off = axis * 4;\n  newDst[0] = m[off + 0];\n  newDst[1] = m[off + 1];\n  newDst[2] = m[off + 2];\n  return newDst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, axis: number, dst: T) {\n  const newDst = (dst === m) ? dst : copy(m, dst);\n\n  const off = axis * 4;\n  newDst[off + 0] = v[0];\n  newDst[off + 1] = v[1];\n  newDst[off + 2] = v[2];\n  return newDst;\n}\n\n///**\n// * Returns the scaling component of the matrix\n// * @param m - The Matrix\n// * @param dst - The vector to set. If not passed a new one is created.\n// */\nfunction getScaling<T extends Vec3Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create()) as T;\n\n  const xx = m[0];\n  const xy = m[1];\n  const xz = m[2];\n  const yx = m[4];\n  const yy = m[5];\n  const yz = m[6];\n  const zx = m[8];\n  const zy = m[9];\n  const zz = m[10];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n  newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n *\n * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n * otherwise.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nfunction perspective<T extends Mat4Arg = MatType>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\n  newDst[0]  = f / aspect;\n  newDst[1]  = 0;\n  newDst[2]  = 0;\n  newDst[3]  = 0;\n\n  newDst[4]  = 0;\n  newDst[5]  = f;\n  newDst[6]  = 0;\n  newDst[7]  = 0;\n\n  newDst[8]  = 0;\n  newDst[9]  = 0;\n  newDst[11] = -1;\n\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (Number.isFinite(zFar)) {\n    const rangeInv = 1 / (zNear - zFar);\n    newDst[10] = zFar * rangeInv;\n    newDst[14] = zFar * zNear * rangeInv;\n  } else {\n    newDst[10] = -1;\n    newDst[14] = -zNear;\n  }\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane. (default = Infinity)\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */function perspectiveReverseZ<T extends Mat4Arg = MatType>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar = Infinity, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n\n  newDst[ 0] = f / aspect;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n\n  newDst[ 4] = 0;\n  newDst[ 5] = f;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n\n  newDst[ 8] = 0;\n  newDst[ 9] = 0;\n  newDst[11] = -1;\n\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (zFar === Infinity) {\n    newDst[10] = 0;\n    newDst[14] = zNear;\n  } else {\n    const rangeInv = 1 / (zFar - zNear);\n    newDst[10] = zNear * rangeInv;\n    newDst[14] = zFar * zNear * rangeInv;\n  }\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The orthographic projection matrix.\n */\nfunction ortho<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[0]  = 2 / (right - left);\n  newDst[1]  = 0;\n  newDst[2]  = 0;\n  newDst[3]  = 0;\n\n  newDst[4]  = 0;\n  newDst[5]  = 2 / (top - bottom);\n  newDst[6]  = 0;\n  newDst[7]  = 0;\n\n  newDst[8]  = 0;\n  newDst[9]  = 0;\n  newDst[10] = 1 / (near - far);\n  newDst[11] = 0;\n\n  newDst[12] = (right + left) / (left - right);\n  newDst[13] = (top + bottom) / (bottom - top);\n  newDst[14] = near / (near - far);\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustum<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  newDst[ 0] = 2 * near / dx;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n  newDst[ 4] = 0;\n  newDst[ 5] = 2 * near / dy;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n  newDst[ 8] = (left + right) / dx;\n  newDst[ 9] = (top + bottom) / dy;\n  newDst[10] = far / dz;\n  newDst[11] = -1;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[14] = near * far / dz;\n  newDst[15] = 0;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustumReverseZ<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far = Infinity, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n\n  newDst[ 0] = 2 * near / dx;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n  newDst[ 4] = 0;\n  newDst[ 5] = 2 * near / dy;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n  newDst[ 8] = (left + right) / dx;\n  newDst[ 9] = (top + bottom) / dy;\n  newDst[11] = -1;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (far === Infinity) {\n    newDst[10] = 0;\n    newDst[14] = near;\n  } else {\n    const rangeInv = 1 / (far - near);\n    newDst[10] = near * rangeInv;\n    newDst[14] = far * near * rangeInv;\n  }\n\n  return newDst;\n}\n\nconst xAxis = vec3.create();\nconst yAxis = vec3.create();\nconst zAxis = vec3.create();\n\n/**\n * Computes a 4-by-4 aim transformation.\n *\n * This is a matrix which positions an object aiming down positive Z.\n * toward the target.\n *\n * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n *\n * @param position - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction aim<T extends Mat4Arg = MatType>(position: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];     newDst[ 1] = xAxis[1];     newDst[ 2] = xAxis[2];     newDst[ 3] = 0;\n  newDst[ 4] = yAxis[0];     newDst[ 5] = yAxis[1];     newDst[ 6] = yAxis[2];     newDst[ 7] = 0;\n  newDst[ 8] = zAxis[0];     newDst[ 9] = zAxis[1];     newDst[10] = zAxis[2];     newDst[11] = 0;\n  newDst[12] = position[0];  newDst[13] = position[1];  newDst[14] = position[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 camera aim transformation.\n *\n * This is a matrix which positions an object aiming down negative Z.\n * toward the target.\n *\n * Note: this is the inverse of `lookAt`\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction cameraAim<T extends Mat4Arg = MatType>(eye: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];     newDst[ 1] = xAxis[1];     newDst[ 2] = xAxis[2];     newDst[ 3] = 0;\n  newDst[ 4] = yAxis[0];     newDst[ 5] = yAxis[1];     newDst[ 6] = yAxis[2];     newDst[ 7] = 0;\n  newDst[ 8] = zAxis[0];     newDst[ 9] = zAxis[1];     newDst[10] = zAxis[2];     newDst[11] = 0;\n  newDst[12] = eye[0];  newDst[13] = eye[1];  newDst[14] = eye[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 view transformation.\n *\n * This is a view matrix which transforms all other objects\n * to be in the space of the view defined by the parameters.\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nfunction lookAt<T extends Mat4Arg = MatType>(eye: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];  newDst[ 1] = yAxis[0];  newDst[ 2] = zAxis[0];  newDst[ 3] = 0;\n  newDst[ 4] = xAxis[1];  newDst[ 5] = yAxis[1];  newDst[ 6] = zAxis[1];  newDst[ 7] = 0;\n  newDst[ 8] = xAxis[2];  newDst[ 9] = yAxis[2];  newDst[10] = zAxis[2];  newDst[11] = 0;\n\n  newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n  newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n  newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation<T extends Mat4Arg = MatType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = 1;     newDst[ 1] = 0;     newDst[ 2] = 0;     newDst[ 3] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = 1;     newDst[ 6] = 0;     newDst[ 7] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = 1;     newDst[11] = 0;\n  newDst[12] = v[0];  newDst[13] = v[1];  newDst[14] = v[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[ 0] = m00;\n    newDst[ 1] = m01;\n    newDst[ 2] = m02;\n    newDst[ 3] = m03;\n    newDst[ 4] = m10;\n    newDst[ 5] = m11;\n    newDst[ 6] = m12;\n    newDst[ 7] = m13;\n    newDst[ 8] = m20;\n    newDst[ 9] = m21;\n    newDst[10] = m22;\n    newDst[11] = m23;\n  }\n\n  newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationX<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = 1;  newDst[ 1] =  0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] =  c;  newDst[ 6] = s;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = -s;  newDst[10] = c;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] =  0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateX<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[4]  = c * m10 + s * m20;\n  newDst[5]  = c * m11 + s * m21;\n  newDst[6]  = c * m12 + s * m22;\n  newDst[7]  = c * m13 + s * m23;\n  newDst[8]  = c * m20 - s * m10;\n  newDst[9]  = c * m21 - s * m11;\n  newDst[10] = c * m22 - s * m12;\n  newDst[11] = c * m23 - s * m13;\n\n  if (m !== newDst) {\n    newDst[ 0] = m[ 0];\n    newDst[ 1] = m[ 1];\n    newDst[ 2] = m[ 2];\n    newDst[ 3] = m[ 3];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationY<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c;  newDst[ 1] = 0;  newDst[ 2] = -s;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] =  0;  newDst[ 7] = 0;\n  newDst[ 8] = s;  newDst[ 9] = 0;  newDst[10] =  c;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] =  0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateY<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 - s * m20;\n  newDst[ 1] = c * m01 - s * m21;\n  newDst[ 2] = c * m02 - s * m22;\n  newDst[ 3] = c * m03 - s * m23;\n  newDst[ 8] = c * m20 + s * m00;\n  newDst[ 9] = c * m21 + s * m01;\n  newDst[10] = c * m22 + s * m02;\n  newDst[11] = c * m23 + s * m03;\n\n  if (m !== newDst) {\n    newDst[ 4] = m[ 4];\n    newDst[ 5] = m[ 5];\n    newDst[ 6] = m[ 6];\n    newDst[ 7] = m[ 7];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationZ<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] =  c;  newDst[ 1] = s;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = -s;  newDst[ 5] = c;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] =  0;  newDst[ 9] = 0;  newDst[10] = 1;  newDst[11] = 0;\n  newDst[12] =  0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateZ<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 + s * m10;\n  newDst[ 1] = c * m01 + s * m11;\n  newDst[ 2] = c * m02 + s * m12;\n  newDst[ 3] = c * m03 + s * m13;\n  newDst[ 4] = c * m10 - s * m00;\n  newDst[ 5] = c * m11 - s * m01;\n  newDst[ 6] = c * m12 - s * m02;\n  newDst[ 7] = c * m13 - s * m03;\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n    newDst[11] = m[11];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nfunction axisRotation<T extends Mat4Arg = MatType>(axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  newDst[ 0] = xx + (1 - xx) * c;\n  newDst[ 1] = x * y * oneMinusCosine + z * s;\n  newDst[ 2] = x * z * oneMinusCosine - y * s;\n  newDst[ 3] = 0;\n  newDst[ 4] = x * y * oneMinusCosine - z * s;\n  newDst[ 5] = yy + (1 - yy) * c;\n  newDst[ 6] = y * z * oneMinusCosine + x * s;\n  newDst[ 7] = 0;\n  newDst[ 8] = x * z * oneMinusCosine + y * s;\n  newDst[ 9] = y * z * oneMinusCosine - x * s;\n  newDst[10] = zz + (1 - zz) * c;\n  newDst[11] = 0;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[14] = 0;\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nconst rotation = axisRotation;\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction axisRotate<T extends Mat4Arg = MatType>(m: Mat4Arg, axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  newDst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  newDst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  newDst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  newDst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  newDst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  newDst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  newDst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  newDst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  newDst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  newDst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nconst rotate = axisRotate;\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling<T extends Mat4Arg = MatType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = v[0];  newDst[ 1] = 0;     newDst[ 2] = 0;     newDst[ 3] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = v[1];  newDst[ 6] = 0;     newDst[ 7] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = v[2];  newDst[11] = 0;\n  newDst[12] = 0;     newDst[13] = 0;     newDst[14] = 0;     newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  newDst[ 0] = v0 * m[0 * 4 + 0];\n  newDst[ 1] = v0 * m[0 * 4 + 1];\n  newDst[ 2] = v0 * m[0 * 4 + 2];\n  newDst[ 3] = v0 * m[0 * 4 + 3];\n  newDst[ 4] = v1 * m[1 * 4 + 0];\n  newDst[ 5] = v1 * m[1 * 4 + 1];\n  newDst[ 6] = v1 * m[1 * 4 + 2];\n  newDst[ 7] = v1 * m[1 * 4 + 3];\n  newDst[ 8] = v2 * m[2 * 4 + 0];\n  newDst[ 9] = v2 * m[2 * 4 + 1];\n  newDst[10] = v2 * m[2 * 4 + 2];\n  newDst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n * @param s - the amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling<T extends Mat4Arg = MatType>(s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = s;  newDst[ 1] = 0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = s;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = s;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n * @param m - The matrix to be modified.\n * @param s - The amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale<T extends Mat4Arg = MatType>(m: Mat4Arg, s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = s * m[0 * 4 + 0];\n  newDst[ 1] = s * m[0 * 4 + 1];\n  newDst[ 2] = s * m[0 * 4 + 2];\n  newDst[ 3] = s * m[0 * 4 + 3];\n  newDst[ 4] = s * m[1 * 4 + 0];\n  newDst[ 5] = s * m[1 * 4 + 1];\n  newDst[ 6] = s * m[1 * 4 + 2];\n  newDst[ 7] = s * m[1 * 4 + 3];\n  newDst[ 8] = s * m[2 * 4 + 0];\n  newDst[ 9] = s * m[2 * 4 + 1];\n  newDst[10] = s * m[2 * 4 + 2];\n  newDst[11] = s * m[2 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\nreturn {\n  create,\n  set,\n  fromMat3,\n  fromQuat,\n  negate,\n  copy,\n  clone,\n  equalsApproximately,\n  equals,\n  identity,\n  transpose,\n  inverse,\n  determinant,\n  invert,\n  multiply,\n  mul,\n  setTranslation,\n  getTranslation,\n  getAxis,\n  setAxis,\n  getScaling,\n  perspective,\n  perspectiveReverseZ,\n  ortho,\n  frustum,\n  frustumReverseZ,\n  aim,\n  cameraAim,\n  lookAt,\n  translation,\n  translate,\n  rotationX,\n  rotateX,\n  rotationY,\n  rotateY,\n  rotationZ,\n  rotateZ,\n  axisRotation,\n  rotation,\n  axisRotate,\n  rotate,\n  scaling,\n  scale,\n  uniformScaling,\n  uniformScale,\n};\n\n}\n\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { QuatArg, QuatType } from './quat';\nimport { Mat3Arg } from './mat3.js';\nimport { Mat4Arg } from './mat4.js';\nimport { Vec3Arg } from './vec3.js';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\n\nexport { QuatArg, QuatType };\n\ntype QuatCtor<T extends QuatArg = Float32Array>  = new (n: number) => T;\n\nexport type RotationOrder =  'xyz' |  'xzy' |  'yxz' |  'yzx' |  'zxy' |  'zyx';\n\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl<QuatType extends QuatArg = Float32Array>(Ctor: QuatCtor<QuatType>) {\n  const vec3 = getVec3API<QuatType>(Ctor);\n\n/**\n * Creates a quat4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number, w?: number) {\n  const newDst = new Ctor(4);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n        if (w !== undefined) {\n          newDst[3] = w;\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Quat\n * Also see {@link quat.create} and {@link quat.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends QuatArg = QuatType>(x: number, y: number, z: number, w: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n  newDst[3] = w;\n\n  return newDst;\n}\n\n/**\n * Sets a quaternion from the given angle and  axis,\n * then returns it.\n *\n * @param axis - the axis to rotate around\n * @param angleInRadians - the angle\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The quaternion that represents the given axis and angle\n **/\nfunction fromAxisAngle<T extends QuatArg = QuatType>(axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n  const s = Math.sin(halfAngle);\n\n  newDst[0] = s * axis[0];\n  newDst[1] = s * axis[1];\n  newDst[2] = s * axis[2];\n  newDst[3] = Math.cos(halfAngle);\n\n  return newDst;\n}\n\n/**\n * Gets the rotation axis and angle\n * @param q - quaternion to compute from\n * @param dst - Vec3 to hold result. If not passed in a new one is created.\n * @return angle and axis\n */\nfunction toAxisAngle<T extends Vec3Arg = QuatType>(q: QuatArg, dst?: T): { angle: number, axis: T } {\n  const newDst = (dst ?? vec3.create(3)) as T;\n\n  const angle = Math.acos(q[3]) * 2;\n  const s = Math.sin(angle * 0.5);\n  if (s > utils.EPSILON) {\n    newDst[0] = q[0] / s;\n    newDst[1] = q[1] / s;\n    newDst[2] = q[2] / s;\n  } else {\n    newDst[0] = 1;\n    newDst[1] = 0;\n    newDst[2] = 0;\n  }\n\n  return { angle, axis: newDst };\n}\n\n/**\n * Returns the angle in degrees between two rotations a and b.\n * @param a - quaternion a\n * @param b - quaternion b\n * @return angle in radians between the two quaternions\n */\nfunction angle(a: QuatArg, b: QuatArg) {\n  const d = dot(a, b);\n  return Math.acos(2 * d * d - 1);\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction multiply<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n  newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n  newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n  newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return newDst;\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nconst mul = multiply;\n\n/**\n * Rotates the given quaternion around the X axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateX<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bx = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw + qw * bx;\n  newDst[1] = qy * bw + qz * bx;\n  newDst[2] = qz * bw - qy * bx;\n  newDst[3] = qw * bw - qx * bx;\n\n  return newDst;\n}\n\n/**\n * Rotates the given quaternion around the Y axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateY<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const by = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw - qz * by;\n  newDst[1] = qy * bw + qw * by;\n  newDst[2] = qz * bw + qx * by;\n  newDst[3] = qw * bw - qy * by;\n\n  return newDst;\n}\n\n/**\n * Rotates the given quaternion around the Z axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateZ<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bz = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw + qy * bz;\n  newDst[1] = qy * bw - qx * bz;\n  newDst[2] = qz * bw + qw * bz;\n  newDst[3] = qw * bw - qz * bz;\n\n  return newDst;\n}\n\n/**\n * Spherically linear interpolate between two quaternions\n *\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction slerp<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n\n  if (cosOmega < 0) {\n    cosOmega = -cosOmega;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n\n  let scale0;\n  let scale1;\n\n  if (1.0 - cosOmega > utils.EPSILON) {\n    const omega = Math.acos(cosOmega);\n    const sinOmega = Math.sin(omega);\n    scale0 = Math.sin((1 - t) * omega) / sinOmega;\n    scale1 = Math.sin(t * omega) / sinOmega;\n  } else {\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n\n  newDst[0] = scale0 * ax + scale1 * bx;\n  newDst[1] = scale0 * ay + scale1 * by;\n  newDst[2] = scale0 * az + scale1 * bz;\n  newDst[3] = scale0 * aw + scale1 * bw;\n\n  return newDst;\n}\n\n/**\n * Compute the inverse of a quaternion\n *\n * @param q - quaternion to compute the inverse of\n * @returns A quaternion that is the result of a * b\n */\nfunction inverse<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const a0 = q[0];\n  const a1 = q[1];\n  const a2 = q[2];\n  const a3 = q[3];\n\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1 / dot : 0;\n\n  newDst[0] = -a0 * invDot;\n  newDst[1] = -a1 * invDot;\n  newDst[2] = -a2 * invDot;\n  newDst[3] =  a3 * invDot;\n\n  return newDst;\n}\n\n/**\n * Compute the conjugate of a quaternion\n * For quaternions with a magnitude of 1 (a unit quaternion)\n * this returns the same as the inverse but is faster to calculate.\n *\n * @param q - quaternion to compute the conjugate of.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The conjugate of q\n */\nfunction conjugate<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = -q[0];\n  newDst[1] = -q[1];\n  newDst[2] = -q[2];\n  newDst[3] =  q[3];\n\n  return newDst;\n}\n\n/**\n * Creates a quaternion from the given rotation matrix.\n *\n * The created quaternion is not normalized.\n *\n * @param m - rotation matrix\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction fromMat<T extends QuatArg = QuatType>(m: Mat3Arg | Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  /*\n  0 1 2\n  3 4 5\n  6 7 8\n\n  0 1 2\n  4 5 6\n  8 9 10\n   */\n\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const trace = m[0] + m[5] + m[10];\n\n  if (trace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    const root = Math.sqrt(trace + 1); // 2w\n    newDst[3] = 0.5 * root;\n    const invRoot = 0.5 / root; // 1/(4w)\n\n    newDst[0] = (m[6] - m[9]) * invRoot;\n    newDst[1] = (m[8] - m[2]) * invRoot;\n    newDst[2] = (m[1] - m[4]) * invRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n\n    if (m[5] > m[0]) {\n      i = 1;\n    }\n    if (m[10] > m[i * 4 + i]) {\n      i = 2;\n    }\n\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n    newDst[i] = 0.5 * root;\n\n    const invRoot = 0.5 / root;\n\n    newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n    newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n    newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param xAngleInRadians - angle to rotate around X axis in radians.\n * @param yAngleInRadians - angle to rotate around Y axis in radians.\n * @param zAngleInRadians - angle to rotate around Z axis in radians.\n * @param order - order to apply euler angles\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n */\nfunction fromEuler<T extends QuatArg = QuatType>(\n    xAngleInRadians: number,\n    yAngleInRadians: number,\n    zAngleInRadians: number,\n    order: RotationOrder,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const xHalfAngle = xAngleInRadians * 0.5;\n  const yHalfAngle = yAngleInRadians * 0.5;\n  const zHalfAngle = zAngleInRadians * 0.5;\n\n  const sx = Math.sin(xHalfAngle);\n  const cx = Math.cos(xHalfAngle);\n  const sy = Math.sin(yHalfAngle);\n  const cy = Math.cos(yHalfAngle);\n  const sz = Math.sin(zHalfAngle);\n  const cz = Math.cos(zHalfAngle);\n\n  switch (order) {\n    case 'xyz':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'xzy':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yxz':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yzx':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zxy':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zyx':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    default:\n      throw new Error(`Unknown rotation order: ${order}`);\n  }\n\n  return newDst;\n}\n\n/**\n * Copies a quaternion. (same as {@link quat.clone})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is a copy of q\n */\nfunction copy<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = q[0];\n  newDst[1] = q[1];\n  newDst[2] = q[2];\n  newDst[3] = q[3];\n\n  return newDst;\n}\n\n/**\n * Clones a quaternion. (same as {@link quat.copy})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A copy of q.\n */\nconst clone = copy;\n\n/**\n * Adds two quaternions; assumes a and b have the same dimension.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the sum of a and b.\n */\nfunction add<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n  newDst[3] = a[3] + b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nfunction subtract<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n  newDst[3] = a[3] - b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Multiplies a quaternion by a scalar.\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction mulScalar<T extends QuatArg = QuatType>(v: QuatArg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n  newDst[3] = v[3] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a quaternion by a scalar. (same as mulScalar)\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction divScalar<T extends QuatArg = QuatType>(v: QuatArg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n  newDst[3] = v[3] / k;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two quaternions\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns dot product\n */\nfunction dot(a: QuatArg, b: QuatArg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Performs linear interpolation on two quaternions.\n * Given quaternions a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param t - Interpolation coefficient.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n  newDst[3] = a[3] + t * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Computes the length of quaternion\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nfunction length(v: QuatArg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of quaternion (same as length)\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of quaternion\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nfunction lengthSq(v: QuatArg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of quaternion (same as lengthSq)\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nconst lenSq = lengthSq;\n\n/**\n * Divides a quaternion by its Euclidean length and returns the quotient.\n * @param v - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The normalized quaternion.\n */\nfunction normalize<T extends QuatArg = QuatType>(v: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n    newDst[3] = v3 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Check if 2 quaternions are approximately equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are approximately equal\n */\nfunction equalsApproximately(a: QuatArg, b: QuatArg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 quaternions are exactly equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are exactly equal\n */\nfunction equals(a: QuatArg, b: QuatArg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Creates an identity quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns an identity quaternion\n */\nfunction identity<T extends QuatArg = QuatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n  newDst[3] = 1;\n\n  return newDst;\n}\n\nconst tempVec3 = vec3.create();\nconst xUnitVec3 = vec3.create();\nconst yUnitVec3 = vec3.create();\n\n/**\n * Computes a quaternion to represent the shortest rotation from one vector to another.\n *\n * @param aUnit - the start vector\n * @param bUnit - the end vector\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction rotationTo<T extends QuatArg = QuatType>(aUnit: Vec3Arg, bUnit: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const dot = vec3.dot(aUnit, bUnit);\n  if (dot < -0.999999) {\n    vec3.cross(xUnitVec3, aUnit, tempVec3);\n    if (vec3.len(tempVec3) < 0.000001) {\n      vec3.cross(yUnitVec3, aUnit, tempVec3);\n    }\n\n    vec3.normalize(tempVec3, tempVec3);\n    fromAxisAngle(tempVec3, Math.PI, newDst);\n\n    return newDst;\n  } else if (dot > 0.999999) {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 1;\n\n    return newDst;\n  } else {\n    vec3.cross(aUnit, bUnit, tempVec3);\n\n    newDst[0] = tempVec3[0];\n    newDst[1] = tempVec3[1];\n    newDst[2] = tempVec3[2];\n    newDst[3] = 1 + dot;\n\n    return normalize(newDst, newDst);\n  }\n}\n\nconst tempQuat1 = new Ctor(4);\nconst tempQuat2 = new Ctor(4);\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param c - the third quaternion\n * @param d - the fourth quaternion\n * @param t - Interpolation coefficient 0 to 1\n * @returns result\n */\nfunction sqlerp<T extends QuatArg = QuatType>(\n    a: QuatArg,\n    b: QuatArg,\n    c: QuatArg,\n    d: QuatArg,\n    t: number,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  slerp(a, d, t, tempQuat1);\n  slerp(b, c, t, tempQuat2);\n  slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n\n  return newDst;\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  fromAxisAngle,\n  toAxisAngle,\n  angle,\n  multiply,\n  mul,\n  rotateX,\n  rotateY,\n  rotateZ,\n  slerp,\n  inverse,\n  conjugate,\n  fromMat,\n  fromEuler,\n  copy,\n  clone,\n  add,\n  subtract,\n  sub,\n  mulScalar,\n  scale,\n  divScalar,\n  dot,\n  lerp,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  normalize,\n  equalsApproximately,\n  equals,\n  identity,\n  rotationTo,\n  sqlerp,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nexport function getAPI<T extends QuatArg = Float32Array>(Ctor: QuatCtor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n","/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec4Arg, Vec4Type } from './vec4';\nimport { Mat4Arg } from './mat4';\nimport { BaseArgType } from './types';\n\nexport { Vec4Arg, Vec4Type };\n\ntype Vec4Ctor<T extends Vec4Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl<VecType extends Vec4Arg = Float32Array>(Ctor: Vec4Ctor<VecType>) {\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number, w?: number) {\n  const newDst = new Ctor(4);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n        if (w !== undefined) {\n          newDst[3] = w;\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec4\n * Also see {@link vec4.create} and {@link vec4.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec4Arg = VecType>(x: number, y: number, z: number, w: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n  newDst[3] = w;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n  newDst[2] = Math.ceil(v[2]);\n  newDst[3] = Math.ceil(v[3]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n  newDst[2] = Math.floor(v[2]);\n  newDst[3] = Math.floor(v[3]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n  newDst[2] = Math.round(v[2]);\n  newDst[3] = Math.round(v[3]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec4Arg = VecType>(v: Vec4Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n  newDst[2] = Math.min(max, Math.max(min, v[2]));\n  newDst[3] = Math.min(max, Math.max(min, v[3]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n  newDst[3] = a[3] + b[3];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n  newDst[2] = a[2] + b[2] * scale;\n  newDst[3] = a[3] + b[3] * scale;\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n  newDst[3] = a[3] - b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec4Arg, b: Vec4Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec4Arg, b: Vec4Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n  newDst[3] = a[3] + t * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, t: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n  newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n  newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n  newDst[2] = Math.max(a[2], b[2]);\n  newDst[3] = Math.max(a[3], b[3]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n  newDst[2] = Math.min(a[2], b[2]);\n  newDst[3] = Math.min(a[3], b[3]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec4Arg = VecType>(v: Vec4Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n  newDst[3] = v[3] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec4Arg = VecType>(v: Vec4Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n  newDst[3] = v[3] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n  newDst[2] = 1 / v[2];\n  newDst[3] = 1 / v[3];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the dot product of two vectors\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec4Arg, b: Vec4Arg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec4Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec4Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec4Arg, b: Vec4Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec4Arg, b: Vec4Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n    newDst[3] = v3 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n  newDst[2] = -v[2];\n  newDst[3] = -v[3];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec4.clone})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n  newDst[2] = v[2];\n  newDst[3] = v[3];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec4.copy})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n  newDst[2] = a[2] * b[2];\n  newDst[3] = a[3] * b[3];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n  newDst[2] = a[2] / b[2];\n  newDst[3] = a[3] / b[3];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec4Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n  newDst[3] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec4Arg = VecType>(v: Vec4Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = v[3];\n\n  newDst[0] = m[0] * x + m[4] * y + m[ 8] * z + m[12] * w;\n  newDst[1] = m[1] * x + m[5] * y + m[ 9] * z + m[13] * w;\n  newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n  return newDst;\n}\n\n\n/**\n * Treat a 4D vector as a direction and set it's length\n *\n * @param a The vec4 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec4Arg = VecType>(a: Vec4Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec4 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec4Arg = VecType>(a: Vec4Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  zero,\n  transformMat4,\n  setLength,\n  truncate,\n  midpoint,\n};\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec4Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n\n","import {BaseArgType, ZeroArray} from './types';\nimport {Mat3Arg, Mat3Type, getAPI as getMat3API} from './mat3-impl';\nimport {Mat4Arg, Mat4Type, getAPI as getMat4API} from './mat4-impl';\nimport {QuatArg, QuatType, getAPI as getQuatAPI, RotationOrder} from './quat-impl';\nimport {Vec2Arg, Vec2Type, getAPI as getVec2API} from './vec2-impl';\nimport {Vec3Arg, Vec3Type, getAPI as getVec3API} from './vec3-impl';\nimport {Vec4Arg, Vec4Type, getAPI as getVec4API} from './vec4-impl';\nimport * as utils from './utils';\n\nexport {\n  RotationOrder,\n  utils,\n\n  BaseArgType,\n\n  Mat3Arg,\n  Mat4Arg,\n  QuatArg,\n  Vec2Arg,\n  Vec3Arg,\n  Vec4Arg,\n\n  Mat3Type,\n  Mat4Type,\n  QuatType,\n  Vec2Type,\n  Vec3Type,\n  Vec4Type,\n};\n\nexport type BaseCtor<T extends BaseArgType>  = new (n: number) => T;\n\nexport type Mat3 = Mat3Type<Float32Array>;\nexport type Mat4 = Mat4Type<Float32Array>;\nexport type Quat = QuatType<Float32Array>;\nexport type Vec2 = Vec2Type<Float32Array>;\nexport type Vec3 = Vec3Type<Float32Array>;\nexport type Vec4 = Vec4Type<Float32Array>;\n\nexport type Mat3d = Mat3Type<Float64Array>;\nexport type Mat4d = Mat4Type<Float64Array>;\nexport type Quatd = QuatType<Float64Array>;\nexport type Vec2d = Vec2Type<Float64Array>;\nexport type Vec3d = Vec3Type<Float64Array>;\nexport type Vec4d = Vec4Type<Float64Array>;\n\nexport type Mat3n = Mat3Type<number[]>;\nexport type Mat4n = Mat4Type<number[]>;\nexport type Quatn = QuatType<number[]>;\nexport type Vec2n = Vec2Type<number[]>;\nexport type Vec3n = Vec3Type<number[]>;\nexport type Vec4n = Vec4Type<number[]>;\n\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI<\n    Mat3 extends BaseArgType,\n    Mat4 extends BaseArgType,\n    Quat extends BaseArgType,\n    Vec2 extends BaseArgType,\n    Vec3 extends BaseArgType,\n    Vec4 extends BaseArgType,\n>(\n    Mat3Ctor: BaseCtor<Mat3>,\n    Mat4Ctor: BaseCtor<Mat4>,\n    QuatCtor: BaseCtor<Quat>,\n    Vec2Ctor: BaseCtor<Vec2>,\n    Vec3Ctor: BaseCtor<Vec3>,\n    Vec4Ctor: BaseCtor<Vec4>,\n) {\n  return {\n    /** @namespace mat4 */\n    mat4: getMat4API<Mat3>(Mat3Ctor),\n    /** @namespace mat3 */\n    mat3: getMat3API<Mat4>(Mat4Ctor),\n    /** @namespace quat */\n    quat: getQuatAPI<Quat>(QuatCtor),\n    /** @namespace vec2 */\n    vec2: getVec2API<Vec2>(Vec2Ctor),\n    /** @namespace vec3 */\n    vec3: getVec3API<Vec3>(Vec3Ctor),\n    /** @namespace vec4 */\n    vec4: getVec4API<Vec4>(Vec4Ctor),\n  };\n}\n\nexport const {\n  /** @namespace */\n  mat4,\n  /** @namespace */\n  mat3,\n  /** @namespace */\n  quat,\n  /** @namespace */\n  vec2,\n  /** @namespace */\n  vec3,\n  /** @namespace */\n  vec4,\n} = wgpuMatrixAPI<\n  Mat3, Mat4, Quat, Vec2, Vec3, Vec4>(\n    Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\n\nexport const {\n  /** @namespace */\n  mat4: mat4d,\n  /** @namespace */\n  mat3: mat3d,\n  /** @namespace */\n  quat: quatd,\n  /** @namespace */\n  vec2: vec2d,\n  /** @namespace */\n  vec3: vec3d,\n  /** @namespace */\n  vec4: vec4d,\n} = wgpuMatrixAPI<\n  Mat3d, Mat4d, Quatd, Vec2d, Vec3d, Vec4d>(\n    Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\n\nexport const {\n  /** @namespace */\n  mat4: mat4n,\n  /** @namespace */\n  mat3: mat3n,\n  /** @namespace */\n  quat: quatn,\n  /** @namespace */\n  vec2: vec2n,\n  /** @namespace */\n  vec3: vec3n,\n  /** @namespace */\n  vec4: vec4n,\n} = wgpuMatrixAPI<\n  Mat3n, Mat4n, Quatn, Vec2n, Vec3n, Vec4n>(\n    ZeroArray, Array, Array, Array, Array, Array);\n"],"names":["getAPIImpl","utils.EPSILON","cache","getAPI","getVec2API","getVec3API","getMat4API","getMat3API","getQuatAPI","getVec4API"],"mappings":"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C,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACzB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAAC;AACxB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAAC;AACxB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAAC;AACxB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAAC;AACxB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAAC;AACxB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAAC;AACxB,QAAA,MAAM,IAAI,GAAI,GAAG,GAAG,GAAG,CAA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AE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAA,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GA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"}